<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmFlexibleEmpMapper">
	<select id="getFlexibleEmpList" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , E.FLEXIBLE_NM AS flexibleNm
			     , NULL AS applId
				 , NULL AS applCd
				 , NULL AS applStatusCd
				 , NULL AS applStatusNm
			  FROM WTM_FLEXIBLE_EMP E
			 WHERE E.TENANT_ID = #{tenantId}
				AND E.ENTER_CD = #{enterCd}
				AND E.SABUN = #{sabun}
				AND E.WORK_TYPE_CD IN ('BASE', 'WORKTEAM')
				AND (F_WTM_TO_DATE(#{sYmd}, '%Y%m%d') <= F_WTM_TO_DATE(E.EYMD, '%Y%m%d') OR F_WTM_TO_DATE(E.SYMD, '%Y%m%d') < F_WTM_TO_DATE(#{eYmd}, '%Y%m%d'))
			UNION
			SELECT A.TENANT_ID AS tenantId
			     , A.ENTER_CD AS enterCd
			     , A.APPL_SABUN AS sabun
			     , E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , FA.SYMD AS sYmd
			     , FA.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , E.FLEXIBLE_NM AS flexibleNm
			     , A.APPL_ID AS applId
			     , A.APPL_CD AS applCd
			     , A.APPL_STATUS_CD AS applStatusCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
			 FROM WTM_APPL A
			 JOIN WTM_FLEXIBLE_APPL FA
			   ON A.APPL_ID = FA.APPL_ID
			 LEFT OUTER JOIN WTM_FLEXIBLE_EMP E
			   ON A.TENANT_ID = E.TENANT_ID
			  AND A.ENTER_CD = E.ENTER_CD
			  AND A.APPL_SABUN = E.SABUN
			  AND A.APPL_CD = E.WORK_TYPE_CD
			  AND FA.SYMD = E.SYMD
			  AND FA.EYMD = E.EYMD
			WHERE A.TENANT_ID = #{tenantId}
			  AND A.ENTER_CD = #{enterCd}
			  AND A.APPL_SABUN = #{sabun}
			  AND (F_WTM_TO_DATE(#{sYmd}, '%Y%m%d') <= F_WTM_TO_DATE(FA.EYMD, '%Y%m%d') OR F_WTM_TO_DATE(FA.SYMD, '%Y%m%d') < F_WTM_TO_DATE(#{eYmd}, '%Y%m%d'))
			ORDER BY sYmd
        ]]>
    </select>

	<select id="getWorkDayResult" parameterType="map" resultType="hashmap" >	
		SELECT A.TENANT_ID AS tenantId
		     , A.ENTER_CD AS enterCd
		     , A.APPL_SABUN AS sabun
		     , O.YMD AS ymd
		     , A.APPL_ID AS applId
		     , A.APPL_STATUS_CD AS applStatusCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
		     , A.APPL_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'TIME_TYPE_CD', A.APPL_CD, O.YMD) AS timeTypeNm
		     , NULL AS taaCd
		     , NULL AS taaNm
		     , O.OT_SDATE AS sDate
		     , O.OT_EDATE AS eDate
		     , O.OT_MINUTE AS minute
		  FROM WTM_APPL A
		  JOIN WTM_OT_APPL O
		    ON A.APPL_ID = O.APPL_ID
		  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
		    ON O.APPL_ID = R.APPL_ID
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.APPL_SABUN = #{sabun}
			AND O.YMD = #{ymd}
			AND R.APPL_ID IS NULL
		UNION ALL
		SELECT C.TENANT_ID AS tenantId
		     , C.ENTER_CD AS enterCd
		     , C.SABUN AS sabun
		     , C.YMD AS ymd
		     , R.APPL_ID AS applId
		     , NULL AS applStatusCd
		     , NULL AS applStatusNm
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(C.TENANT_ID, C.ENTER_CD, 'TIME_TYPE_CD', R.TIME_TYPE_CD, C.YMD) AS timeTypeNm
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_CODE_NM(C.TENANT_ID, C.ENTER_CD, 'TAA_TYPE_CD', R.TAA_CD, C.YMD) AS taaNm
		     , F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE) AS sDate
		     , F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE) AS eDate
		     , F_WTM_NVL(R.APPR_MINUTE, R.PLAN_MINUTE) AS minute
		  FROM WTM_WORK_CALENDAR C
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		 WHERE C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.SABUN = #{sabun}
		   AND #{ymd} BETWEEN F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE), '%Y%m%d') AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE), '%Y%m%d') 
		ORDER BY ymd, sDate
    </select>
    
    <!--해당 기간의 근무 정보 -->
  	<select id="getFlexibleRangeInfo" parameterType="map" resultType="map">
  		SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			  , E.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			  , M.FLEXIBLE_NM AS flexibleNm
			  , M.WORK_TYPE_CD AS workTypeCd
			  , E.SYMD AS sYmd
			  , E.EYMD AS eYmd
			  , IFNULL(SUM(CASE WHEN R.TIME_TYPE_CD='BASE' AND R.PLAN_MINUTE IS NOT NULL AND R.PLAN_MINUTE != '' AND R.PLAN_MINUTE > 0 THEN R.PLAN_MINUTE ELSE 0 END), 0) AS planBaseMinute
		     , IFNULL(SUM(CASE WHEN R.TIME_TYPE_CD='OT' AND R.PLAN_MINUTE IS NOT NULL AND R.PLAN_MINUTE != '' AND R.PLAN_MINUTE > 0 THEN R.PLAN_MINUTE ELSE 0 END), 0) AS planOtMinute
		     , IFNULL(SUM(CASE WHEN R.TIME_TYPE_CD='BASE' AND R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' AND R.APPR_MINUTE > 0 THEN R.APPR_MINUTE ELSE 0 END), 0) AS apprBaseMinute
		     , IFNULL(SUM(CASE WHEN R.TIME_TYPE_CD='OT' AND R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' AND R.APPR_MINUTE > 0 THEN R.APPR_MINUTE ELSE 0 END), 0) AS apprOtMinute
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_FLEXIBLE_STD_MGR M
		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
		  LEFT OUTER JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		 WHERE #{ymd} BETWEEN E.SYMD AND E.EYMD
		   AND E.SABUN = #{sabun}
		   AND E.TENANT_ID = #{tenantId}
		   AND E.ENTER_CD = #{enterCd}
    	GROUP BY E.FLEXIBLE_EMP_ID, E.FLEXIBLE_STD_MGR_ID, M.FLEXIBLE_NM, E.SYMD, E.EYMD
  	</select>
  	
  	 <!--해당 일의 근무 정보 -->
  	<select id="getFlexibleDayInfo" parameterType="map" resultType="map">
  		SELECT C.YMD AS ymd
			 , T.TIME_CD AS timeCd
		     , T.TIME_NM AS timeNm
		     , C.HOLIDAY_YN AS holidayYn
		     , MIN(PLAN_SDATE) AS planSdate
		     , MAX(PLAN_EDATE) AS planEdate
		     , SUM(PLAN_MINUTE) AS planMinute
		     , MIN(APPR_SDATE) AS apprSdate
		     , MAX(APPR_EDATE) AS apprEdate
		     , SUM(APPR_MINUTE) AS apprMinute
		     , F_WTM_GET_TAA_NAMES(C.TENANT_ID, C.ENTER_CD, C.SABUN, C.YMD) AS taaNames
		  FROM WTM_WORK_CALENDAR C
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		 WHERE C.YMD = #{ymd}
		   AND C.SABUN = #{sabun}
		   AND C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		GROUP BY C.YMD, T.TIME_CD, T.TIME_NM, C.HOLIDAY_YN
  	</select>
    
    <!--해당 일의 근무시간 정보 -->
  	<select id="getFlexibleWorkTimeInfo" parameterType="map" resultType="map">
	   SELECT C.TENANT_ID as tenantId
	        , C.ENTER_CD as enterCd
	        , C.SABUN as sabun
	        , C.YMD as ymd
	        , E.FLEXIBLE_EMP_ID as flexibleEmpId
	        , C.TIME_CD_MGR_ID as timeCdMgrId
	        , C.ENTRY_SDATE as entrySdate
	        , C.ENTRY_STYPE_CD as entryStypeCd
	        , C.ENTRY_EDATE as entryEdate
	        , C.ENTRY_ETYPE_CD as entryEtypeCd
	        , C.WORK_CLOSE_YN as workCloseYn
	        , C.HOLIDAY_YN as holidayYn
	        , R.WORK_DAY_RESULT_ID as workDayResultId
	        , R.APPL_ID as applId
	        , R.TIME_TYPE_CD AS timeTypeCd
	        , R.TAA_CD AS taaCd
	        , GROUP_CONCAT(F_WTM_GET_CODE_NM(C.TENANT_ID, C.ENTER_CD, 'TAA_TYPE_CD', R.TAA_CD, C.YMD) SEPARATOR ',')  AS taaNames
	        , R.PLAN_SDATE AS planSdate
	        , R.PLAN_EDATE AS planEdate
	        , R.PLAN_MINUTE AS planMinute
	        , R.APPR_SDATE AS apprSdate
	        , R.APPR_EDATE AS apprEdate
	        , CASE WHEN R.TIME_TYPE_CD='BASE' THEN R.APPR_MINUTE ELSE 0 END AS apprBaseMinute
	        , CASE WHEN R.TIME_TYPE_CD='OT' THEN R.APPR_MINUTE ELSE 0 END AS apprOtMinute
		  FROM WTM_WORK_CALENDAR C
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		  JOIN WTM_FLEXIBLE_EMP E
		    ON C.TENANT_ID = E.TENANT_ID AND C.ENTER_CD = E.ENTER_CD AND C.SABUN = E.SABUN AND C.YMD BETWEEN E.SYMD AND E.EYMD
		 WHERE C.YMD = #{ymd}
		   AND C.SABUN = #{sabun}
		   AND C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
  	</select>

	<select id="getFlexibleEmp" parameterType="map" resultType="wtmFlexibleEmp">
        <![CDATA[
			SELECT E.*
			  FROM WTM_FLEXIBLE_EMP E
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{empNo}
			   AND F_WTM_DATE_FORMAT(F_WTM_TO_DATE(#{ymd}, '%Y%m%d'), '%Y%m%d') BETWEEN E.SYMD AND E.EYMD
        ]]>
    </select>
	
    <select id="getPrevFlexible" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT A.APPL_SABUN AS sabun
			     , MAX(FA.SYMD) AS sYmd
			     , MAX(FA.EYMD) AS eYmd
			  FROM WTM_APPL A
			  JOIN WTM_FLEXIBLE_APPL FA
			    ON A.APPL_ID = FA.APPL_ID 
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_SABUN = #{empNo}
			GROUP BY A.APPL_SABUN
        ]]>
    </select>
    
    <select id="getWorkTermTime" parameterType="map" resultType="wtmWorkTermTime">
        <![CDATA[
			SELECT T.*
			     , E.FLEXIBLE_NM AS filexibleNm
			  FROM WTM_WORK_TERM_TIME T
			  JOIN WTM_FLEXIBLE_EMP E
			    ON T.TENANT_ID = E.TENANT_ID
			   AND T.ENTER_CD = E.ENTER_CD
			   AND T.SABUN = E.SABUN
			   AND T.FLEXUBLE_SDATE = E.SYMD
			   AND T.FLEXUBLE_EDATE = E.EYMD
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{empNo}
			   AND F_WTM_TO_DATE(#{ymd},'%Y%m%d') BETWEEN F_WTM_TO_DATE(E.SYMD,'%Y%m%d') AND F_WTM_TO_DATE(E.EYMD,'%Y%m%d')
        ]]>
    </select>
    
    <update id="createWorkCalendarOfSeleC" parameterType="map">
    	INSERT INTO WTM_WORK_CALENDAR(TENANT_ID, ENTER_CD, SABUN, YMD, TIME_CD_MGR_ID, WORK_CLOSE_YN, HOLIDAY_YN, UPDATE_ID)
			SELECT E.TENANT_ID, E.ENTER_CD, E.SABUN, D.SUN_YMD, P.TIME_CD_MGR_ID, 'N', T.HOL_YN,  #{userId}
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_DAY_MGR D
			    ON D.SUN_YMD BETWEEN E.SYMD AND E.EYMD
			 JOIN WTM_WORK_PATT_DET P
                ON P.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
               AND F_WTM_WEEKDAY(D.SUN_YMD) = P.SEQ
              JOIN WTM_TIME_CD_MGR T
                ON P.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			   AND NOT EXISTS 
				(
					SELECT * FROM WTM_WORK_CALENDAR C
			    	 WHERE C.YMD = D.SUN_YMD
			     	   AND C.SABUN = E.SABUN
				)
    </update>
    <update id="updateHolidayYnOFWorkCalendar" parameterType="map">
    	UPDATE WTM_WORK_CALENDAR C
    	  JOIN WTM_FLEXIBLE_EMP E
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD 
    	   SET C.HOLIDAY_YN = F_WTM_HOLIDAY_YN(C.YMD, #{1}, #{2}, #{3}, #{4}, #{5}, #{6}, #{7})
    	     , C.UPDATE_ID = #{userId}
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId} 
    </update>
    
     
    <update id="updatePlanMinute" parameterType="Long">
    	UPDATE WTM_WORK_DAY_RESULT X 
    	  JOIN (
			SELECT D.WORK_CALENDAR_ID  
				 , F_WTM_CALC_MINUTE( date_format(D.PLAN_SDATE, '%H%i') ,  date_format(D.PLAN_EDATE, '%H%i'), '','', '') -
				   SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, date_format(D.PLAN_SDATE, '%H%i') ,  date_format(D.PLAN_EDATE, '%H%i'), '' )) AS CM
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT D 
			    ON C.WORK_CALENDAR_ID = D.WORK_CALENDAR_ID
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  JOIN WTM_TIME_BREAK_MGR B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			   AND D.TIME_TYPE_CD = 'BASE'
			   AND (B.SHM BETWEEN date_format(D.PLAN_SDATE, '%H%i') AND date_format(D.PLAN_EDATE, '%H%i') 
			     OR B.EHM BETWEEN date_format(D.PLAN_SDATE, '%H%i') AND date_format(D.PLAN_EDATE, '%H%i'))
			 GROUP BY D.WORK_DAY_RESULT_ID
			) XX
			ON X.WORK_CALENDAR_ID = XX.WORK_CALENDAR_ID
		   SET X.PLAN_MINUTE = XX.CM
    </update>
    <update id="updateApprDatetimeByYmdAndSabun" parameterType="map">
    	UPDATE WTM_FLEXIBLE_STD_MGR M
		  JOIN WTM_FLEXIBLE_EMP E
		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		   SET R.APPR_SDATE = F_WTM_CALC_APPR_DATE(C.ENTRY_SDATE, R.PLAN_SDATE, M.UNIT_MINUTE, 'S')
			 , R.APPR_EDATE = F_WTM_CALC_APPR_DATE(C.ENTRY_EDATE, R.PLAN_EDATE, M.UNIT_MINUTE, 'E')
		 WHERE C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.YMD = #{ymd}
		   AND C.SABUN = #{sabun}
		   AND R.TIME_TYPE_CD = #{timeTypeCd}
    </update>
    <update id="updateApprMinuteByYmdAndSabun" parameterType="map">
    	UPDATE WTM_WORK_DAY_RESULT X 
    	  JOIN (
			SELECT D.WORK_CALENDAR_ID  
				 , F_WTM_CALC_MINUTE( date_format(D.APPR_SDATE, '%H%i') ,  date_format(D.APPR_EDATE, '%H%i'), '','', '') -
				   SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, date_format(D.APPR_SDATE, '%H%i') ,  date_format(D.APPR_EDATE, '%H%i'), '' )) AS CM
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT D 
			    ON C.WORK_CALENDAR_ID = D.WORK_CALENDAR_ID
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  JOIN WTM_TIME_BREAK_MGR B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND C.YMD = #{ymd}
			   AND D.TIME_TYPE_CD = #{timeTypeCd}
			   AND (B.SHM BETWEEN date_format(D.APPR_SDATE, '%H%i') AND date_format(D.APPR_EDATE, '%H%i') 
			     OR B.EHM BETWEEN date_format(D.APPR_SDATE, '%H%i') AND date_format(D.APPR_EDATE, '%H%i'))
			 GROUP BY D.WORK_DAY_RESULT_ID
			) XX
			ON X.WORK_CALENDAR_ID = XX.WORK_CALENDAR_ID
		   SET X.APPR_MINUTE = XX.CM
    </update>
    
    <select id="checkBaseWorktime" parameterType="Long" resultType="map">
    	SELECT ( CEIL( F_WTM_TO_DAYS(E.SYMD, E.EYMD) * P.INFO_VALUE / 7) * 60  >=  SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END)) AS isValid
    		, CEIL( F_WTM_TO_DAYS(E.SYMD, E.EYMD) * P.INFO_VALUE / 7) * 60 as totalWorktime
    	  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN  WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		  JOIN WTM_PROPERTIE P
		    ON P.TENANT_ID = C.TENANT_ID AND P.ENTER_CD = C.ENTER_CD AND P.INFO_KEY = 'OPTION_AVG_WORKTIME_1WEEK'
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
    </select>
    
    <select id="getWorktimePlan" parameterType="Long" resultType="map" >
    	SELECT C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL AND R.APPR_SDATE != '' THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, '%H:%i') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL AND R.APPR_EDATE != '' THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, '%H:%i') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END AS minute
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_CODE_NM(E.TENANT_ID, E.ENTER_CD, 'TAA_TYPE_CD', R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		 ORDER BY C.YMD
    </select>
    <!--
    	근무제 기간에서 특정일 포함 이전 근무시간 합(분) - 인정 분 이 없을 경우 계획 분으로   
     -->
    <select id="getTotalApprMinute" parameterType="map" resultType="map">
    	<![CDATA[
    	 SELECT SUM( CASE WHEN  R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END) AS totalApprMinute
		   FROM WTM_FLEXIBLE_STD_MGR M
		   JOIN WTM_FLEXIBLE_EMP E
		     ON M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
		   JOIN WTM_WORK_CALENDAR C
		     ON E.TENANT_ID = C.TENANT_ID
		    AND E.ENTER_CD = C.ENTER_CD
		    AND E.SABUN = C.SABUN
		    AND C.YMD BETWEEN E.SYMD AND E.EYMD
		   JOIN  WTM_WORK_DAY_RESULT R
		     ON R.WORK_CALENDAR_ID = C.WORK_CALENDAR_ID
		  WHERE C.YMD <= #{ymd} 
		    AND #{ymd}  BETWEEN E.SYMD AND E.EYMD
		    AND R.TIME_TYPE_CD = 'BASE'
		    AND E.SABUN = #{sabun}
		    AND E.TENANT_ID = #{tenantId}
		    AND E.ENTER_CD = #{enterCd} 
		  GROUP BY E.TENANT_ID, E.ENTER_CD, E.SABUN
		]]>
    </select>
    <!--
   		근무제 기간에서 특정일 이후부터 근무제 적용 종료기간 까지의 코어시간의 합을 가지고 온다. 
   		사용처 : 연장근무 신청 시 소정근로 선 소진사용여부에 따라 사용할 수 있다. 
     -->
	<select id="getTotalCoretime" parameterType="map" resultType="map">
		<![CDATA[
		SELECT SUM(X.CORE_HM) AS coreHm FROM (
 			SELECT  C.YMD, M.CORE_SHM,  M.CORE_EHM, F_WTM_CALC_MINUTE(M.CORE_SHM,  M.CORE_EHM, '','', '') -
  					SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, M.CORE_SHM,  M.CORE_EHM, '' )) AS CORE_HM
 			  FROM WTM_FLEXIBLE_STD_MGR M
 			  JOIN WTM_FLEXIBLE_EMP E
 			    ON M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
  			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
   			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD 
  			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
  			  JOIN WTM_TIME_BREAK_MGR B
				ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
			 WHERE C.YMD > #{ymd} 
 		  	   AND #{ymd}  BETWEEN E.SYMD AND E.EYMD
 			   AND E.SABUN = #{sabun}
 			   AND E.TENANT_ID = #{tenantId}
 			   AND E.ENTER_CD = #{enterCd}
   			   AND (B.SHM BETWEEN M.CORE_SHM  AND M.CORE_EHM 
	 				OR B.EHM BETWEEN M.CORE_SHM  AND M.CORE_EHM)
 			 GROUP BY E.TENANT_ID, E.ENTER_CD, E.SABUN, C.YMD
 		) X
 		]]>	
  	</select>
  	<select id="getSumOtMinute" parameterType="map" resultType="map">
  		SELECT SUM(X.otMinute) AS otMinute FROM (
			SELECT IFNULL(SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' AND R.APPR_MINUTE > 0 THEN IFNULL(R.APPR_MINUTE, 0)
							ELSE IFNULL(R.PLAN_MINUTE, 0) END 
			                ), 0) AS otMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
			 WHERE #{ymd} BETWEEN E.SYMD AND E.EYMD
			   AND R.TIME_TYPE_CD = 'OT'
			   AND E.SABUN = #{sabun}
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			 UNION ALL
			SELECT IFNULL(SUM(IFNULL(O.OT_MINUTE, 0)),0)  AS otMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_APPL A
			    ON E.TENANT_ID = A.TENANT_ID
			   AND E.ENTER_CD = A.ENTER_CD
			   AND E.SABUN = A.APPL_IN_SABUN
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.APPL_STATUS_CD IN ('21','31')
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND #{ymd} BETWEEN E.SYMD AND E.EYMD
			 ) X
  	</select>
  	
  	<select id="calcMinuteExceptBreaktime" parameterType="map" resultType="map">
  		SELECT F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') -  SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) AS calcMinute 
  		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  JOIN WTM_TIME_BREAK_MGR B
		    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
		 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
		   AND E.TENANT_ID = #{tenantId}
		   AND E.ENTER_CD = #{enterCd}
		   AND E.SABUN = #{sabun}
		   AND C.YMD = #{ymd}
  	</select>
  	
  	<select id="checkDuplicateWorktime" parameterType="map" resultType="map">
  		SELECT COUNT(*) AS workCnt FROM (
			SELECT 1 
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun} 
			   AND (F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE) BETWEEN #{sdate} AND #{edate} OR F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE)  BETWEEN #{sdate} AND #{edate} )
			 UNION ALL
			SELECT 2 
			  FROM WTM_APPL A
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND (O.OT_SDATE BETWEEN #{sdate} AND #{edate} OR O.OT_EDATE BETWEEN #{sdate} AND #{edate})
			) X
  	</select>
  	
  	<update id="createWorkteamOfWtmFlexibleEmp" parameterType="map">
		INSERT INTO WTM_FLEXIBLE_EMP(TENANT_ID, ENTER_CD, FLEXIBLE_STD_MGR_ID, SABUN, SYMD, EYMD, WORK_TYPE_CD, UPDATE_ID)
			SELECT M.TENANT_ID, M.ENTER_CD, M.FLEXIBLE_STD_MGR_ID, E.SABUN, M.SYMD, M.EYMD, S.WORK_TYPE_CD, #{updateId}
			  FROM WTM_WORKTEAM_MGR M
			  JOIN WTM_WORKTEAM_EMP E
			    ON M.WORKTEAM_MGR_ID = E.WORKTEAM_MGR_ID
			  JOIN WTM_FLEXIBLE_STD_MGR S
			    ON M.FLEXIBLE_STD_MGR_ID = S.FLEXIBLE_STD_MGR_ID
			 WHERE NOT EXISTS
				(
					SELECT * 
					  FROM WTM_FLEXIBLE_EMP F
					  JOIN WTM_FLEXIBLE_STD_MGR SM
					    ON F.FLEXIBLE_STD_MGR_ID = SM.FLEXIBLE_STD_MGR_ID
					 WHERE M.TENANT_ID = F.TENANT_ID
					   AND M.ENTER_CD = F.ENTER_CD
					   AND E.SABUN = F.SABUN
					   AND SM.BASE_WORK_YN = 'N'
					   AND ( M.SYMD BETWEEN F.SYMD AND F.EYMD
						OR M.EYMD BETWEEN F.SYMD AND F.EYMD )
				)
			   AND M.WORKTEAM_MGR_ID = #{workteamMgrId}
			   AND M.TENANT_ID = #{tenantId}
			   AND M.ENTER_CD = #{enterCd} 
			 
  	</update>
  	
  	<update id="updateWorkteamOfWtmFlexibleEmp" parameterType="map" >
  		UPDATE WTM_WORKTEAM_MGR M
		  JOIN WTM_WORKTEAM_EMP E
		    ON M.WORKTEAM_MGR_ID = E.WORKTEAM_MGR_ID
		  JOIN WTM_FLEXIBLE_STD_MGR S
		    ON M.FLEXIBLE_STD_MGR_ID = S.FLEXIBLE_STD_MGR_ID
		  JOIN  WTM_FLEXIBLE_EMP F
		    ON M.TENANT_ID = F.TENANT_ID
		   AND M.ENTER_CD = F.ENTER_CD
		   AND E.SABUN = F.SABUN
		   AND M.FLEXIBLE_STD_MGR_ID = F.FLEXIBLE_STD_MGR_ID -- 중복된 사람에서 같은 근무제도의 변경일 경우 갱신하자
		   AND ( M.SYMD BETWEEN F.SYMD AND F.EYMD
				OR M.EYMD BETWEEN F.SYMD AND F.EYMD )
		   SET F.SYMD = M.SYMD
		     , F.EYMD = M.EYMD
		 WHERE  M.WORKTEAM_MGR_ID = #{workteamMgrId}
  	</update>
  	
  	<update id="createWtmWorkteamOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORKTEAM_CREATE( #{workteamMgrId}, #{pId} ) }
  	</update>
  	
  	<!-- 계획을 작성 해야 하는 유연근무제 리스트 -->
  	<select id="getFlexibleEmpListForPlan" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
    		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  LEFT OUTER JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
				 ON C.WORK_CALENDAR_ID = R.WORK_CALENDAR_ID
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND E.WORK_TYPE_CD IN ('SELE_F', 'SELE_C')
			   AND (#{ymd} BETWEEN E.SYMD AND E.EYMD OR F_WTM_TO_DATE(#{ymd},'%Y%m%d') < F_WTM_TO_DATE(E.EYMD,'%Y%m%d'))
			GROUP BY E.FLEXIBLE_EMP_ID, E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, E.EYMD
			ORDER BY sYmd
        ]]>
    </select>
    
  	<select id="getWorkDayResultByCalendarId" parameterType="map" resultType="hashmap" >
	    	SELECT C.WORK_DAY_RESULT_ID as workDayResultId
	    			, C.APPL_ID as applId
	    			, C.TIME_TYPE_CD as timeTypeCd
	    			, C.TAA_CD as taaCd
	    			, DATE_FORMAT(C.PLAN_SDATE, '%Y%m%d%H%i%s') as planSdate
	    			, DATE_FORMAT(C.PLAN_EDATE, '%Y%m%d%H%i%s') as planEdate
	    			, C.PLAN_MINUTE as planMinute
	    			, DATE_FORMAT(C.APPR_SDATE, '%Y%m%d%H%i%s') as apprSdate
	    			, DATE_FORMAT(C.APPR_EDATE, '%Y%m%d%H%i%s') as apprEdate
	    			, C.APPR_MINUTE as apprMinute
	    			, C.WORK_YN as workYn
	    			, C.WORK_CALENDAR_ID as workCalendarId
	    			, E.FLEXIBLE_EMP_ID as flexibleEmpId
			  FROM WTM_WORK_DAY_RESULT C
			  JOIN WTM_WORK_CALENDAR D
		    	ON D.WORK_CALENDAR_ID = C.WORK_CALENDAR_ID
		    	JOIN WTM_FLEXIBLE_EMP E
		    	ON D.TENANT_ID = E.TENANT_ID AND D.ENTER_CD = E.ENTER_CD AND D.SABUN = E.SABUN AND D.YMD BETWEEN E.SYMD AND E.EYMD
			 WHERE C.WORK_CALENDAR_ID = #{workCalendarId}
    </select>
</mapper>
