<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmScheduleMapper">
    
    <select id="getWtmCloseDay" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT AA.ENTER_CD AS enterCd, AA.SABUN AS sabun, AA.YMD AS ymd
			  FROM (SELECT A.ENTER_CD, A.SABUN, A.YMD, MIN(F_WTM_DATE_FORMAT(B.PLAN_SDATE, 'YMD')) AS SDATE, MAX(F_WTM_DATE_FORMAT(B.PLAN_EDATE, 'YMD')) AS EDATE
			        FROM WTM_WORK_CALENDAR A
			       INNER JOIN WTM_WORK_DAY_RESULT B
			           ON A.TENANT_ID = B.TENANT_ID
			          AND A.ENTER_CD = B.ENTER_CD
			          AND A.SABUN = B.SABUN
			          AND A.YMD = B.YMD
			       WHERE B.TIME_TYPE_CD IN ('BASE', 'REGA', 'OT', 'FIXOT', 'NIGHT')	-- 간주근무나 기본근무일때)
			          AND A.TENANT_ID = #{tenantId}
			          AND A.YMD = #{ymd}
			       GROUP BY A.ENTER_CD, A.SABUN, A.YMD
			       ) AA
			 WHERE ((#{closeType} = 'A' AND AA.SDATE = AA.EDATE)
			     OR (#{closeType} = 'B' AND AA.SDATE != AA.EDATE))
			UNION
			SELECT A.ENTER_CD, A.SABUN, A.YMD
			  FROM WTM_WORK_CALENDAR A
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT B
			     ON A.TENANT_ID = B.TENANT_ID
			    AND A.ENTER_CD = B.ENTER_CD
			    AND A.SABUN = B.SABUN
			    AND A.YMD = B.YMD
			    AND A.ENTRY_SDATE <= B.PLAN_EDATE
			    AND A.ENTRY_EDATE >= B.PLAN_SDATE
			 WHERE A.TENANT_ID = #{tenantId}
			    AND A.YMD < #{ymd}
			    AND A.HOLIDAY_YN = 'N'
			    AND B.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')
			    AND A.ENTRY_SDATE IS NOT NULL AND A.ENTRY_EDATE IS NOT NULL
				 AND B.APPR_SDATE IS NULL AND B.APPR_EDATE IS NULL
			 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
			 UNION
			SELECT A.ENTER_CD, A.SABUN, A.YMD
			  FROM WTM_WORK_CALENDAR A
			  JOIN WTM_WORK_DAY_RESULT B
			     ON A.TENANT_ID = B.TENANT_ID
			    AND A.ENTER_CD = B.ENTER_CD
			    AND A.SABUN = B.SABUN
			    AND A.YMD = B.YMD
			    AND A.ENTRY_SDATE <= B.PLAN_EDATE
			    AND A.ENTRY_EDATE >= B.PLAN_SDATE
			 WHERE A.TENANT_ID = #{tenantId}
			    AND A.YMD < #{ymd}
			    AND A.HOLIDAY_YN = 'Y'
			    AND B.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')
			    AND A.ENTRY_SDATE IS NOT NULL AND A.ENTRY_EDATE IS NOT NULL
				 AND B.PLAN_SDATE IS NOT NULL AND B.PLAN_EDATE IS NOT NULL 
				 AND B.APPR_SDATE IS NULL AND B.APPR_EDATE IS NULL
			 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
			ORDER BY YMD, SABUN
        ]]>
    </select>
    
    <select id="getWtmCloseDayUnplaned" parameterType="map" resultType="hashmap">
        <![CDATA[
        	 SELECT A.ENTER_CD AS enterCd, A.SABUN AS sabun, A.YMD AS ymd
						  FROM WTM_WORK_CALENDAR A
						  LEFT OUTER JOIN WTM_WORK_DAY_RESULT B
						     ON A.TENANT_ID = B.TENANT_ID
						    AND A.ENTER_CD = B.ENTER_CD
						    AND A.SABUN = B.SABUN
						    AND A.YMD = B.YMD
						    AND A.ENTRY_SDATE <= B.PLAN_EDATE
						    AND A.ENTRY_EDATE >= B.PLAN_SDATE
						    AND B.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')
						 WHERE A.TENANT_ID = #{tenantId}
						    AND A.YMD BETWEEN (DATE_FORMAT(DATE_ADD(CONCAT(#{ymd}, '000000'), INTERVAL -10 DAY), '%Y%m%d')) AND #{ymd}
						    AND A.HOLIDAY_YN = 'N'
						    AND A.ENTRY_SDATE IS NOT NULL AND A.ENTRY_EDATE IS NOT NULL
						    AND ((B.APPR_SDATE IS NULL AND B.APPR_EDATE IS NULL)
						          OR
						          B.SABUN IS NULL
						         )
						 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
						 UNION
						SELECT A.ENTER_CD, A.SABUN, A.YMD
						  FROM WTM_WORK_CALENDAR A
						  JOIN WTM_WORK_DAY_RESULT B
						     ON A.TENANT_ID = B.TENANT_ID
						    AND A.ENTER_CD = B.ENTER_CD
						    AND A.SABUN = B.SABUN
						    AND A.YMD = B.YMD
						    AND A.ENTRY_SDATE <= B.PLAN_EDATE
						    AND A.ENTRY_EDATE >= B.PLAN_SDATE
						 WHERE A.TENANT_ID = #{tenantId}
						    AND A.YMD BETWEEN (DATE_FORMAT(DATE_ADD(CONCAT(#{ymd}, '000000'), INTERVAL -10 DAY), '%Y%m%d')) AND #{ymd}
						    AND A.HOLIDAY_YN = 'Y'
						    AND B.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')
						    AND A.ENTRY_SDATE IS NOT NULL AND A.ENTRY_EDATE IS NOT NULL
							 AND B.PLAN_SDATE IS NOT NULL AND B.PLAN_EDATE IS NOT NULL 
							 AND B.APPR_SDATE IS NULL AND B.APPR_EDATE IS NULL
						 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
		   ORDER BY YMD, SABUN
        ]]>
    </select>

	<select id="getOtList" parameterType="map" resultType="hashmap">
		<![CDATA[
	    	SELECT CONCAT(X.ENTER_CD, '@', X.SABUN) AS EMP,
				CASE WHEN F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD,  X.SABUN) != '' THEN  
    	 			 CONCAT(X.ENTER_CD, '@', F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD, X.SABUN)) 
    	 			 ELSE CONCAT(X.ENTER_CD, '@', O.SABUN) END AS LEADER,    	 		
    	 		X.REST_WORK_MINUTE, 
    	 		X.REST_OT_MINUTE, 
    	 		X.SABUN, 
    	 		X.EMP_NM
	    	FROM (
					SELECT H.TENANT_ID, H.ENTER_CD, H.SABUN, H.EMP_NM, H.ORG_CD
					  ,	F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'T', 'WORK') AS TOTAL_WORK_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'T', 'OT') AS TOTAL_OT_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'R', 'WORK') AS REST_WORK_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'R', 'OT') AS REST_OT_MINUTE
				FROM WTM_EMP_HIS H 
				JOIN WTM_WORK_CALENDAR C ON H.TENANT_ID=C.TENANT_ID 
						AND H.ENTER_CD=C.ENTER_CD
						AND H.SABUN = C.SABUN AND C.YMD=#{ymd}
				WHERE H.TENANT_ID=#{tenantId}
				AND H.ENTER_CD = #{enterCd}
				AND H.STATUS_CD = 'AA'
				AND H.BUSINESS_PLACE_CD = #{businessPlaceCd}
				AND H.SYMD < #{ymd} 
				AND H.EYMD >= #{ymd}
			) X LEFT JOIN WTM_ORG_CONC O ON 
				O.TENANT_ID = X.TENANT_ID 
				AND O.ENTER_CD = X.ENTER_CD 
				AND O.ORG_CD = X.ORG_CD 
				AND O.SYMD < #{ymd}  AND O.EYMD >= #{ymd} 
			]]>
			<if test="stdType.equals('R_OT')">
				<![CDATA[
					WHERE X.REST_OT_MINUTE <= #{stdOtTime}
				]]>
			</if>
			<if test="stdType.equals('R_WORK')">
				<![CDATA[
					WHERE X.REST_WORK_MINUTE <= #{stdOtTime}
				]]>
			</if>
	</select>
	
	<select id="getInoutCheckList" parameterType="map" resultType="hashmap">
		<![CDATA[
				SELECT CONCAT(X.ENTER_CD, '@', X.SABUN) AS EMP_KEY
				FROM (
				SELECT MIN(W.PLAN_SDATE) AS PLAN_SDATE
					, MAX(W.PLAN_EDATE) AS PLAN_EDATE
					, C.ENTRY_SDATE
					, C.ENTRY_EDATE
					, C.ENTER_CD
					, C.SABUN
					FROM WTM_WORK_DAY_RESULT W 
					JOIN WTM_EMP_HIS E
						ON E.TENANT_ID = W.TENANT_ID
						AND E.ENTER_CD = W.ENTER_CD
						AND E.SABUN = W.SABUN
						AND E.BUSINESS_PLACE_CD = #{businessPlaceCd}
					JOIN WTM_WORK_CALENDAR C 
						ON W.TENANT_ID=C.TENANT_ID 
							AND W.ENTER_CD=C.ENTER_CD
							AND W.SABUN = C.SABUN
						    AND W.YMD = C.YMD 
					WHERE W.YMD=DATE_FORMAT(now(), '%Y%m%d')
						AND W.ENTER_CD=#{enterCd}
						AND W.TIME_TYPE_CD NOT IN ('TAA','REGA','SUBS')
				GROUP BY W.TENANT_ID, W.ENTER_CD, W.SABUN, W.YMD) X
				WHERE 
					(#{stdType} = 'B_IN' AND DATE_FORMAT(now(), '%Y%m%d%H%i') = DATE_FORMAT(DATE_SUB(X.PLAN_SDATE, INTERVAL #{stdMinute} MINUTE), '%Y%m%d%H%i') AND X.ENTRY_SDATE IS NULL)
					OR 
					(#{stdType} = 'A_OUT' AND DATE_FORMAT(now(), '%Y%m%d%H%i') = DATE_FORMAT(DATE_ADD(X.PLAN_EDATE, INTERVAL #{stdMinute} MINUTE), '%Y%m%d%H%i') AND X.ENTRY_EDATE IS NULL)
		]]>
	</select>
	
	<select id="getIntfOtList" parameterType="map" resultType="hashmap">
		<![CDATA[
			SELECT MAX(OT_ID) AS OT_ID, CompanySeq, WkDate, EmpID, SUM(DTCnt) AS DTCnt, SUM(NTCnt) AS NTCnt, MAX(IsHoliApp) AS IsHoliApp, MIN(UPDATE_DATE) AS UPDATE_DATE 
			  FROM (
			SELECT C.WORK_DAY_RESULT_ID AS OT_ID
			      , C.ENTER_CD AS CompanySeq
			      , C.YMD AS WkDate
			      , C.SABUN AS EmpID
			      , C.APPR_MINUTE AS DTCnt
			      , CASE WHEN C.TIME_TYPE_CD = 'NIGHT' THEN C.APPR_MINUTE ELSE 0 END AS NTCnt
			      , D.HOLIDAY_YN AS IsHoliApp
			      , C.UPDATE_DATE 
			       FROM WTM_FLEXIBLE_EMP A
			      INNER JOIN WTM_FLEXIBLE_STD_MGR B
			         ON A.FLEXIBLE_STD_MGR_ID = B.FLEXIBLE_STD_MGR_ID
			        AND B.WORK_TYPE_CD NOT IN ('SELE_C', 'SELE_F')
			      INNER JOIN WTM_WORK_CALENDAR D
			         ON A.TENANT_ID = D.TENANT_ID
			           AND A.ENTER_CD = D.ENTER_CD
			           AND A.SABUN = D.SABUN
			           AND D.YMD BETWEEN A.SYMD AND A.EYMD
			    INNER JOIN WTM_WORK_DAY_RESULT C
			         ON A.TENANT_ID = C.TENANT_ID
			           AND A.ENTER_CD = C.ENTER_CD
			           AND A.SABUN = C.SABUN
			           AND C.YMD BETWEEN A.SYMD AND A.EYMD
			           AND C.YMD = D.YMD
			         AND C.APPR_SDATE IS NOT NULL
			         AND C.APPR_EDATE IS NOT NULL
			           AND C.TIME_TYPE_CD IN ('OT', 'FIXOT', 'NIGHT')
			      WHERE C.TENANT_ID = #{tenantId}
			        AND IFNULL(C.APPR_MINUTE ,0) > 0
			        AND C.UPDATE_DATE > F_WTM_TO_DATE(#{lastDate}, 'YMDHIS')
			UNION ALL
			SELECT D.WORK_DAY_RESULT_ID AS OT_ID
			    , D.ENTER_CD AS CompanySeq
			  , D.YMD AS WkDate
			  , D.SABUN AS EmpID
			  , 0  AS DTCnt
			  , F_WTM_CALC_MINUTE( F_WTM_DATE_FORMAT(D.NIGHT_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.NIGHT_EDATE, 'HI'), '','', '') -
			         SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.NIGHT_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.NIGHT_EDATE, 'HI'), '' ))  AS NTCnt
			  , D.HOLIDAY_YN AS IsHoliApp
			  , D.UPDATE_DATE
			  FROM (
			SELECT C.WORK_DAY_RESULT_ID
			      , C.ENTER_CD
			      , C.YMD
			      , C.SABUN
			      , D.HOLIDAY_YN
			      , D.TIME_CD_MGR_ID
			      , GREATEST(C.APPR_SDATE, F_WTM_TO_DATE(CONCAT(C.YMD, '220000'), 'YMDHIS')) AS NIGHT_SDATE
			    , LEAST(C.APPR_EDATE, F_WTM_DATE_ADD(F_WTM_TO_DATE(CONCAT(C.YMD, '060000'), 'YMDHIS'), 1, 'D')) AS NIGHT_EDATE
			      , C.UPDATE_DATE 
			       FROM WTM_FLEXIBLE_EMP A
			      INNER JOIN WTM_FLEXIBLE_STD_MGR B
			         ON A.FLEXIBLE_STD_MGR_ID = B.FLEXIBLE_STD_MGR_ID
			        AND B.WORK_TYPE_CD NOT IN ('SELE_C', 'SELE_F')
			      INNER JOIN WTM_WORK_CALENDAR D
			         ON A.TENANT_ID = D.TENANT_ID
			           AND A.ENTER_CD = D.ENTER_CD
			           AND A.SABUN = D.SABUN
			           AND D.YMD BETWEEN A.SYMD AND A.EYMD
			    INNER JOIN WTM_WORK_DAY_RESULT C
			         ON A.TENANT_ID = C.TENANT_ID
			           AND A.ENTER_CD = C.ENTER_CD
			           AND A.SABUN = C.SABUN
			           AND C.YMD BETWEEN A.SYMD AND A.EYMD
			           AND C.YMD = D.YMD
			         AND C.APPR_SDATE IS NOT NULL
			         AND C.APPR_EDATE IS NOT NULL
			           AND C.TIME_TYPE_CD = 'BASE'
			           AND (C.APPR_SDATE BETWEEN F_WTM_TO_DATE(CONCAT(C.YMD, '220000'), 'YMDHIS') AND F_WTM_DATE_ADD(F_WTM_TO_DATE(CONCAT(C.YMD, '060000'), 'YMDHIS'), 1, 'D')
			           OR
			         C.APPR_EDATE BETWEEN F_WTM_TO_DATE(CONCAT(C.YMD, '220000'), 'YMDHIS') AND F_WTM_DATE_ADD(F_WTM_TO_DATE(CONCAT(C.YMD, '060000'), 'YMDHIS'), 1, 'D')
			         )
			      WHERE C.TENANT_ID = #{tenantId}
			        AND IFNULL(C.APPR_MINUTE ,0) > 0
			        AND C.UPDATE_DATE > F_WTM_TO_DATE(#{lastDate}, 'YMDHIS')
			 ) D
			 JOIN WTM_TIME_CD_MGR T
			    ON D.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			   AND T.BREAK_TYPE_CD = 'MGR'
			  LEFT OUTER JOIN WTM_TIME_BREAK_MGR B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			GROUP BY D.WORK_DAY_RESULT_ID, D.ENTER_CD, D.SABUN, D.YMD, D.HOLIDAY_YN
			UNION ALL
			SELECT DISTINCT C.WORK_DAY_RESULT_ID AS OT_ID
			      , C.ENTER_CD AS CompanySeq
			      , C.YMD AS WkDate
			      , C.SABUN AS EmpID
			      , C.APPR_MINUTE AS DTCnt
			      , 0 AS NTCnt
			      , D.HOLIDAY_YN AS IsHoliApp
			      , C.UPDATE_DATE 
			       FROM WTM_FLEXIBLE_EMP A
			      INNER JOIN WTM_FLEXIBLE_STD_MGR B
			         ON A.FLEXIBLE_STD_MGR_ID = B.FLEXIBLE_STD_MGR_ID
			        AND B.WORK_TYPE_CD NOT IN ('SELE_C', 'SELE_F')
			      INNER JOIN WTM_WORK_CALENDAR D
			         ON A.TENANT_ID = D.TENANT_ID
			           AND A.ENTER_CD = D.ENTER_CD
			           AND A.SABUN = D.SABUN
			           AND D.YMD BETWEEN A.SYMD AND A.EYMD
			    INNER JOIN WTM_WORK_DAY_RESULT C
			         ON A.TENANT_ID = C.TENANT_ID
			           AND A.ENTER_CD = C.ENTER_CD
			           AND A.SABUN = C.SABUN
			           AND C.YMD BETWEEN A.SYMD AND A.EYMD
			           AND C.YMD = D.YMD
			         AND C.APPR_SDATE IS NOT NULL
			         AND C.APPR_EDATE IS NOT NULL
			           AND C.TIME_TYPE_CD IN ('BASE')
			      INNER JOIN WTM_HOLIDAY_MGR F
			         ON F.TENANT_ID = A.TENANT_ID
			        AND F.ENTER_CD = A.ENTER_CD
			        AND F.HOLIDAY_YMD = D.YMD
			    WHERE C.TENANT_ID = #{tenantId}
			        AND IFNULL(C.APPR_MINUTE ,0) > 0
			        AND D.HOLIDAY_YN = 'N'
			        AND C.UPDATE_DATE > F_WTM_TO_DATE(#{lastDate}, 'YMDHIS')
			) AA
			GROUP BY AA.CompanySeq, AA.WkDate, AA.EmpID
		]]>
	</select>

	<select id="getTotList" parameterType="map" resultType="hashmap">
		<![CDATA[
			SELECT CONCAT(X.ENTER_CD, '@', X.SABUN) AS EMP,
				CASE WHEN F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD,  X.SABUN) != '' THEN  
		 			CONCAT(X.ENTER_CD, '@', F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD, X.SABUN)) ELSE '' END AS LEADER,
		 		X.WORK_MINUTE, 
		 		X.EMP_NM 
 			FROM (
			SELECT R.TENANT_ID, R.ENTER_CD, R.SABUN, H.EMP_NM, SUM(CASE WHEN R.APPR_MINUTE IS NULL THEN R.PLAN_MINUTE ELSE APPR_MINUTE END) AS WORK_MINUTE
			FROM WTM_WORK_DAY_RESULT R
			JOIN WTM_EMP_HIS H
				ON H.TENANT_ID = R.TENANT_ID
				AND H.ENTER_CD = R.ENTER_CD
				AND H.SABUN = R.SABUN
				AND H.STATUS_CD = 'AA'
				AND H.EYMD = '29991231'
				AND H.BUSINESS_PLACE_CD = #{businessPlaceCd}
			JOIN WTM_WORK_TERM_TIME T
				ON T.TENANT_ID = R.TENANT_ID 
				AND T.ENTER_CD = R.ENTER_CD
				AND T.SABUN = R.SABUN
				AND #{ymd} BETWEEN T.WEEK_SDATE AND T.WEEK_EDATE
			WHERE R.TENANT_ID = #{tenantId} 
				AND R.ENTER_CD = #{enterCd}
				AND R.YMD BETWEEN T.WEEK_SDATE AND T.WEEK_EDATE
				AND R.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT','NIGHT', 'REGA')
				GROUP BY R.TENANT_ID, R.ENTER_CD, R.SABUN) X
			WHERE X.WORK_MINUTE <= #{stdOtTime} AND WORK_MINUTE > #{stdOtTime2}
		]]>
	</select>
		
	<select id="getIntfCompList" parameterType="map" resultType="hashmap">
		<![CDATA[
			SELECT ENTER_CD AS CompanySeq, 
			  	YM as WkYM, 
			  	SABUN as EmpID, 
			  	SUM(ALLOW_MINUTE) AS DTCnt, 
			  	MAX(UPDATE_DATE) AS UPDATE_DATE
			  FROM (SELECT ENTER_CD
			      , F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(F_WTM_TO_DATE(EYMD, 'YMD'), 1, 'D'), 'YM') AS YM
			      , SABUN
			      , ALLOW_MINUTE
			      , UPDATE_DATE
			     FROM WTM_COMP_CREATE
			    WHERE TENANT_ID = #{tenantId}
			      AND ALLOW_MINUTE > 0
			    AND UPDATE_DATE > F_WTM_TO_DATE(#{lastDate}, 'YMDHIS')
			   ) A
			 GROUP BY ENTER_CD, YM, SABUN		
 		]]>
	</select>

	<select id="getOtList2" parameterType="map" resultType="hashmap">
		<![CDATA[
	    	SELECT CONCAT(X.ENTER_CD, '@', X.SABUN) AS EMP,
	    		CASE WHEN F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD,  X.SABUN) != '' THEN  
    	 			CONCAT(X.ENTER_CD, '@', F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD, X.SABUN)) ELSE '' END AS LEADER,
    	 		X.REST_WORK_MINUTE, 
    	 		X.REST_OT_MINUTE, 
    	 		X.SABUN, 
    	 		X.EMP_NM
	    	FROM (
					SELECT H.TENANT_ID, H.ENTER_CD, H.SABUN, H.EMP_NM 
					  ,	F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'T', 'WORK') AS TOTAL_WORK_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'T', 'OT') AS TOTAL_OT_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'R', 'WORK') AS REST_WORK_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'R', 'OT') AS REST_OT_MINUTE
				FROM WTM_EMP_HIS H 
				JOIN WTM_WORK_CALENDAR C ON H.TENANT_ID=C.TENANT_ID 
						AND H.ENTER_CD=C.ENTER_CD
						AND H.SABUN = C.SABUN AND C.YMD=#{ymd}
				WHERE H.TENANT_ID=#{tenantId}
				AND H.ENTER_CD = #{enterCd}
				AND H.STATUS_CD = 'AA'
				AND H.BUSINESS_PLACE_CD = #{businessPlaceCd}
				AND #{ymd} BETWEEN H.SYMD AND H.EYMD
			) X 
			]]>
			<if test="stdType.equals('R_OT')">
				<![CDATA[
					WHERE (X.REST_OT_MINUTE < #{stdOtTime} AND X.REST_OT_MINUTE >= #{stdOtTime2})
				]]>
			</if>
			<if test="stdType.equals('R_WORK')">
				<![CDATA[
					WHERE (X.REST_WORK_MINUTE < #{stdOtTime} AND X.REST_WORK_MINUTE >= #{stdOtTime2})
				]]>
			</if>
			<if test="stdType.equals('R_TOT')">
				<![CDATA[
					WHERE ((X.REST_WORK_MINUTE +X.REST_OT_MINUTE) < #{stdOtTime} AND (X.REST_WORK_MINUTE +X.REST_OT_MINUTE) >= #{stdOtTime2})
				]]>
			</if>
	</select>
</mapper>