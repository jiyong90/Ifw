<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmScheduleMapper">
    
    <select id="getWtmCloseDay" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT AA.ENTER_CD AS enterCd, AA.SABUN AS sabun, AA.YMD AS ymd
			  FROM (SELECT A.ENTER_CD, A.SABUN, A.YMD, MIN(F_WTM_DATE_FORMAT(B.PLAN_SDATE, 'YMD')) AS SDATE, MAX(F_WTM_DATE_FORMAT(B.PLAN_EDATE, 'YMD')) AS EDATE
			        FROM WTM_WORK_CALENDAR A
			       INNER JOIN WTM_WORK_DAY_RESULT B
			           ON A.TENANT_ID = B.TENANT_ID
			          AND A.ENTER_CD = B.ENTER_CD
			          AND A.SABUN = B.SABUN
			          AND A.YMD = B.YMD
			       WHERE B.TIME_TYPE_CD IN ('BASE', 'REGA', 'OT', 'FIXOT', 'NIGHT')	-- 간주근무나 기본근무일때)
			          AND A.TENANT_ID = #{tenantId}
			          AND A.YMD = #{ymd}
			       GROUP BY A.ENTER_CD, A.SABUN, A.YMD
			       ) AA
			 WHERE ((#{closeType} = 'A' AND AA.SDATE = AA.EDATE)
			     OR (#{closeType} = 'B' AND AA.SDATE != AA.EDATE))
			UNION
			SELECT A.ENTER_CD, A.SABUN, A.YMD
			  FROM WTM_WORK_CALENDAR A
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT B
			     ON A.TENANT_ID = B.TENANT_ID
			    AND A.ENTER_CD = B.ENTER_CD
			    AND A.SABUN = B.SABUN
			    AND A.YMD = B.YMD
			    AND A.ENTRY_SDATE <= B.PLAN_EDATE
			    AND A.ENTRY_EDATE >= B.PLAN_SDATE
			 WHERE A.TENANT_ID = #{tenantId}
			    AND A.YMD < #{ymd}
			    AND A.HOLIDAY_YN = 'N'
			    AND B.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')
			    AND A.ENTRY_SDATE IS NOT NULL AND A.ENTRY_EDATE IS NOT NULL
				 AND B.APPR_SDATE IS NULL AND B.APPR_EDATE IS NULL
			 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
			 UNION
			SELECT A.ENTER_CD, A.SABUN, A.YMD
			  FROM WTM_WORK_CALENDAR A
			  JOIN WTM_WORK_DAY_RESULT B
			     ON A.TENANT_ID = B.TENANT_ID
			    AND A.ENTER_CD = B.ENTER_CD
			    AND A.SABUN = B.SABUN
			    AND A.YMD = B.YMD
			    AND A.ENTRY_SDATE <= B.PLAN_EDATE
			    AND A.ENTRY_EDATE >= B.PLAN_SDATE
			 WHERE A.TENANT_ID = #{tenantId}
			    AND A.YMD < #{ymd}
			    AND A.HOLIDAY_YN = 'Y'
			    AND B.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')
			    AND A.ENTRY_SDATE IS NOT NULL AND A.ENTRY_EDATE IS NOT NULL
				 AND B.PLAN_SDATE IS NOT NULL AND B.PLAN_EDATE IS NOT NULL 
				 AND B.APPR_SDATE IS NULL AND B.APPR_EDATE IS NULL
			 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
			ORDER BY YMD, SABUN
        ]]>
    </select>

	<select id="getOtList" parameterType="map" resultType="hashmap">
		<![CDATA[
	    	SELECT CONCAT(X.ENTER_CD, '@', X.SABUN) AS EMP,
				CASE WHEN F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD,  X.SABUN) != '' THEN  
    	 			 CONCAT(X.ENTER_CD, '@', F_WTM_GET_LEADER_SABUN(X.TENANT_ID, X.ENTER_CD, X.SABUN)) 
    	 			 ELSE CONCAT(X.ENTER_CD, '@', O.SABUN) END AS LEADER,    	 		
    	 		X.REST_WORK_MINUTE, 
    	 		X.REST_OT_MINUTE, 
    	 		X.SABUN, 
    	 		X.EMP_NM
	    	FROM (
					SELECT H.TENANT_ID, H.ENTER_CD, H.SABUN, H.EMP_NM, H.ORG_CD
					  ,	F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'T', 'WORK') AS TOTAL_WORK_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'T', 'OT') AS TOTAL_OT_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'R', 'WORK') AS REST_WORK_MINUTE
					  , F_WTM_GET_WORK_MINUTE(H.TENANT_ID, H.ENTER_CD, H.SABUN, #{ymd}, 'R', 'OT') AS REST_OT_MINUTE
				FROM WTM_EMP_HIS H 
				JOIN WTM_WORK_CALENDAR C ON H.TENANT_ID=C.TENANT_ID 
						AND H.ENTER_CD=C.ENTER_CD
						AND H.SABUN = C.SABUN AND C.YMD=#{ymd}
				WHERE H.TENANT_ID=#{tenantId}
				AND H.ENTER_CD = #{enterCd}
				AND H.STATUS_CD = 'AA'
				AND H.BUSINESS_PLACE_CD = #{businessPlaceCd}
				AND H.SYMD < #{ymd} 
				AND H.EYMD >= #{ymd}
			) X LEFT JOIN WTM_ORG_CONC O ON 
				O.TENANT_ID = X.TENANT_ID 
				AND O.ENTER_CD = X.ENTER_CD 
				AND O.ORG_CD = X.ORG_CD 
				AND O.SYMD < #{ymd}  AND O.EYMD >= #{ymd} 
			]]>
			<if test="stdType.equals('R_OT')">
				<![CDATA[
					WHERE X.REST_OT_MINUTE <= #{stdOtTime}
				]]>
			</if>
			<if test="stdType.equals('R_WORK')">
				<![CDATA[
					WHERE X.REST_WORK_MINUTE <= #{stdOtTime}
				]]>
			</if>
	</select>
	
	<select id="getInoutCheckList" parameterType="map" resultType="hashmap">
		<![CDATA[
				SELECT CONCAT(X.ENTER_CD, '@', X.SABUN) AS EMP_KEY
				FROM (
				SELECT MIN(W.PLAN_SDATE) AS PLAN_SDATE
					, MAX(W.PLAN_EDATE) AS PLAN_EDATE
					, C.ENTRY_SDATE
					, C.ENTRY_EDATE
					, C.ENTER_CD
					, C.SABUN
					FROM WTM_WORK_DAY_RESULT W 
					JOIN WTM_EMP_HIS E
						ON E.TENANT_ID = W.TENANT_ID
						AND E.ENTER_CD = W.ENTER_CD
						AND E.SABUN = W.SABUN
						AND E.BUSINESS_PLACE_CD = #{businessPlaceCd}
					JOIN WTM_WORK_CALENDAR C 
						ON W.TENANT_ID=C.TENANT_ID 
							AND W.ENTER_CD=C.ENTER_CD
							AND W.SABUN = C.SABUN
						    AND W.YMD = C.YMD 
					WHERE W.YMD=DATE_FORMAT(now(), '%Y%m%d')
						AND W.ENTER_CD=#{enterCd}
				GROUP BY W.TENANT_ID, W.ENTER_CD, W.SABUN, W.YMD) X
				WHERE 
					(#{stdType} = 'B_IN' AND DATE_FORMAT(now(), '%Y%m%d%H%i') = DATE_FORMAT(DATE_SUB(X.PLAN_SDATE, INTERVAL #{stdMinute} MINUTE), '%Y%m%d%H%i') AND X.ENTRY_SDATE IS NULL)
					OR 
					(#{stdType} = 'A_OUT' AND DATE_FORMAT(now(), '%Y%m%d%H%i') = DATE_FORMAT(DATE_ADD(X.PLAN_EDATE, INTERVAL #{stdMinute} MINUTE), '%Y%m%d%H%i') AND X.ENTRY_EDATE IS NULL)
		]]>
	</select>
</mapper>