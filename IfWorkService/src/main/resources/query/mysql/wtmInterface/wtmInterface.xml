<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmInterfaceMapper">

	<select id="getIfLastDate" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT F_WTM_DATE_FORMAT(MAX(UPDATE_DATE), 'YMDHIS') AS lastDate
			  FROM WTM_IF_HIS
			 WHERE TENANT_ID = #{tenantId}
			   AND IF_ITEM = #{ifType}
			   AND IF_STATUS = 'OK'
        ]]>
    </select>
    <select id="getIfNowDate" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT F_WTM_DATE_FORMAT(NOW(), 'YMDHIS') AS ifDate
			  FROM DUAL
        ]]>
    </select>
    
    <select id="getIfUrl" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT info_data as infoData
			  FROM comm_management_infomation
			 WHERE tenant_id = #{tenantId}
			   AND info_key = 'HR.IT_URL'
        ]]>
    </select>
    
	<insert id="insertIfHis" parameterType="hashmap">
		INSERT INTO WTM_IF_HIS
		(
			  TENANT_ID
			, IF_STATUS
			, IF_ITEM 
			, IF_SEARCH_DATE 
			, IF_MSG 
			, UPDATE_DATE
		) VALUES (
			  #{tenantId}
			, #{ifStatus}
			, #{ifItem}
			, F_WTM_TO_DATE(#{ifEndDate}, 'YMDHIS')
			, #{ifMsg}
			, F_WTM_TO_DATE(#{updateDate}, 'YMDHIS')
		)
	</insert>
	
	<select id="getWtmCodeId" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT CODE_ID as codeId
			  FROM WTM_CODE
			 WHERE TENANT_ID = #{tenantId}
			   AND ENTER_CD = #{enterCd}
			   AND GRP_CODE_CD = #{grpCodeCd}
			   AND CODE_CD = #{codeCd}
			   AND CODE_NM = #{codeNm}
			   AND SYMD = #{symd}
        ]]>
    </select>
    
    <insert id="insertWtmCode" parameterType="hashmap">
			INSERT INTO WTM_CODE
			(
				  TENANT_ID
				, ENTER_CD 
				, GRP_CODE_CD 
				, CODE_CD 
				, CODE_NM 
				, SYMD 
				, EYMD 
				, SEQ
				, NOTE
				, UPDATE_DATE
				, UPDATE_ID
			) VALUES 
			<foreach collection="list" item="item" separator=", ">
			(     #{item.tenantId}
	        	, #{item.enterCd}
	        	, #{item.grpCodeCd}
	        	, #{item.codeCd}
	        	, #{item.codeNm}
	        	, #{item.symd}
	        	, #{item.eymd}
	        	, #{item.seq}
	        	, #{item.note}
	        	, NOW()
	        	, '0'
	        )
			</foreach>
	</insert>
	
	<update id="updateWtmCode" parameterType="hashmap">
		UPDATE WTM_CODE SET
		    NOTE = CASE
		    <foreach collection="list" item="item" separator="">
		        when CODE_ID = #{item.codeId} then #{item.note}
		    </foreach>
    		END
		  , UPDATE_DATE = NOW()
		  , UPDATE_ID = '0'
		WHERE CODE_ID IN
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			#{item.codeId}
		</foreach>
	</update>
	
	<update id="updateWtmCodeHisEymd" parameterType="hashmap">
		<![CDATA[
			UPDATE WTM_CODE
			   SET EYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(DATE_ADD(F_WTM_TO_DATE(#{symd}, 'YMD'), INTERVAL -1 DAY), 'YMD'), '29991231')
			  , UPDATE_DATE = NOW()
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND GRP_CODE_CD = #{grpCodeCd}
			  AND CODE_CD = #{codeCd}
			  AND #{symd} > SYMD
		]]>
	</update>
	
	<update id="updateWtmCodeHisSymd" parameterType="hashmap" >
        <![CDATA[
			UPDATE WTM_CODE
			   SET SYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(DATE_ADD(F_WTM_TO_DATE(#{eymd}, 'YMD'), INTERVAL -1 DAY), 'YMD'), '29991231')
			  , UPDATE_DATE = NOW()
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND GRP_CODE_CD = #{grpCodeCd}
			  AND CODE_CD = #{codeCd}
			  AND #{symd} < SYMD
        ]]>
    </update>
    
    <insert id="insertWtmHoliday" parameterType="java.util.HashMap" >
        INSERT INTO WTM_HOLIDAY_MGR (
        	  TENANT_ID
        	, ENTER_CD
        	, BISINESS_PLACE_CD
        	, HOLIDAY_YMD
        	, HOLIDAY_NM
        	, SUN_YN
        	, FESTIVE_YN
        	, PAY_YN
        	, NOTE
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES 
       <foreach collection="list" item="item" separator=", ">
		(     #{item.tenantId}
        	, #{item.enterCd}
        	, #{item.locationCd}
        	, #{item.holidayYmd}
        	, #{item.holidayNm}
        	, #{item.sunYn}
        	, #{item.festiveYn}
        	, #{item.payYn}
        	, #{item.note}
        	, NOW()
        	, '0'
        )
		</foreach>
        ON DUPLICATE KEY UPDATE
              HOLIDAY_NM = VALUES(HOLIDAY_NM)
            , SUN_YN = VALUES(SUN_YN)
            , FESTIVE_YN = VALUES(FESTIVE_YN)
            , PAY_YN = VALUES(PAY_YN)
            , NOTE = VALUES(NOTE)
            , UPDATE_DATE = NOW()
            , UPDATE_ID = '0'
    </insert>
    
    <select id="getWtmTaaCodeId" parameterType="map" resultType="hashmap">
		SELECT TAA_CODE_ID as taaCodeId
		  FROM WTM_TAA_CODE
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND TAA_CD = #{taaCd}
    </select>
    
    <insert id="insertTaaCode" parameterType="hashmap">
		INSERT INTO WTM_TAA_CODE
		(
			  TENANT_ID
			, ENTER_CD 
			, TAA_CD 
			, TAA_NM 
			, TAA_TYPE_CD 
			, HOL_INCL_YN 
			, REQUEST_TYPE_CD 
			, WORK_YN
			, PAY_YN
			, NOTE
			, UPDATE_DATE
			, UPDATE_ID
		) VALUES 
		<foreach collection="list" item="item" separator=", ">
			(
			  #{item.tenantId}
			, #{item.enterCd}
			, #{item.taaCd}
			, #{item.taaNm}
			, #{item.taaTypeCd}
			, #{item.holInclYn}
			, #{item.requestTypeCd}
			, #{item.workYn}
			, #{item.payYn}
			, #{item.note}
			, NOW()
			, '0'
			)
		</foreach>
	</insert>
	
	<update id="updateTaaCode" parameterType="hashmap">
		UPDATE WTM_TAA_CODE SET
		    TAA_NM = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.taaNm}
		    </foreach> END
		  , TAA_TYPE_CD = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.taaTypeCd}
		    </foreach> END
		  , HOL_INCL_YN = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.holInclYn}
		    </foreach> END
		  , REQUEST_TYPE_CD = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.requestTypeCd}
		    </foreach> END
		  , WORK_YN = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.workYn}
		    </foreach> END
		  , PAY_YN = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.payYn}
		    </foreach> END
		  , NOTE = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.note}
		    </foreach> END
		  , UPDATE_DATE = NOW()
		  , UPDATE_ID = '0'
		WHERE TAA_CODE_ID IN 
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			#{item.taaCodeId}
		</foreach>
	</update>
	
	<insert id="insertWtmOrgCode" parameterType="java.util.HashMap" >
        INSERT INTO WTM_ORG_CODE (
        	  TENANT_ID
        	, ENTER_CD
        	, ORG_CD
        	, SYMD
        	, ORG_NM
        	, EYMD
        	, ORG_TYPE
        	, NOTE
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES 
       <foreach collection="list" item="item" separator=", ">
		(     #{item.tenantId}
        	, #{item.enterCd}
        	, #{item.orgCd}
        	, #{item.symd}
        	, #{item.orgNm}
        	, #{item.eymd}
        	, #{item.orgType}
        	, #{item.note}
        	, NOW()
        	, '0'
        )
		</foreach>
        ON DUPLICATE KEY UPDATE
              ORG_NM = VALUES(ORG_NM)
            , ORG_TYPE = VALUES(ORG_TYPE)
            , EYMD = VALUES(EYMD)
            , NOTE = VALUES(NOTE)
            , UPDATE_DATE = NOW()
            , UPDATE_ID = '0'
    </insert>
    
    <update id="updateWtmOrgCodeHisEymd" parameterType="hashmap">
		<![CDATA[
			UPDATE WTM_ORG_CODE
			   SET EYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(DATE_ADD(F_WTM_TO_DATE(#{symd}, 'YMD'), INTERVAL -1 DAY), 'YMD'), '29991231')
			  , UPDATE_DATE = NOW()
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND ORG_CD = #{orgCd}
			  AND #{symd} > SYMD
		]]>
	</update>
	
	<update id="updateWtmOrgCodeHisSymd" parameterType="hashmap" >
        <![CDATA[
			UPDATE WTM_ORG_CODE
			   SET SYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(DATE_ADD(F_WTM_TO_DATE(#{eymd}, 'YMD'), INTERVAL -1 DAY), 'YMD'), '29991231')
			  , UPDATE_DATE = NOW()
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND ORG_CD = #{orgCd}
			  AND #{symd} < SYMD
        ]]>
    </update>
    
    <select id="getWtmOgrChartId" parameterType="map" resultType="hashmap">
		SELECT ORG_CHART_ID as orgChartId
		  FROM WTM_ORG_CHART
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SYMD = #{symd}
    </select>
    
    <insert id="insertWtmOrgChart" parameterType="java.util.HashMap" >
        INSERT INTO WTM_ORG_CHART (
        	  TENANT_ID
        	, ENTER_CD
        	, ORG_CHART_NM
        	, SYMD
        	, EYMD
        	, NOTE
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES 
       
		(     #{tenantId}
        	, #{enterCd}
        	, #{orgChartNm}
        	, #{symd}
        	, #{eymd}
        	, #{note}
        	, NOW()
        	, '0'
        )
    </insert>
    
    <update id="updateWtmOrgChart" parameterType="hashmap">
		UPDATE WTM_ORG_CHART SET
		    ORG_CHART_NM = #{orgChartNm}
		  , EYMD = #{eymd}
		  , NOTE = #{note}
		  , UPDATE_DATE = NOW()
		  , UPDATE_ID = '0'
		WHERE ORG_CHART_ID = #{orgChartId}
	</update>
	
    <insert id="insertWtmOrgChartDet" parameterType="java.util.HashMap" >
        INSERT INTO WTM_ORG_CHART_DET (
        	  ORG_CHART_ID
        	, ORG_CD
        	, PRIOR_ORG_CD
        	, SEQ
        	, ORG_LEVEL
        	, ORDER_SEQ
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES 
       <foreach collection="list" item="item" separator=", ">
		(     #{item.orgChartId}
        	, #{item.orgCd}
        	, #{item.priorOrgCd}
        	, #{item.seq}
        	, #{item.orgLevel}
        	, #{item.orderSeq}
        	, NOW()
        	, '0'
        )
		</foreach>
        ON DUPLICATE KEY UPDATE
              PRIOR_ORG_CD = VALUES(PRIOR_ORG_CD)
            , SEQ = VALUES(SEQ)
            , ORG_LEVEL = VALUES(ORG_LEVEL)
            , ORDER_SEQ = VALUES(ORDER_SEQ)
            , UPDATE_DATE = NOW()
            , UPDATE_ID = '0'
    </insert>
	
	<insert id="insertEmpHisTemp" parameterType="hashmap">
		INSERT INTO WTM_IF_EMP_TEMP
		(
			  TENANT_ID
			, ENTER_CD
			, SABUN
			, EMP_NM
			, EMP_ENG_NM
			, SYMD
			, EYMD
			, STATUS_CD
			, ORG_CD
			, BUSINESS_PLACE_CD
			, DUTY_CD
			, POS_CD
			, CLASS_CD
			, JOB_GROUP_CD
			, JOB_CD
			, PAY_TYPE_CD
			, LEADER_YN
			, NOTE
		) VALUES 
		<foreach collection="list" item="item" separator=", ">
			(
			  #{item.tenantId}
			, #{item.enterCd}
			, #{item.sabun}
			, #{item.empNm}
			, #{item.empEngNm}
			, #{item.symd}
			, #{item.eymd}
			, #{item.statusCd}
			, #{item.orgCd}
			, #{item.businessPlaceCd}
			, #{item.dutyCd}
			, #{item.posCd}
			, #{item.classCd}
			, #{item.jobGroupCd}
			, #{item.jobCd}
			, #{item.payTypeCd}
			, #{item.leaderYn}
			, #{item.note}
			)
		</foreach>
	</insert>
	
	<select id="setEmpHis" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_IF_EMP_HIS( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{nowDataTime, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}) }
  	</select>
  	
  	<select id="getEmpBaseList" parameterType="map" resultType="hashmap">
  	<![CDATA[
		SELECT A.TENANT_ID AS tenantId 
			 , A.ENTER_CD as enterCd 
			 , A.SABUN as sabun
			 , GREATEST(A.SYMD, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(NOW(), -1, 'M'), 'YMD')) AS symd
			 , LEAST(A.EYMD, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(NOW(), 1, 'M'), 'YMD')) AS eymd
			 , '0' as userId
		  FROM WTM_EMP_HIS A
		 INNER JOIN WTM_IF_EMP_MSG B
			 ON A.TENANT_ID = B.TENANT_ID
			AND A.ENTER_CD = B.ENTER_CD
			AND A.SABUN = B.SABUN
			AND A.EYMD = '29991231'
			AND A.STATUS_CD LIKE 'A%'
		 WHERE B.TENANT_ID = #{tenantId}
		   AND F_WTM_DATE_FORMAT(B.UPDATE_DATE, 'YMDHIS') > #{ifEndDate}
		   AND B.CHG_TYPE_CD = 'BUSINESS_PLACE_CD'
		   AND B.NEW_VALUE IS NOT NULL
		 UNION
		 SELECT A.TENANT_ID  AS tenantId 
		 	   , A.ENTER_CD as enterCd 
		 	   , A.SABUN as sabun
		 	   , GREATEST(A.SYMD, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(NOW(), -1, 'M'), 'YMD')) AS symd
		 	   , LEAST(A.EYMD, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(NOW(), 1, 'M'), 'YMD')) AS eymd
		 	   , '0' as userId
		  FROM WTM_EMP_HIS A
		 INNER JOIN WTM_IF_EMP_MSG B
			 ON A.TENANT_ID = B.TENANT_ID
			AND A.ENTER_CD = B.ENTER_CD
			AND A.SABUN = B.SABUN
			AND A.EYMD = '29991231'
			AND A.STATUS_CD LIKE 'A%'
		 WHERE B.TENANT_ID = #{tenantId}
		   AND F_WTM_DATE_FORMAT(B.UPDATE_DATE, 'YMDHIS') > #{ifEndDate}
		   AND B.CHG_TYPE_CD = 'STATUS_CD'
		   AND B.OLD_VALUE NOT LIKE 'A%'
		 ORDER BY enterCd, sabun
    ]]>
    </select>
    
    <select id="getEmpBaseEtcList" parameterType="map" resultType="hashmap">
  	<![CDATA[
SELECT 21 AS tenantId
		  , 'SAMHWACROWN' AS enterCd
		  , SABUN AS sabun
		  , SYMD AS symd
		  , EYMD AS eymd
		  , 'HJ' as userId
  FROM WTM_WORKTEAM_EMP
 WHERE WORKTEAM_MGR_ID IN (8,9)
    ]]>
    </select>
        
    <select id="getOrgConcChk" parameterType="map" resultType="hashmap">
  	<![CDATA[
		SELECT A.LEADER_CNT as leaderCnt, B.CONC_CNT as concCnt, C.CONC_CNT as concEndCnt
		  FROM (SELECT COUNT(*) AS LEADER_CNT
							  FROM WTM_EMP_HIS
							 WHERE TENANT_ID = #{tenantId}
							   AND ENTER_CD = #{enterCd}
							   AND ORG_CD = #{orgCd}
							   AND SABUN = #{sabun}
							   AND LEADER_YN = 'Y'
							   AND EYMD = #{eymd}) A
		 INNER JOIN (SELECT COUNT(*) AS CONC_CNT
					  FROM WTM_ORG_CONC
					 WHERE TENANT_ID = #{tenantId}
					   AND ENTER_CD = #{enterCd}
					   AND ORG_CD = #{orgCd}
					   AND SABUN = #{sabun}
					   AND SYMD = #{symd}
					   AND EYMD = #{eymd}) B
		INNER JOIN (SELECT COUNT(*) AS CONC_CNT
					  FROM WTM_ORG_CONC
					 WHERE TENANT_ID = #{tenantId}
					   AND ENTER_CD = #{enterCd}
					   AND ORG_CD = #{orgCd}
					   AND SABUN = #{sabun}
					   AND SYMD = #{symd}
					   AND EYMD <> #{eymd}) C
		    ON 1=1
    ]]>
    </select>
    
    <insert id="insertWtmEmpAddr" parameterType="java.util.HashMap" >
        INSERT INTO WTM_EMP_ADDR (
        	  TENANT_ID
        	, ENTER_CD
        	, SABUN
        	, EMAIL
        	, HAND_PHONE
        	, NOTE
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES 
       <foreach collection="list" item="item" separator=", ">
		(     #{item.tenantId}
        	, #{item.enterCd}
        	, #{item.sabun}
        	, #{item.email}
        	, #{item.handPhone}
        	, #{item.note}
        	, NOW()
        	, '0'
        )
		</foreach>
        ON DUPLICATE KEY UPDATE
              EMAIL = VALUES(EMAIL)
            , HAND_PHONE = VALUES(HAND_PHONE)
            , NOTE = VALUES(NOTE)
            , UPDATE_DATE = NOW()
            , UPDATE_ID = '0'
    </insert>
    
    <insert id="insertOrgConc" parameterType="java.util.HashMap" >
        INSERT INTO WTM_ORG_CONC (
        	  TENANT_ID
        	, ENTER_CD
        	, ORG_CD
        	, SABUN
        	, SYMD
        	, EYMD
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES (     
              #{tenantId}
        	, #{enterCd}
        	, #{orgCd}
        	, #{sabun}
        	, #{symd}
        	, #{eymd}
        	, NOW()
        	, '0'
        )
    </insert>
    
    <update id="updateOrgConcEnd" parameterType="java.util.HashMap" >
        UPDATE WTM_ORG_CONC SET
        	  EYMD = #{eymd}
        	, UPDATE_DATE = NOW()
        	, UPDATE_ID = '0'
         WHERE TENANT_ID = #{tenantId}
           AND ENTER_CD = #{enterCd}
           AND ORG_CD = #{orgCd}
           AND SABUN = #{sabun}
           AND SYMD = #{symd}
    </update>
    
    <select id="setTaaApplIf" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_IF_TAA_APPL( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{taaCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ifApplNo, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{status, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaApplId,jdbcType=BIGINT, javaType=java.lang.Long, mode=OUT}
  			  , #{applId,jdbcType=BIGINT, javaType=java.lang.Long, mode=OUT}
  			  , #{oldStatus,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	<select id="setTaaApplDayIf" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_IF_TAA_APPL_DAY2( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{taaCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ymd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{taaApplId,jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{applId,jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{status,jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{oldStatus,jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{timeTypeCd,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaSetYn,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaSdate,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaEdate,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	
  	<select id="getTaaApplList"  parameterType="map" resultType="hashmap">
        <![CDATA[
SELECT A.TENANT_ID AS tenantId
     , A.ENTER_CD AS enterCd
	  , A.SABUN AS sabun
	  , A.TAA_CD AS taaCd
	  , A.SYMD AS sYmd
	  , A.EYMD AS eYmd
	  , A.SHM AS sHm
	  , A.EHM AS eHm
	  , A.TAA_APPL_ID AS taaApplId
	  , A.APPL_ID AS applId
	  , B.APPL_STATUS_CD AS status 
	  , '' AS oldStatus
  FROM WTM_TAA_APPL A
 INNER JOIN WTM_APPL B
    ON A.APPL_ID = B.APPL_ID
 WHERE A.TENANT_ID =  #{tenantId}
 AND A.ENTER_CD = #{enterCd}
 AND A.APPL_ID = 33772
 AND APPL_STATUS_CD = '99'
        ]]>
    </select>
  	
  	<select id="getWtmTaaApplId" parameterType="map" resultType="hashmap">
		SELECT TAA_APPL_ID as taaApplId
		  FROM WTM_TAA_APPL
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND IF_APPL_NO = #{ifApplNo}
	</select>
	
	<select id="setWorkTimeCloseIf" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_CLOSE_WORKTIME( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ym, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	<select id="getCloseEmp" parameterType="map" resultType="hashmap">
       	SELECT DISTINCT A.SABUN AS sabun
		  FROM WTM_WORK_CALENDAR A
		 INNER JOIN WTM_FLEXIBLE_EMP B
		    ON A.TENANT_ID = B.TENANT_ID
		   AND A.ENTER_CD = B.ENTER_CD
		   AND A.SABUN = B.SABUN
		   AND A.YMD BETWEEN B.SYMD AND B.EYMD
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.YMD BETWEEN #{sYmd} AND #{eYmd}
	<if test="sabun!=null and !sabun.equals('')">
		   AND A.SABUN = #{sabun}
	</if>
		 ORDER BY A.SABUN
  	</select>
  	
  	<select id="setCloseDay" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_CLOSE_DAY( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{worktimeCloseId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{ymd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	<select id="setCloseMonth" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_CLOSE_MONTH( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{worktimeCloseId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{sYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	<select id="getExceptRuleId" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT info_data
			  FROM comm_management_infomation
			 WHERE tenant_id = #{tenantId}
			   AND info_key = 'HR.IT_URL'
        ]]>
    </select>
    
    <select id="setCalcDay" parameterType="Long" resultType="hashmap">
        <![CDATA[
SELECT DISTINCT A.TENANT_ID AS tenantId
	, A.ENTER_CD AS enterCd
	, A.SABUN AS sabun
	  , A.YMD AS ymd
	  , 0 AS gooutCnt		
  FROM WTM_WORK_CALENDAR A
 WHERE A.TENANT_ID = 10
   AND A.ENTER_CD = 'LSG'
   AND A.YMD IN ('20200106', '20200203', '20200302')
  ORDER BY A.YMD, A.SABUN
        ]]>
    </select>
    
    <select id="setCalcDayParam"  parameterType="map" resultType="hashmap">
        <![CDATA[
SELECT A.ENTER_CD AS enterCd
	  , A.SABUN AS sabun
	  , A.YMD AS ymd
	  , COUNT(B.SABUN) AS gooutCnt				  
	  , C.FLEXIBLE_EMP_ID AS flexibleEmpId
			  FROM WTM_WORK_CALENDAR A
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT B
			    ON A.TENANT_ID = B.TENANT_ID
			   AND A.ENTER_CD = B.ENTER_CD
			   AND A.SABUN = B.SABUN
			   AND A.YMD = B.YMD
			   AND B.TIME_TYPE_CD = 'GOBACK'
			 INNER JOIN WTM_FLEXIBLE_EMP C
			    ON A.TENANT_ID = C.TENANT_ID
			   AND A.ENTER_CD = C.ENTER_CD
			   AND A.SABUN = C.SABUN
			   AND A.YMD BETWEEN C.SYMD AND C.EYMD
WHERE A.TENANT_ID = #{tenantId}
  AND A.ENTER_CD = #{enterCd}
  AND A.SABUN = #{sabun}
  AND A.YMD  BETWEEN #{sYmd} AND #{eYmd}
 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
 ORDER BY A.SABUN, A.YMD
        ]]>
    </select>
    
    <select id="getCalcDayLoopEmp" parameterType="Long" resultType="hashmap">
        <![CDATA[
 SELECT A.ENTER_CD AS enterCd
	  , A.SABUN AS sabun
	  , A.SYMD AS sYmd
	  , A.EYMD AS eYmd
			  FROM WTM_FLEXIBLE_EMP A
WHERE A.TENANT_ID = #{tenantId}
  AND A.SYMD = '20191230'
--  AND A.SABUN = '329409'
  AND A.SABUN = '20050818001'
 ORDER BY A.SABUN
        ]]>
    </select>
    
    <update id="deleteCalcDayLoop" parameterType="hashmap">
    	<![CDATA[
    		DELETE
  FROM WTM_WORK_DAY_RESULT
 WHERE TENANT_ID = #{tenantId}
   AND ENTER_CD = #{enterCd}
   AND YMD BETWEEN #{sYmd} AND #{eYmd}
   AND SABUN = #{sabun}
   AND TIME_TYPE_CD NOT IN ('REGA', 'TAA', 'GOBACK', 'OT', 'NIGHT', 'SUBS')
    	]]>
    </update>
    
    <select id="setCalcDayLoop"  parameterType="map" resultType="hashmap">
        <![CDATA[
SELECT A.ENTER_CD AS enterCd
	  , A.SABUN AS sabun
	  , A.YMD AS ymd
	  , COUNT(B.SABUN) AS gooutCnt				  
	  , C.FLEXIBLE_EMP_ID AS flexibleEmpId
			  FROM WTM_WORK_CALENDAR A
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT B
			    ON A.TENANT_ID = B.TENANT_ID
			   AND A.ENTER_CD = B.ENTER_CD
			   AND A.SABUN = B.SABUN
			   AND A.YMD = B.YMD
			   AND B.TIME_TYPE_CD = 'GOBACK'
			 INNER JOIN WTM_FLEXIBLE_EMP C
			    ON A.TENANT_ID = C.TENANT_ID
			   AND A.ENTER_CD = C.ENTER_CD
			   AND A.SABUN = C.SABUN
			   AND A.YMD BETWEEN C.SYMD AND C.EYMD
WHERE A.TENANT_ID = #{tenantId}
  AND A.ENTER_CD = 'BRS'
  AND A.SABUN NOT IN ('20050818001', '329409')
  AND A.YMD  BETWEEN '20191230' AND '20200126'
 GROUP BY A.ENTER_CD, A.SABUN, A.YMD
 ORDER BY A.YMD, A.SABUN
        ]]>
    </select>
    
    <select id="setCalcDayResult"  parameterType="map" resultType="hashmap">
        <![CDATA[
SELECT ENTER_CD AS enterCd
	  , SABUN AS sabun
	  , YMD AS ymd
	  , TIME_TYPE_CD AS timeTypeCd
	  , F_WTM_DATE_FORMAT(PLAN_SDATE, 'YMDHIS') AS planSdate
	  , F_WTM_DATE_FORMAT(PLAN_EDATE, 'YMDHIS') AS planEdate
	  , (SELECT TIME_CD_MGR_ID FROM WTM_WORK_CALENDAR B 
	      WHERE A.TENANT_ID = B.TENANT_ID
			  AND A.ENTER_CD = B.ENTER_CD
			  AND A.SABUN = B.SABUN
			  AND A.YMD = B.YMD) AS timeCdMgrId
	  , WORK_DAY_RESULT_ID AS workDayResultId
  FROM WTM_WORK_DAY_RESULT A
 WHERE TENANT_ID = #{tenantId}
   AND ENTER_CD = #{enterCd}
   AND SABUN = #{sabun}
	AND YMD = #{ymd} 
	AND TIME_TYPE_CD = 'GOBACK'
 ORDER BY PLAN_SDATE
        ]]>
    </select>
    
    <insert id="insertDayResult" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, TIME_TYPE_CD, PLAN_SDATE, PLAN_EDATE, PLAN_MINUTE, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, 'BASE', C.ENTRY_SDATE, C.ENTRY_EDATE, #{planMinute}, now(), '1'
				  FROM WTM_WORK_CALENDAR C
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD = #{ymd} 
				   AND C.SABUN = #{sabun}
    	]]>
    </insert>
    <insert id="updateDayResult" parameterType="map">
    	<![CDATA[
    		UPDATE WTM_WORK_DAY_RESULT SET 
				PLAN_MINUTE = ${planMinute}
				 WHERE TENANT_ID = #{tenantId}
				   AND ENTER_CD = #{enterCd}
				   AND YMD = #{ymd} 
				   AND SABUN = #{sabun}
				   AND TIME_TYPE_CD = 'BASE'
    	]]>
    </insert>
    <insert id="updateDayResult2" parameterType="map">
    	<![CDATA[
    		UPDATE WTM_WORK_DAY_RESULT SET 
				PLAN_MINUTE = ${planMinute}
		    WHERE WORK_DAY_RESULT_ID = ${workDayResultId}
    	]]>
    </insert>
    
        <select id="getWtmCloseDay" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT AA.ENTER_CD AS enterCd, AA.SABUN AS sabun, AA.YMD AS ymd
              FROM (SELECT A.ENTER_CD, A.SABUN, A.YMD, MIN(F_WTM_DATE_FORMAT(B.PLAN_SDATE, 'YMD')) AS SDATE, MAX(F_WTM_DATE_FORMAT(B.PLAN_EDATE, 'YMD')) AS EDATE
                    FROM WTM_WORK_CALENDAR A
                   INNER JOIN WTM_WORK_DAY_RESULT B
                       ON A.TENANT_ID = B.TENANT_ID
                      AND A.ENTER_CD = B.ENTER_CD
                      AND A.SABUN = B.SABUN
                      AND A.YMD = B.YMD
                   WHERE B.TIME_TYPE_CD IN ('BASE', 'REGA', 'OT', 'FIXOT', 'NIGTH')	-- 간주근무나 기본근무일때)
                      AND A.TENANT_ID = #{tenantId}
                      AND A.YMD = #{ymd}
--                      AND A.SABUN = '327979'
                   GROUP BY A.ENTER_CD, A.SABUN, A.YMD
                   ) AA
             WHERE ((#{closeType} = 'A' AND AA.SDATE = AA.EDATE)
                 OR (#{closeType} = 'B' AND AA.SDATE != AA.EDATE))
ORDER BY YMD, SABUN
        ]]>
    </select>
    
    <select id="getApplId" parameterType="map" resultType="hashmap">
        <![CDATA[
        SELECT APPL_ID as applId, APPL_STATUS_CD as oldApplStatusCd
		  FROM WTM_APPL
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
			AND IF_APPL_NO =#{applNo}
        ]]>
    </select>
    
    <select id="getCloseYnChk" parameterType="map" resultType="hashmap">
        <![CDATA[
        SELECT F_WTM_DATE_DIFF(F_WTM_TO_DATE(#{eymd}, 'YMD'), F_WTM_TO_DATE(#{symd}, 'YMD')) + 1 AS dayCnt
			  , SUM(CLOSE_CNT) AS closeCnt
		  FROM (SELECT CASE F_WTM_NVL(WORK_CLOSE_YN, 'N') WHEN 'Y' THEN 1 ELSE 0 END AS CLOSE_CNT
				  FROM WTM_WORK_CALENDAR
				 WHERE TENANT_ID = #{tenantId}
				   AND ENTER_CD = #{enterCd}
				   AND SABUN = #{sabun}
				   AND YMD BETWEEN #{symd} AND #{eymd}
		) A
        ]]>
    </select>
    
    
    <select id="getTaaList" parameterType="map" resultType="hashmap">
        <![CDATA[
        SELECT A.TENANT_ID AS tenantId
        	 , A.ENTER_CD AS enterCd
        	 , A.SABUN AS sabun
             , B.TAA_CD AS taaCd
             , C.YMD AS ymd
             , B.SHM AS shm
             , B.EHM AS ehm
             , DATE_FORMAT(F_WTM_TO_DATE(CONCAT(C.YMD, B.SHM), 'YMDHIS'), '%Y%m%d%H%i%s') AS taaSdate
			 , CASE WHEN B.SHM > B.EHM THEN DATE_FORMAT(F_WTM_DATE_ADD(F_WTM_TO_DATE(CONCAT(C.YMD, B.EHM), 'YMDHIS'), 1, 'D'), '%Y%m%d%H%i%s')
	         ELSE DATE_FORMAT(F_WTM_TO_DATE(CONCAT(C.YMD, B.EHM), 'YMDHIS'), '%Y%m%d%H%i%s') END AS taaEdate
             , CASE WHEN B.SHM IS NOT NULL AND B.EHM IS NOT NULL 
		 		  THEN timestampdiff(MINUTE, F_WTM_TO_DATE(CONCAT(C.YMD, B.SHM), 'YMDHI'), F_WTM_TO_DATE(CONCAT(C.YMD, B.EHM), 'YMDHI'))
		 		  ELSE 0 END AS workMinute
             , C.TIME_CD_MGR_ID AS timeCdMgrId
             , C.HOLIDAY_YN AS holidayYn
             , F_WTM_NVL(C.WORK_CLOSE_YN, 'N') AS closeYn
		  FROM WTM_TAA_APPL A
		 INNER JOIN WTM_TAA_APPL_DET B
		    ON A.TAA_APPL_ID = B.TAA_APPL_ID
		 INNER JOIN WTM_WORK_CALENDAR C
		    ON A.TENANT_ID = C.TENANT_ID
		   AND A.ENTER_CD = C.ENTER_CD
		   AND A.SABUN = C.SABUN
			AND C.YMD BETWEEN B.SYMD AND B.EYMD
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.APPL_ID = #{applId}
		  ORDER BY A.SABUN, C.YMD
        ]]>
    </select>
    
    <select id="getStdMgrList" parameterType="map" resultType="hashmap">
        <![CDATA[
        SELECT F_WTM_NVL(B.UNPLANNED_YN, 'N') AS unplannedYn
	  		 , DATE_FORMAT(F_WTM_TO_DATE(CONCAT(#{ymd}, D.WORK_SHM), 'YMDHIS'), '%Y%m%d%H%i%s') AS taaSdate
			 , CASE WHEN D.WORK_SHM > D.WORK_EHM THEN DATE_FORMAT(F_WTM_DATE_ADD(F_WTM_TO_DATE(CONCAT(#{ymd}, D.WORK_EHM), 'YMDHIS'), 1, 'D'), '%Y%m%d%H%i%s')
	         ELSE DATE_FORMAT(F_WTM_TO_DATE(CONCAT(#{ymd}, D.WORK_EHM), 'YMDHIS'), '%Y%m%d%H%i%s') END AS taaEdate
		  FROM WTM_FLEXIBLE_EMP A
		 INNER JOIN WTM_FLEXIBLE_STD_MGR B
		    ON A.FLEXIBLE_STD_MGR_ID = B.FLEXIBLE_STD_MGR_ID
		 INNER JOIN WTM_TIME_CD_MGR D
		    ON B.REGARD_TIME_CD_ID = D.TIME_CD_MGR_ID
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.SABUN = #{sabun}
		   AND #{ymd} BETWEEN A.SYMD AND A.EYMD
        ]]>
    </select>
    
    <update id="deleteResult" parameterType="hashmap">
		DELETE FROM WTM_WORK_DAY_RESULT 
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND YMD = #{ymd}
		   AND APPL_ID = #{applId}
		   AND TAA_CD = #{taaCd}
	</update>
	
	<select id="getTaaPlanTimeList" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT CASE REQ_TYPE_CD WHEN 'A' THEN SDATE
									   WHEN 'P' THEN F_WTM_DATE_ADD(EDATE, -4, 'H')
									   ELSE SDATE END AS taaSdate
			  , CASE REQ_TYPE_CD WHEN 'A' THEN F_WTM_DATE_ADD(EDATE, -4, 'H')
									   WHEN 'P' THEN EDATE
									   ELSE EDATE END AS taaEdate
		  FROM (
				SELECT F_WTM_TO_DATE(#{taaSdate}, 'YMDHIS') AS SDATE
				     , F_WTM_TO_DATE(#{taaEdate}, 'YMDHIS') AS EDATE
				     , #{reqTypeCd} AS REQ_TYPE_CD
				  FROM DUAL) A
        ]]>
    </select>
    
    <select id="getCompList" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT A.TENANT_ID AS tenantId
				  , A.ENTER_CD AS enterCd
				  , A.SABUN AS sabun
				  , A.SYMD AS symd
				  , A.EYMD AS eymd
				  , C.INFO_VALUE AS gntCd
				  , TRUNCATE(A.ALLOW_MINUTE/60/8,2) AS compCnt
			  FROM WTM_COMP_CREATE A
			 INNER JOIN WTM_WORKTIME_CLOSE B
			    ON A.TENANT_ID = B.TENANT_ID
			   AND A.ENTER_CD = B.ENTER_CD
			   AND A.YMD BETWEEN B.SYMD AND B.EYMD
			 INNER JOIN WTM_PROPERTIE C
			    ON A.TENANT_ID = C.TENANT_ID
			   AND A.ENTER_CD = C.ENTER_CD
			   AND C.INFO_KEY = 'OPTION_COMP_CODE'
			 WHERE B.WORKTIME_CLOSE_ID = ${worktimeCloseId}
			   AND A.ALLOW_MINUTE > 0
        ]]>
    </select>
    
</mapper>