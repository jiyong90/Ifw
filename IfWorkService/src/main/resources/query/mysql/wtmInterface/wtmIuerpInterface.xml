<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmIuerpInterfaceMapper">

	<select id="getExpireWtmCode" parameterType="hashmap" resultType="map">
		<![CDATA[
	     SELECT *
		  FROM WTM_CODE C
		  JOIN (SELECT DISTINCT C.*
					  FROM WTM_CODE C
					  LEFT OUTER JOIN WTM_INTF_CODE F 
					    ON C.TENANT_ID = F.TENANT_ID
					   	 AND C.ENTER_CD = F.ENTER_CD
					   	 AND C.GRP_CODE_CD = F.GRP_CODE_CD
					   	 AND F.YYYYMMDDHHMISS > #{ymdhis}
					 WHERE C.TENANT_ID = ${tenantId} 
					   AND F.INTF_ID IS NOT NULL) T
			 ON C.TENANT_ID = T.TENANT_ID
			AND C.ENTER_CD = T.ENTER_CD
			AND C.GRP_CODE_CD = T.GRP_CODE_CD
			AND C.CODE_CD = T.CODE_CD
		  LEFT OUTER JOIN WTM_INTF_CODE I
		    ON C.TENANT_ID = I.TENANT_ID
		   	 AND C.ENTER_CD = I.ENTER_CD
		   	 AND C.GRP_CODE_CD = I.GRP_CODE_CD
		   	 AND C.CODE_CD = I.CODE_CD
		   	 AND I.YYYYMMDDHHMISS > #{ymdhis}
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND (C.EYMD IS NULL OR C.EYMD > F_WTM_DATE_FORMAT(#{ymdhis},'YMD'))
		   AND I.INTF_ID IS NULL
		]]>
	</select>

	<update id="expireWtmCode" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_CODE C
		  JOIN (SELECT DISTINCT C.*
					  FROM WTM_CODE C
					  LEFT OUTER JOIN WTM_INTF_CODE F 
					    ON C.TENANT_ID = F.TENANT_ID
					   	 AND C.ENTER_CD = F.ENTER_CD
					   	 AND C.GRP_CODE_CD = F.GRP_CODE_CD
					   	 AND F.YYYYMMDDHHMISS > #{ymdhis}
					 WHERE C.TENANT_ID = ${tenantId} 
					   AND F.INTF_ID IS NOT NULL) T
			 ON C.TENANT_ID = T.TENANT_ID
			AND C.ENTER_CD = T.ENTER_CD
			AND C.GRP_CODE_CD = T.GRP_CODE_CD
			AND C.CODE_CD = T.CODE_CD
		  LEFT OUTER JOIN WTM_INTF_CODE I
		    ON C.TENANT_ID = I.TENANT_ID
		   	 AND C.ENTER_CD = I.ENTER_CD
		   	 AND C.GRP_CODE_CD = I.GRP_CODE_CD
		   	 AND C.CODE_CD = I.CODE_CD
		   	 AND I.YYYYMMDDHHMISS > #{ymdhis}
		   SET C.EYMD = F_WTM_DATE_FORMAT(NOW(),'YMD')
		     , C.UPDATE_DATE = NOW()
		     , C.UPDATE_ID = #{updateId} 
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND (C.EYMD IS NULL OR C.EYMD > F_WTM_DATE_FORMAT(#{ymdhis},'YMD'))
		   AND I.INTF_ID IS NULL
		]]>
	</update>
	
	<select id="getDeleteWtmCode" parameterType="hashmap" resultType="map">
		<![CDATA[
		SELECT * 
		  FROM WTM_CODE C 
		  JOIN WTM_INTF_CODE I
		    ON I.TENANT_ID = C.TENANT_ID
		   AND I.ENTER_CD = C.ENTER_CD
		   AND I.GRP_CODE_CD = C.GRP_CODE_CD
		   AND I.CODE_CD = C.CODE_CD
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		 WHERE I.TENANT_ID = ${tenantId}
		   AND (I.SYMD <> C.SYMD OR I.EYMD <> C.EYMD)
		   AND I.SYMD <= C.SYMD AND I.EYMD >= C.EYMD
		]]>
	</select>
	
	<update id="deleteWtmCode" parameterType="hashmap">
		<![CDATA[
		DELETE C FROM WTM_CODE C 
		  JOIN WTM_INTF_CODE I
		    ON I.TENANT_ID = C.TENANT_ID
		   AND I.ENTER_CD = C.ENTER_CD
		   AND I.GRP_CODE_CD = C.GRP_CODE_CD
		   AND I.CODE_CD = C.CODE_CD
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		 WHERE I.TENANT_ID = ${tenantId}
		   AND (I.SYMD <> C.SYMD OR I.EYMD <> C.EYMD)
		   AND I.SYMD <= C.SYMD AND I.EYMD >= C.EYMD	
		]]>
	</update>
	
	<update id="insertWtmCodeForBetween" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_CODE(TENANT_ID, ENTER_CD, GRP_CODE_CD, CODE_CD, CODE_NM, SYMD, EYMD, SEQ, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT T.TENANT_ID
		     , T.ENTER_CD
		     , T.GRP_CODE_CD
		     , T.CODE_CD
		     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.CODE_NM ELSE T.CODE_NM END AS CODE_NM
		     , T.SYMD
		     , T.EYMD
		     , T.SEQ
		     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.NOTE ELSE T.NOTE END AS NOTE
		     , NOW() AS UPDATE_DATE
			  , #{updateId} AS UPDATE_ID
		  FROM ( SELECT C.TENANT_ID
					     , C.ENTER_CD
					     , C.GRP_CODE_CD
					     , C.CODE_CD
					     , C.CODE_NM
					     , F_WTM_DATE_FORMAT(DATE_ADD(I.EYMD, INTERVAL 1 DAY),'YMD') AS SYMD
					     , C.EYMD
					     , C.SEQ
					     , C.NOTE
					  FROM WTM_INTF_CODE I
					  JOIN WTM_CODE C
					    ON I.TENANT_ID = C.TENANT_ID
					   AND I.ENTER_CD = C.ENTER_CD
					   AND I.GRP_CODE_CD = C.GRP_CODE_CD
					   AND I.CODE_CD = C.CODE_CD
					   AND (C.SYMD <> I.SYMD OR C.EYMD <> I.EYMD)
					   AND C.SYMD <=I.SYMD AND I.EYMD < C.EYMD 
					 WHERE I.TENANT_ID = ${tenantId} 
					   AND I.YYYYMMDDHHMISS > #{ymdhis} ) T
		  LEFT OUTER JOIN WTM_INTF_CODE S
		    ON T.TENANT_ID=S.TENANT_ID 
			AND T.ENTER_CD=S.ENTER_CD 
		   AND T.GRP_CODE_CD=S.GRP_CODE_CD
			AND T.CODE_CD=S.CODE_CD
			AND T.SYMD=S.SYMD
			AND T.EYMD=S.EYMD
		ORDER BY T.ENTER_CD, T.GRP_CODE_CD, T.CODE_CD, T.SYMD
		]]>
	</update>
	
	<update id="updateWtmCode" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_CODE A  
	    JOIN (  SELECT T.CODE_ID
	                 , CASE WHEN S.INTF_ID IS NOT NULL THEN S.CODE_NM ELSE T.CODE_NM END AS CODE_NM
	                 , T.SYMD
	                 , T.EYMD
	                 , CASE WHEN S.INTF_ID IS NOT NULL THEN S.NOTE ELSE T.NOTE END AS NOTE
				     FROM ( SELECT C.CODE_ID
							      , C.TENANT_ID
							      , C.ENTER_CD
							      , C.GRP_CODE_CD
							      , C.CODE_CD
							      , C.CODE_NM
							      , CASE WHEN C.SYMD > I.SYMD THEN I.SYMD ELSE C.SYMD END AS SYMD 
								   , CASE WHEN C.SYMD < I.SYMD THEN F_WTM_DATE_FORMAT(DATE_SUB(I.SYMD, INTERVAL 1 DAY),'YMD') 
								  			WHEN C.SYMD >= I.SYMD THEN I.EYMD
											ELSE C.EYMD END AS EYMD						  
							      , C.NOTE
							  FROM WTM_CODE C
							  JOIN (SELECT D.*
										     , CASE WHEN @grpCodeCd=GRP_CODE_CD THEN CASE WHEN @codeCd=CODE_CD THEN @rownum := @rownum+1 ELSE @rownum:=1 END ELSE @rownum:=1 END AS ROWNUM
										     , @grpCodeCd := GRP_CODE_CD
										     , @codeCd := CODE_CD
										  FROM WTM_INTF_CODE D
										  JOIN ( SELECT @rownum:=0, @grpCodeCd:= '', @codeCd:= '' ) U
										 WHERE TENANT_ID = ${tenantId}
										   AND YYYYMMDDHHMISS > #{ymdhis}
										ORDER BY YYYYMMDDHHMISS, TENANT_ID, ENTER_CD, GRP_CODE_CD, CODE_CD, SYMD) I
							    ON C.TENANT_ID = I.TENANT_ID
								   AND C.ENTER_CD = I.ENTER_CD
								   AND C.GRP_CODE_CD = I.GRP_CODE_CD
								   AND C.CODE_CD = I.CODE_CD
								   AND C.SYMD < I.EYMD AND I.EYMD <= C.EYMD
							 WHERE I.TENANT_ID = ${tenantId}
							   AND ROWNUM = 1
							   AND (C.SYMD<>I.SYMD OR C.EYMD<>I.EYMD ) ) T
							  LEFT OUTER JOIN WTM_INTF_CODE S
							    ON T.TENANT_ID=S.TENANT_ID 
								AND T.ENTER_CD=S.ENTER_CD 
							   AND T.GRP_CODE_CD=S.GRP_CODE_CD
								AND T.CODE_CD=S.CODE_CD
								AND T.SYMD=S.SYMD
								AND T.EYMD=S.EYMD 
								AND S.YYYYMMDDHHMISS > #{ymdhis}) B
			ON A.CODE_ID = B.CODE_ID
		  SET A.CODE_NM = B.CODE_NM
		    , A.SYMD = B.SYMD
		    , A.EYMD = B.EYMD
		    , A.NOTE = B.NOTE
		    , A.UPDATE_DATE = NOW()
		    , A.UPDATE_ID = #{updateId}
		 ]]>
	</update>
	
	<update id="insertWtmCode" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_CODE(TENANT_ID, ENTER_CD, GRP_CODE_CD, CODE_CD, CODE_NM, SYMD, EYMD, SEQ, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT DISTINCT T.TENANT_ID
			     , T.ENTER_CD
			     , T.GRP_CODE_CD
				  , T.CODE_CD
				  , T.CODE_NM
				  , T.SYMD
				  , T.EYMD
				  , T.SEQ
				  , T.NOTE
				  , NOW() AS UPDATE_DATE
				  , #{updateId} AS UPDATE_ID
		  FROM (	SELECT I.*
						  , (SELECT COUNT(*) 
						       FROM WTM_CODE 
								WHERE TENANT_ID=I.TENANT_ID 
								  AND ENTER_CD=I.ENTER_CD 
								  AND GRP_CODE_CD=I.GRP_CODE_CD
								  AND CODE_CD=I.CODE_CD
								  AND SYMD=I.SYMD
								  AND EYMD=I.EYMD ) AS CNT
					  FROM WTM_INTF_CODE I
					  LEFT OUTER JOIN WTM_CODE C
					    ON I.TENANT_ID = C.TENANT_ID
					   AND I.ENTER_CD = C.ENTER_CD
					   AND I.GRP_CODE_CD = C.GRP_CODE_CD
					   AND I.CODE_CD = C.CODE_CD
					   AND (C.SYMD <> I.SYMD AND C.EYMD <> I.EYMD)
					 WHERE I.TENANT_ID = ${tenantId} 
					   AND I.YYYYMMDDHHMISS > #{ymdhis}
					 ORDER BY I.ENTER_CD, I.GRP_CODE_CD, I.CODE_CD, I.SYMD ) T 
		 WHERE CNT=0
		 ORDER BY T.ENTER_CD, T.GRP_CODE_CD, T.CODE_CD, T.SYMD
		]]>
	</update>
	
	
	<update id="expireWtmHolidayMgr" parameterType="hashmap">
		<![CDATA[
	    DELETE C FROM WTM_HOLIDAY_MGR C
		  JOIN WTM_INTF_HOLIDAY I
		    ON C.TENANT_ID = I.TENANT_ID
		   	 AND C.ENTER_CD = I.ENTER_CD
		   	 AND C.BISINESS_PLACE_CD = I.LOCATION_CD
		   	 AND C.HOLIDAY_YMD = I.YMD
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND I.INTF_ID IS NULL
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND C.HOLIDAY_YMD IN ( SELECT YMD FROM WTM_INTF_HOLIDAY WHERE TENANT_ID=${tenantId} AND YYYYMMDDHHMISS > #{ymdhis}) 
		   AND NOT EXISTS ( SELECT TENANT_ID, ENTER_CD, BISINESS_PLACE_CD, HOLIDAY_YMD
				                     FROM (SELECT A.*
											  FROM WTM_HOLIDAY_MGR A 
											  JOIN WTM_INTF_HOLIDAY B
											    ON B.TENANT_ID = A.TENANT_ID
											   AND B.ENTER_CD = A.ENTER_CD
											   AND B.LOCATION_CD = A.BISINESS_PLACE_CD
		   									   AND B.YMD = A.HOLIDAY_YMD
		   									   AND B.HOLIDAY_NM = A.HOLIDAY_NM
											   AND B.YYYYMMDDHHMISS > #{ymdhis}
											 WHERE B.TENANT_ID = ${tenantId} ) T )	
		]]>
	</update>
	
	<update id="updateWtmHolidayMgr" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_HOLIDAY_MGR H
		  JOIN WTM_INTF_HOLIDAY I
		    ON H.TENANT_ID = I.TENANT_ID
		   	 AND H.ENTER_CD = I.ENTER_CD
		   	 AND H.BISINESS_PLACE_CD = I.LOCATION_CD
		   	 AND H.HOLIDAY_YMD = I.YMD
		   SET H.HOLIDAY_NM = I.HOLIDAY_NM
			  , H.SUN_YN = 'Y'
		     , H.FESTIVE_YN = I.FESTIVE_YN
		     , H.PAY_YN = I.PAY_YN
		     , H.UPDATE_DATE = NOW()
		     , H.UPDATE_ID = #{updateId}
		 WHERE H.TENANT_ID = ${tenantId} 
		   AND H.ENTER_CD = #{enterCd}
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND (H.HOLIDAY_NM<>I.HOLIDAY_NM OR H.FESTIVE_YN<>I.FESTIVE_YN OR H.PAY_YN<>I.PAY_YN) 
		 ]]>
	</update>
	
	<update id="insertWtmHolidayMgr" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_HOLIDAY_MGR(TENANT_ID, ENTER_CD, BISINESS_PLACE_CD, HOLIDAY_YMD, HOLIDAY_NM, SUN_YN, FESTIVE_YN, PAY_YN, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT I.TENANT_ID
		     , I.ENTER_CD
		     , I.LOCATION_CD
			  , I.YMD
			  , I.HOLIDAY_NM
			  , 'Y' AS SUN_YN
			  , I.FESTIVE_YN
			  , I.PAY_YN
			  , NULL AS NOTE
			  , NOW() AS UPDATE_DATE
			  , #{updateId} AS UPDATE_ID
		  FROM WTM_INTF_HOLIDAY I
		  LEFT OUTER JOIN WTM_HOLIDAY_MGR M
		    ON I.TENANT_ID = M.TENANT_ID
		   AND I.ENTER_CD = M.ENTER_CD
		   AND I.LOCATION_CD = M.BISINESS_PLACE_CD
		   AND I.YMD = M.HOLIDAY_YMD
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND I.ENTER_CD = #{enterCd}
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND M.HOLIDAY_YMD IS NULL
		 ORDER BY I.ENTER_CD, I.LOCATION_CD, I.YMD
		]]>
	</update>
    
    <update id="expireWtmTaaCode" parameterType="hashmap">
		<![CDATA[
		DELETE C FROM WTM_TAA_CODE C
		  JOIN WTM_INTF_GNT I
		    ON C.TENANT_ID = I.TENANT_ID
		   	 AND C.ENTER_CD = I.ENTER_CD
		   	 AND C.TAA_CD = I.GNT_CD
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND I.INTF_ID IS NULL
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND C.TAA_CD IN ( SELECT TAA_CD FROM WTM_INTF_GNT WHERE TENANT_ID=${tenantId} AND YYYYMMDDHHMISS > #{ymdhis}) 
		   AND NOT EXISTS ( SELECT TENANT_ID, ENTER_CD, TAA_CD
				                     FROM (SELECT A.*
											  FROM WTM_TAA_CODE A 
											  JOIN WTM_INTF_GNT B
											    ON B.TENANT_ID = A.TENANT_ID
											   AND B.ENTER_CD = A.ENTER_CD
											   AND B.GNT_CD = A.TAA_CD
											   AND B.GNT_NM = A.TAA_NM
											   AND B.YYYYMMDDHHMISS > #{ymdhis}
											 WHERE B.TENANT_ID = ${tenantId} ) T )		                     
		]]>
	</update>
	
	<update id="updateWtmTaaCode" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_TAA_CODE C
		  JOIN WTM_INTF_GNT I
		    ON C.TENANT_ID = I.TENANT_ID
		   	 AND C.ENTER_CD = I.ENTER_CD
		   	 AND C.TAA_CD = I.GNT_CD
		   SET C.TAA_NM = I.GNT_NM
			  , C.TAA_TYPE_CD = I.GNT_GUBUN_CD
		     , C.HOL_INCL_YN = I.HOL_INCL_YN
		     , C.REQUEST_TYPE_CD = I.REQ_USE_TYPE
		     , C.WORK_YN = I.WORK_YN
		     , C.PAY_YN = I.PAY_YN
		     , C.UPDATE_DATE = NOW()
		     , C.UPDATE_ID = #{updateId}
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND (C.TAA_NM<>I.GNT_NM OR C.TAA_TYPE_CD<>I.GNT_GUBUN_CD OR C.HOL_INCL_YN<>I.HOL_INCL_YN OR C.REQUEST_TYPE_CD<>I.REQ_USE_TYPE
					OR C.WORK_YN<>I.WORK_YN OR C.PAY_YN<>I.PAY_YN) 
		 ]]>
	</update>
	
	<update id="insertWtmTaaCode" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_TAA_CODE(TENANT_ID, ENTER_CD, TAA_CD, TAA_NM, TAA_TYPE_CD, HOL_INCL_YN, REQUEST_TYPE_CD, WORK_YN, PAY_YN, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT I.TENANT_ID
		     , I.ENTER_CD
		     , I.GNT_CD
			  , I.GNT_NM
			  , I.GNT_GUBUN_CD
			  , I.HOL_INCL_YN
			  , I.REQ_USE_TYPE
			  , I.WORK_YN
			  , I.PAY_YN
			  , I.NOTE
			  , NOW() AS UPDATE_DATE
			  , #{updateId} AS UPDATE_ID
		  FROM WTM_INTF_GNT I
		  LEFT OUTER JOIN WTM_TAA_CODE C
		    ON I.TENANT_ID = C.TENANT_ID
		   AND I.ENTER_CD = C.ENTER_CD
		   AND I.GNT_CD = C.TAA_CD
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND C.TAA_CODE_ID IS NULL
		 ORDER BY I.ENTER_CD, I.GNT_CD
		]]>
	</update>
	
	<select id="getExpireWtmEmpHis" parameterType="hashmap" resultType="map">
		<![CDATA[
		SELECT F_WTM_DATE_FORMAT(NOW(),'YMD') AS YMD , E.* 
		  FROM WTM_EMP_HIS E
		  LEFT OUTER JOIN WTM_INTF_EMP I
		    ON E.TENANT_ID = I.TENANT_ID
			AND E.ENTER_CD = I.ENTER_CD
			AND E.SABUN = I.SABUN 
		 WHERE E.TENANT_ID = ${tenantId} 
		   AND I.INTF_ID IS NULL
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND E.SYMD <= F_WTM_DATE_FORMAT(NOW(),'YMD') AND F_WTM_DATE_FORMAT(NOW(),'YMD') < E.EYMD
		]]>
	</select>
	
	<update id="expireWtmEmpHis" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_EMP_HIS E
		  LEFT OUTER JOIN WTM_INTF_EMP I
		    ON E.TENANT_ID = I.TENANT_ID
					AND E.ENTER_CD = I.ENTER_CD
					AND E.SABUN = I.SABUN 
		   SET E.EYMD = F_WTM_DATE_FORMAT(NOW(),'YMD')
		      ,  E.UPDATE_DATE = NOW()
		     , E.UPDATE_ID = #{updateId}
		 WHERE E.TENANT_ID = ${tenantId} 
		   AND I.INTF_ID IS NULL
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
			AND F_WTM_DATE_FORMAT(NOW(),'YMD') BETWEEN E.SYMD AND E.EYMD
		]]>
	</update>
	
	<select id="getUpdateWtmEmpHis" parameterType="hashmap" resultType="map">
		<![CDATA[
			SELECT *
			  FROM WTM_EMP_HIS E
			  JOIN WTM_INTF_EMP I
			    ON E.TENANT_ID = I.TENANT_ID
			   	 AND E.ENTER_CD = I.ENTER_CD
			   	 AND E.SABUN = I.SABUN
			   	 AND #{ymd} BETWEEN E.SYMD AND E.EYMD
			  WHERE E.TENANT_ID = ${tenantId} 
			   AND I.YYYYMMDDHHMISS > #{ymdhis}
			   AND (E.EMP_NM<>I.EMP_NM OR E.EMP_ENG_NM<>I.EMP_ENG_NM 
			         OR E.SYMD<>I.SYMD OR E.EYMD<>(CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END)
			         OR E.STATUS_CD<>I.STATUS_CD OR E.ORG_CD<>I.ORG_CD
						OR E.DUTY_CD<>I.DUTY_CD OR E.POS_CD<>I.POS_CD OR E.CLASS_CD<>I.CLASS_CD
						OR E.JOB_GROUP_CD<>I.JOB_GROUP_CD OR E.JOB_CD<>I.JOB_CD 
						OR E.PAY_TYPE_CD<>I.PAY_TYPE_CD OR E.LEADER_YN<>I.LEADER_YN)
		]]>
	</select>
	
	<update id="updateWtmEmpHis" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_EMP_HIS E
		  JOIN WTM_INTF_EMP I
		    ON E.TENANT_ID = I.TENANT_ID
		   	 AND E.ENTER_CD = I.ENTER_CD
		   	 AND E.SABUN = I.SABUN
		   	 AND #{ymd} BETWEEN E.SYMD AND E.EYMD
		   SET E.EMP_NM = I.EMP_NM
		      , E.EMP_ENG_NM   = I.EMP_ENG_NM 
		      , E.SYMD   	   = I.SYMD
		      , E.EYMD   	   = (CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END)
			  , E.STATUS_CD    = I.STATUS_CD
			  , E.ORG_CD       = I.ORG_CD
			  , E.DUTY_CD      = I.DUTY_CD
			  , E.POS_CD       = I.POS_CD
			  , E.CLASS_CD     = I.CLASS_CD
			  , E.JOB_GROUP_CD = I.JOB_GROUP_CD
			  , E.JOB_CD       = I.JOB_CD
			  , E.PAY_TYPE_CD  = I.PAY_TYPE_CD
			  , E.LEADER_YN    = I.LEADER_YN
		     ,  E.UPDATE_DATE = NOW()
		     , E.UPDATE_ID = #{updateId}
		 WHERE E.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND (E.EMP_NM<>I.EMP_NM OR E.EMP_ENG_NM<>I.EMP_ENG_NM 
		         OR E.SYMD<>I.SYMD OR E.EYMD<>(CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END)
		         OR E.STATUS_CD<>I.STATUS_CD OR E.ORG_CD<>I.ORG_CD
					OR E.DUTY_CD<>I.DUTY_CD OR E.POS_CD<>I.POS_CD OR E.CLASS_CD<>I.CLASS_CD
					OR E.JOB_GROUP_CD<>I.JOB_GROUP_CD OR E.JOB_CD<>I.JOB_CD 
					OR E.PAY_TYPE_CD<>I.PAY_TYPE_CD OR E.LEADER_YN<>I.LEADER_YN)
		 ]]>
	</update>
	
	<select id="getInsertWtmEmpHis" parameterType="hashmap" resultType="map">
		<![CDATA[
		SELECT I.TENANT_ID AS tenantId
		     , I.ENTER_CD AS enterCd
		     , I.SABUN AS sabun
		     , I.EMP_NM AS empNm
		     , I.EMP_ENG_NM AS empEngNm
		     , I.ORG_CD AS orgCd
		     , I.STATUS_CD AS statusCd
		     , I.LOCATION_CD AS locationCd
		     , I.DUTY_CD AS dutyCd
		     , I.POS_CD AS posCd
		     , I.CLASS_CD AS classCd
		     , I.JOB_GROUP_CD AS jobGroupCd
		     , I.JOB_CD AS jobCd
		     , I.PAY_TYPE_CD AS payTypeCd
		     , I.LEADER_YN AS leaderYn
		     , I.SYMD AS symd
		     , CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END AS eymd
		     , I.NOTE AS note
		     , #{updateId} AS userId
		     , #{updateId} AS pId
		  FROM WTM_INTF_EMP I
		  LEFT OUTER JOIN WTM_EMP_HIS E
		    ON E.TENANT_ID = I.TENANT_ID
			AND E.ENTER_CD = I.ENTER_CD
			AND E.SABUN = I.SABUN 
			AND E.SYMD = I.SYMD
			AND E.EYMD = (CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END)
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND E.EMP_HIS_ID IS NULL
		   ORDER BY I.ENTER_CD, I.SABUN, I.SYMD
		]]>
	</select>
	
	<update id="insertWtmEmpHis" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_EMP_HIS(TENANT_ID, ENTER_CD, SABUN, EMP_NM, EMP_ENG_NM, ORG_CD, STATUS_CD, BUSINESS_PLACE_CD, DUTY_CD, POS_CD, CLASS_CD, JOB_GROUP_CD, JOB_CD, PAY_TYPE_CD, LEADER_YN, SYMD, EYMD, EMP_YMD, EMP_ID, UPDATE_DATE, UPDATE_ID)
			SELECT I.TENANT_ID
		     , I.ENTER_CD
		     , I.SABUN
		     , I.EMP_NM 
		     , I.EMP_ENG_NM 
		     , I.ORG_CD
		     , I.STATUS_CD
		     , I.LOCATION_CD
		     , I.DUTY_CD
			 , I.POS_CD
			 , I.CLASS_CD
			 , I.JOB_GROUP_CD
			 , I.JOB_CD
		     , I.PAY_TYPE_CD
		     , I.LEADER_YN
		     , I.SYMD 
			 , CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END 
			 , I.SYMD AS EMP_YMD
			 , F_WTM_AES_ENCRYPT(CONCAT(I.TENANT_ID, I.ENTER_CD, I.SABUN), #{encKey}) AS EMP_ID
			 , NOW() AS UPDATE_DATE
			 , #{updateId} AS UPDATE_ID
		FROM WTM_INTF_EMP I
		  LEFT OUTER JOIN WTM_EMP_HIS E
		    ON E.TENANT_ID = I.TENANT_ID
			AND E.ENTER_CD = I.ENTER_CD
			AND E.SABUN = I.SABUN 
			AND E.SYMD = I.SYMD
			AND E.EYMD = (CASE WHEN I.EYMD IS NULL OR I.EYMD='' THEN '29991231' ELSE I.EYMD END)
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND E.EMP_HIS_ID IS NULL
		   ORDER BY I.ENTER_CD, I.SABUN, I.SYMD
		]]>
	</update>
	
	<update id="insertCommUser" parameterType="hashmap">
		<![CDATA[
		INSERT INTO comm_user(tenant_id, login_id, password, name, phone_no, login_failure_count, account_lockout_yn, emp_id, enter_cd)
		SELECT E.*
		  FROM (
					SELECT H.TENANT_ID AS tenant_id
					     , F_WTM_AES_ENCRYPT(H.SABUN, #{encKey}) as login_id
						  , '3KXBgLRev5AMV7MGN267dTNr6f+QjWf0IjLZvWTfpoc=' as password
						  , H.EMP_NM AS name
						  , '010' AS phone_no
						  , 0 AS login_failure_count
						  , 'N' as account_lockout_yn
						  , F_WTM_AES_ENCRYPT(CONCAT(H.TENANT_ID, H.ENTER_CD, H.SABUN), #{encKey}) as emp_id
						  , F_WTM_AES_ENCRYPT(H.ENTER_CD, #{encKey}) as enter_cd
					  FROM WTM_EMP_HIS H
					 WHERE H.TENANT_ID = ${tenantId} 
					   AND #{ymd} BETWEEN H.SYMD AND H.EYMD ) E
		  LEFT OUTER JOIN comm_user C
		    ON E.tenant_id = C.tenant_id
		   AND E.enter_cd = C.enter_cd
		   AND E.login_id = C.login_id
		  WHERE C.user_id IS NULL
		]]>
	</update>
	
	<update id="expireWtmEmpAddr" parameterType="hashmap">
		<![CDATA[
		DELETE E FROM WTM_EMP_ADDR E
		  LEFT OUTER JOIN WTM_INTF_EMP_ADDR I
		    ON E.TENANT_ID = I.TENANT_ID
				AND E.ENTER_CD = I.ENTER_CD
				AND E.SABUN = I.SABUN 
		 WHERE E.TENANT_ID = ${tenantId}
		   AND I.INTF_ID IS NULL	   
		   AND I.YYYYMMDDHHMISS > #{ymdhis} 
		   AND NOT EXISTS ( SELECT TENANT_ID, ENTER_CD, SABUN 
		                     FROM (SELECT A.*
									  FROM WTM_EMP_ADDR A 
									  JOIN WTM_INTF_EMP_ADDR B
									    ON B.TENANT_ID = A.TENANT_ID
									   AND B.ENTER_CD = A.ENTER_CD
									   AND B.SABUN = A.SABUN
									   AND B.YYYYMMDDHHMISS > #{ymdhis}
									 WHERE B.TENANT_ID = ${tenantId}) T )                 
		]]>
	</update>
	
	<update id="updateWtmEmpAddr" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_EMP_ADDR C
		  JOIN WTM_INTF_EMP_ADDR I
		    ON C.TENANT_ID = I.TENANT_ID
		   	 AND C.ENTER_CD = I.ENTER_CD
		   	 AND C.SABUN = I.SABUN
		   SET C.EMAIL = I.EMAIL
			 , C.HAND_PHONE = I.PHONE
		     , C.UPDATE_DATE = NOW()
		     , C.UPDATE_ID = #{updateId}
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND (C.EMAIL<>I.EMAIL OR C.HAND_PHONE<>I.PHONE) 
		 ]]>
	</update>
	
	<update id="insertWtmEmpAddr" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_EMP_ADDR(TENANT_ID, ENTER_CD, SABUN, EMAIL, HAND_PHONE, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT I.TENANT_ID
		     , I.ENTER_CD
		     , I.SABUN
			  , I.EMAIL
			  , I.PHONE
			  , I.NOTE
			  , NOW() AS UPDATE_DATE
			  , #{updateId} AS UPDATE_ID
		  FROM WTM_INTF_EMP_ADDR I
		  LEFT OUTER JOIN WTM_EMP_ADDR C
		    ON I.TENANT_ID = C.TENANT_ID
		   AND I.ENTER_CD = C.ENTER_CD
		   AND I.SABUN = C.SABUN
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND C.EMP_ADDR_ID IS NULL
		 ORDER BY I.ENTER_CD, I.SABUN
		]]>
	</update>
	
	<select id="getExpireWtmOrgCode" parameterType="hashmap" resultType="map">
		<![CDATA[
		SELECT *
		  FROM WTM_ORG_CODE T
		  LEFT OUTER JOIN WTM_INTF_ORG A
		    ON T.TENANT_ID = A.TENANT_ID
		   AND T.ENTER_CD = A.ENTER_CD
		   AND T.ORG_CD = A.ORG_CD
		   AND A.YYYYMMDDHHMISS > #{ymdhis}
		 WHERE T.TENANT_ID = ${tenantId} 
		   AND (T.EYMD IS NULL OR T.EYMD > F_WTM_DATE_FORMAT(#{ymdhis},'YMD'))
		   AND A.INTF_ID IS NULL
		]]>
	</select>

	<update id="expireWtmOrgCode" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_ORG_CODE C
		 LEFT OUTER JOIN WTM_INTF_ORG A
		    ON C.TENANT_ID = A.TENANT_ID
			   AND C.ENTER_CD = A.ENTER_CD
			   AND C.ORG_CD = A.ORG_CD
			   AND A.YYYYMMDDHHMISS > #{ymdhis}
		   SET C.EYMD = F_WTM_DATE_FORMAT(NOW(),'YMD')
		     , C.UPDATE_DATE = NOW()
		     , C.UPDATE_ID = #{updateId} 
		 WHERE C.TENANT_ID = ${tenantId} 
		   AND (C.EYMD IS NULL OR C.EYMD > F_WTM_DATE_FORMAT(#{ymdhis},'YMD'))
		   AND A.INTF_ID IS NULL
		]]>
	</update>
	
	<select id="getDeleteWtmOrgCode" parameterType="hashmap" resultType="map">
		<![CDATA[
		SELECT * 
		  FROM WTM_ORG_CODE C 
		  JOIN WTM_INTF_ORG I
		    ON I.TENANT_ID = C.TENANT_ID
		   AND I.ENTER_CD = C.ENTER_CD
		   AND I.ORG_CD = C.ORG_CD
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND (I.SYMD <> C.SYMD OR I.EYMD <> C.EYMD)
		   AND I.SYMD <= C.SYMD AND I.EYMD >= C.EYMD
		]]>
	</select>
	
	<update id="deleteWtmOrgCode" parameterType="hashmap">
		<![CDATA[
		DELETE C FROM WTM_ORG_CODE C 
		  JOIN WTM_INTF_ORG I
		    ON I.TENANT_ID = C.TENANT_ID
		   AND I.ENTER_CD = C.ENTER_CD
		   AND I.ORG_CD = C.ORG_CD
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		 WHERE I.TENANT_ID = ${tenantId} 
		   AND (I.SYMD <> C.SYMD OR I.EYMD <> C.EYMD)
		   AND I.SYMD <= C.SYMD AND I.EYMD >= C.EYMD
		]]>
	</update>
	
	<update id="insertWtmOrgCodeForBetween" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_ORG_CODE(TENANT_ID, ENTER_CD, ORG_CD, ORG_NM, SYMD, EYMD, ORG_TYPE, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT T.TENANT_ID
		     , T.ENTER_CD
		     , T.ORG_CD
		     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.ORG_NM ELSE T.ORG_NM END AS ORG_NM
		     , T.SYMD
		     , T.EYMD
		     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.ORG_TYPE ELSE T.ORG_TYPE END AS ORG_TYPE
		     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.NOTE ELSE T.NOTE END AS NOTE
		     , NOW() AS UPDATE_DATE
			  , #{updateId} AS UPDATE_ID
		  FROM ( SELECT C.TENANT_ID
					     , C.ENTER_CD
					     , C.ORG_CD
					     , C.ORG_NM
					     , F_WTM_DATE_FORMAT(DATE_ADD(I.EYMD, INTERVAL 1 DAY),'YMD') AS SYMD
					     , C.EYMD
					     , C.ORG_TYPE
					     , C.NOTE
					  FROM WTM_INTF_ORG I
					  JOIN WTM_ORG_CODE C
					    ON I.TENANT_ID = C.TENANT_ID
					   AND I.ENTER_CD = C.ENTER_CD
					   AND I.ORG_CD = C.ORG_CD
					   AND (C.SYMD <> I.SYMD OR C.EYMD <> I.EYMD)
					   AND C.SYMD <=I.SYMD AND I.EYMD < C.EYMD 
					 WHERE I.TENANT_ID = ${tenantId}
					   AND I.YYYYMMDDHHMISS > #{ymdhis} ) T
		  LEFT OUTER JOIN WTM_INTF_ORG S
		    ON T.TENANT_ID=S.TENANT_ID 
			AND T.ENTER_CD=S.ENTER_CD 
			AND T.ORG_CD=S.ORG_CD
			AND T.SYMD=S.SYMD
			AND T.EYMD=S.EYMD
		ORDER BY T.ENTER_CD, T.ORG_CD, T.SYMD
		]]>
	</update>
	
	<update id="updateWtmOrgCode" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_ORG_CODE A  
	    JOIN ( SELECT T.ORG_CODE_ID
					     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.ORG_NM ELSE T.ORG_NM END AS ORG_NM
					     , T.SYMD
					     , T.EYMD
					     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.ORG_TYPE ELSE T.ORG_TYPE END AS ORG_TYPE
					     , CASE WHEN S.INTF_ID IS NOT NULL THEN S.NOTE ELSE T.NOTE END AS NOTE
					  FROM ( SELECT C.ORG_CODE_ID
					               , C.TENANT_ID
					               , C.ENTER_CD
					               , C.ORG_CD
					               , C.ORG_NM
								   , CASE WHEN C.SYMD > I.SYMD THEN I.SYMD ELSE C.SYMD END AS SYMD 
								   , CASE WHEN C.SYMD < I.SYMD THEN F_WTM_DATE_FORMAT(DATE_SUB(I.SYMD, INTERVAL 1 DAY),'YMD') 
								  			WHEN C.SYMD >= I.SYMD THEN I.EYMD
											ELSE C.EYMD END AS EYMD		
										, C.ORG_TYPE					  
								      , C.NOTE
								  FROM WTM_ORG_CODE C
								  JOIN (SELECT D.*
											     , CASE WHEN @orgCd=ORG_CD THEN @rownum := @rownum+1 ELSE @rownum:=1 END AS ROWNUM
											     , @orgCd := ORG_CD
											  FROM WTM_INTF_ORG D
											  JOIN ( SELECT @rownum:=0, @orgCd:= '' ) U
											 WHERE TENANT_ID = ${tenantId}
											   AND YYYYMMDDHHMISS > #{ymdhis}
											ORDER BY YYYYMMDDHHMISS, TENANT_ID, ENTER_CD, ORG_CD, SYMD) I
								    ON C.TENANT_ID = I.TENANT_ID
									   AND C.ENTER_CD = I.ENTER_CD
									   AND C.ORG_CD = I.ORG_CD
									   AND C.SYMD < I.EYMD AND I.EYMD <= C.EYMD
								 WHERE I.TENANT_ID = ${tenantId}
								   AND ROWNUM = 1
								   AND (C.SYMD<>I.SYMD OR C.EYMD<>I.EYMD ) ) T
							  LEFT OUTER JOIN WTM_INTF_ORG S
							    ON T.TENANT_ID=S.TENANT_ID 
								AND T.ENTER_CD=S.ENTER_CD 
								AND T.ORG_CD=S.ORG_CD
								AND T.SYMD=S.SYMD
								AND T.EYMD=S.EYMD ) B
			ON A.ORG_CODE_ID = B.ORG_CODE_ID
		  SET A.ORG_NM = B.ORG_NM
		    , A.SYMD = B.SYMD
		    , A.EYMD = B.EYMD
		    , A.ORG_TYPE = B.ORG_TYPE
		    , A.NOTE = B.NOTE
		    , A.UPDATE_DATE = NOW()
		    , A.UPDATE_ID = #{updateId}
		 ]]>
	</update>
	
	<update id="insertWtmOrgCode" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_ORG_CODE(TENANT_ID, ENTER_CD, ORG_CD, ORG_NM, SYMD, EYMD, ORG_TYPE, NOTE, UPDATE_DATE, UPDATE_ID)
		 SELECT DISTINCT T.TENANT_ID
		     , T.ENTER_CD
		     , T.ORG_CD
		     , T.ORG_NM
		     , T.SYMD
		     , T.EYMD
		     , T.ORG_TYPE
		     , T.NOTE
		     , NOW() AS UPDATE_DATE
		     , #{updateId} AS UPDATE_ID
		  FROM (	SELECT I.TENANT_ID
					     , I.ENTER_CD
						  , I.ORG_CD
						  , I.ORG_NM
						  , I.SYMD
						  , I.EYMD
						  , I.ORG_TYPE
						  , I.NOTE
						  , (SELECT COUNT(*) 
						       FROM WTM_ORG_CODE 
								WHERE TENANT_ID=I.TENANT_ID 
								  AND ENTER_CD=I.ENTER_CD 
								  AND ORG_CD=I.ORG_CD
								  AND SYMD=I.SYMD
								  AND EYMD=I.EYMD ) AS CNT
					  FROM WTM_INTF_ORG I
					  LEFT OUTER JOIN WTM_ORG_CODE C
					    ON I.TENANT_ID = C.TENANT_ID
					   AND I.ENTER_CD = C.ENTER_CD
					   AND I.ORG_CD = C.ORG_CD
					   AND (C.SYMD <> I.SYMD AND C.EYMD <> I.EYMD)
					 WHERE I.TENANT_ID = ${tenantId}
					   AND I.YYYYMMDDHHMISS > #{ymdhis}
					 ORDER BY I.ENTER_CD, I.ORG_CD, I.SYMD ) T 
		 WHERE CNT=0
		]]>
	</update>
	
	<update id="updateWtmOrgChartDet" parameterType="hashmap">
		<![CDATA[
		UPDATE WTM_ORG_CHART_DET D
		  JOIN WTM_ORG_CHART C
		    ON C.ORG_CHART_ID = D.ORG_CHART_ID
		  JOIN WTM_INTF_ORG I
		    ON C.TENANT_ID = I.TENANT_ID
			   AND C.ENTER_CD = I.ENTER_CD
			   AND D.ORG_CD = I.ORG_CD
		   SET D.PRIOR_ORG_CD = I.PRIOR_ORG_CD
		     , D.SEQ = I.SEQ
		     , D.ORG_LEVEL = I.ORG_LEVEL
		     , D.NOTE = I.NOTE
		 WHERE C.ORG_CHART_ID = #{orgChartId}
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND #{ymd} BETWEEN I.SYMD AND I.EYMD
		   AND (D.PRIOR_ORG_CD <> I.PRIOR_ORG_CD OR D.SEQ <> I.SEQ OR D.ORG_LEVEL <> I.ORG_LEVEL)
		 ]]>
	</update>
	
	<update id="insertWtmOrgChartDet" parameterType="hashmap">
		<![CDATA[
		INSERT INTO WTM_ORG_CHART_DET(ORG_CHART_ID, ORG_CD, PRIOR_ORG_CD, SEQ, ORG_LEVEL, NOTE, UPDATE_DATE, UPDATE_ID)
		SELECT #{orgChartId} AS ORG_CHART_ID
		     , I.ORG_CD
		     , I.PRIOR_ORG_CD
		     , CASE WHEN I.SEQ IS NOT NULL AND I.SEQ <> 'null' AND I.SEQ <> '' THEN I.SEQ ELSE NULL END
		     , I.ORG_LEVEL
		     , I.NOTE
		     , NOW() AS UPDATE_DATE
		     , #{updateId} AS UPDATE_ID
		  FROM WTM_INTF_ORG I
		  JOIN WTM_ORG_CHART C
		    ON C.TENANT_ID = I.TENANT_ID
		   AND C.ENTER_CD = I.ENTER_CD
		  LEFT OUTER JOIN WTM_ORG_CHART_DET D
		    ON C.ORG_CHART_ID = D.ORG_CHART_ID
		   AND D.ORG_CD = I.ORG_CD
		 WHERE C.ORG_CHART_ID = #{orgChartId}
		   AND I.YYYYMMDDHHMISS > #{ymdhis}
		   AND #{ymd} BETWEEN I.SYMD AND I.EYMD
		   AND D.ORG_CD IS NULL
		]]>
	</update>
	
</mapper>
