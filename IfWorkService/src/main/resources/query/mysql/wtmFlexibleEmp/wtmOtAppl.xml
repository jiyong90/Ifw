<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmOtApplMapper">
	 <update id="calcOtMinute" parameterType="map">
	 	UPDATE WTM_OT_APPL O
		   SET OT_MINUTE = (
			SELECT F_WTM_CALC_MINUTE(F_WTM_DATE_FORMAT(O.OT_SDATE, 'HI') ,F_WTM_DATE_FORMAT(O.OT_EDATE, 'HI'),  '','','') -  SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,F_WTM_DATE_FORMAT(O.OT_SDATE, 'HI') ,F_WTM_DATE_FORMAT(O.OT_EDATE, 'HI'),  '')) 
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID 
			  JOIN WTM_TIME_BREAK_MGR B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND C.YMD = #{ymd}
		)
		 WHERE O.APPL_ID = #{applId}
	 </update>
	 
	 <select id="otApplfindByApplId" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT O.OT_APPL_ID AS otApplId
			     , O.APPL_ID AS applId
			     , O.YMD AS ymd
			     , O.HOLIDAY_YN AS holidayYn
			     , O.OT_SDATE AS otSdate
			     , O.OT_EDATE AS otEdate
			     , O.OT_MINUTE AS otMinute
			     , O.RET_OT_MINUTE AS retOtMinute
			     , O.REASON_CD AS reasonCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'REASON_CD', O.REASON_CD, A.APPL_YMD) AS reasonNm
			     , O.REASON AS reason
			     , O.SUB_YN AS subYn
			     , O.OLD_OT_APPL_ID AS oldOtApplId
			     , O.CANCEL_YN AS cancelYn
			     , A.APPL_SABUN AS applSabun
			     , A.TENANT_ID AS tenantId
			     , A.ENTER_CD AS enterCd
			     , O.SABUN AS sabun
			     , A.APPL_SABUN AS applSabun
			     , A.APPL_CD AS applCd
			     , A.APPL_STATUS_CD AS applStatusCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
			     , R.WORK_DAY_RESULT_ID AS workDayResultId
			  FROM WTM_APPL A
			  LEFT OUTER JOIN WTM_OT_SUBS_APPL S
			    ON A.APPL_ID = S.APPL_ID
			  LEFT OUTER JOIN WTM_OT_SUBS_APPL X
			    ON S.OT_SUBS_APPL_ID = X.OLD_SUBS_APPL_ID
			  LEFT OUTER JOIN WTM_APPL L
			    ON X.APPL_ID = L.APPL_ID
			  JOIN WTM_OT_APPL O
			    ON ((S.OT_SUBS_APPL_ID IS NULL AND A.APPL_ID = O.APPL_ID)
			    OR (S.OT_SUBS_APPL_ID IS NOT NULL AND S.OT_APPL_ID = O.OT_APPL_ID))
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
			    ON A.TENANT_ID = R.TENANT_ID
			   AND A.ENTER_CD = R.ENTER_CD
			   AND A.APPL_SABUN = R.SABUN
				AND A.APPL_ID = R.APPL_ID
				AND O.YMD = R.YMD
			 WHERE A.APPL_ID = #{applId}
			   AND (A.APPL_SABUN = #{sabun} OR O.SABUN IS NULL OR O.SABUN = #{sabun})
			   AND (R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD = 'OT')
			   AND (S.CANCEL_YN IS NULL OR S.CANCEL_YN<>'Y' OR (S.CANCEL_YN='Y' AND L.APPL_STATUS_CD = '99'))
			 ORDER BY O.OT_SDATE
	        ]]>
    </select>
    
    <select id="otSubsApplfindByOtApplId" parameterType="Long" resultType="hashmap">
        <![CDATA[
			SELECT S.OT_SUBS_APPL_ID AS otSubsApplId
			     , S.OT_APPL_ID AS otApplId
			     , S.APPL_ID AS applId
			     , S.HOLIDAY_TYPE AS holidayType
			     , S.SUB_YMD AS subYmd
			     , S.SUBS_SDATE AS subsSdate
			     , S.SUBS_EDATE AS subsEdate
			     , S.SUBS_MINUTE AS subsMinute
			     , S.OLD_SUBS_APPL_ID AS oldSubsApplId
			     , MIN(CASE WHEN S.SUBS_SDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE 
	  						OR S.SUBS_EDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE THEN R.PLAN_SDATE ELSE NULL END) AS workSDate
			     , MAX(CASE WHEN S.SUBS_SDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE 
				  			OR S.SUBS_EDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE THEN R.PLAN_EDATE ELSE NULL END) AS workEDate
			  FROM WTM_OT_APPL O
			  JOIN WTM_OT_SUBS_APPL S
			    ON O.OT_APPL_ID = S.OT_APPL_ID
			  JOIN WTM_APPL A
			    ON S.APPL_ID = A.APPL_ID
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT  R
			    ON A.TENANT_ID = R.TENANT_ID
			   AND A.ENTER_CD = R.ENTER_CD
			   AND A.APPL_SABUN = R.SABUN
			   AND S.SUB_YMD = R.YMD
			   LEFT OUTER JOIN WTM_OT_SUBS_APPL N
    			ON S.OLD_SUBS_APPL_ID = N.OT_SUBS_APPL_ID
			 WHERE S.OT_APPL_ID = #{otApplId}
			 AND (S.CANCEL_YN IS NULL OR S.CANCEL_YN<>'Y')
			 AND (S.OLD_SUBS_APPL_ID IS NULL OR (S.OLD_SUBS_APPL_ID IS NOT NULL AND N.CANCEL_YN='Y'))
			 GROUP BY S.SUB_YMD, S.OT_SUBS_APPL_ID 
				     , S.OT_APPL_ID 
				     , S.APPL_ID
				     , S.HOLIDAY_TYPE 
				     , S.SUB_YMD
				     , S.SUBS_SDATE 
				     , S.SUBS_EDATE 
				     , S.SUBS_MINUTE 
				     , S.OLD_SUBS_APPL_ID 
			 ORDER BY S.SUB_YMD, S.SUBS_SDATE
	        ]]>
    </select>
    
    <select id="prvOtSubsApplFindByApplId" parameterType="Long" resultType="hashmap">
        <![CDATA[
			SELECT X.OT_SUBS_APPL_ID AS otSubsApplId
			     , X.OT_APPL_ID AS otApplId
			     , X.APPL_ID AS applId
			     , X.HOLIDAY_TYPE AS holidayType
			     , X.SUB_YMD AS subYmd
			     , X.SUBS_SDATE AS subsSdate
			     , X.SUBS_EDATE AS subsEdate
			     , X.SUBS_MINUTE AS subsMinute
			     , X.OLD_SUBS_APPL_ID AS oldSubsApplId
			     , MIN(CASE WHEN X.SUBS_SDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE 
				 			OR X.SUBS_EDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE THEN R.PLAN_SDATE ELSE NULL END) AS workSDate
			    , MAX(CASE WHEN S.SUBS_SDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE 
				   		OR X.SUBS_EDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE THEN R.PLAN_EDATE ELSE NULL END) AS workEDate
			  FROM WTM_APPL A
			  JOIN WTM_OT_SUBS_APPL S
			    ON A.APPL_ID = S.APPL_ID
			  JOIN WTM_OT_APPL O
			    ON S.OT_APPL_ID = O.OT_APPL_ID
			  JOIN WTM_OT_SUBS_APPL X
			    ON O.OT_APPL_ID = X.OT_APPL_ID
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT  R
			    ON A.TENANT_ID = R.TENANT_ID
			   AND A.ENTER_CD = R.ENTER_CD
			   AND A.APPL_SABUN = R.SABUN
			   AND X.SUB_YMD = R.YMD
			 WHERE A.APPL_ID = #{applId} 
			  AND ( (S.OT_SUBS_APPL_ID = X.OT_SUBS_APPL_ID AND X.OLD_SUBS_APPL_ID IS NULL)
			        OR (S.OLD_SUBS_APPL_ID = X.OT_SUBS_APPL_ID) 
					  OR (X.OLD_SUBS_APPL_ID IS NULL AND X.CANCEL_YN IS NULL OR X.CANCEL_YN<>'Y'))
			GROUP BY X.SUB_YMD, X.OT_SUBS_APPL_ID, X.OT_APPL_ID, X.APPL_ID, X.HOLIDAY_TYPE, X.SUB_YMD, X.SUBS_SDATE, X.SUBS_EDATE, X.SUBS_MINUTE, X.OLD_SUBS_APPL_ID 
	        ]]>
    </select>
    
    <select id="getPrevOtSubsApplList" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT O.YMD AS ymd
			     , O.OT_SDATE AS sDate
			     , O.OT_EDATE AS eDate
			     , O.OT_MINUTE AS otMinute
			     , CASE F_WTM_WEEKDAY(F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD')) 
			  			WHEN 1 THEN '일' 
						WHEN 2 THEN '월'
						WHEN 3 THEN '화' 
						WHEN 4 THEN '수' 
						WHEN 5 THEN '목' 
						WHEN 6 THEN '금' 
						WHEN 7 THEN '토' END AS sDay
				  , CASE F_WTM_WEEKDAY(F_WTM_DATE_FORMAT(O.OT_EDATE, 'YMD')) 
			  			WHEN 1 THEN '일' 
						WHEN 2 THEN '월'
						WHEN 3 THEN '화' 
						WHEN 4 THEN '수' 
						WHEN 5 THEN '목' 
						WHEN 6 THEN '금' 
						WHEN 7 THEN '토' END AS eDay
			  FROM WTM_OT_APPL O
			  JOIN WTM_APPL A
			    ON O.APPL_ID = A.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_SABUN = #{sabun}
			   AND O.HOLIDAY_YN = 'Y'
	        ]]>
    </select>
    
    <select id="getTotOtMinuteBySymdAndEymd" parameterType="map" resultType="map">
    <![CDATA[
		SELECT CAST(SUM(CASE WHEN X.OT_MINUTE IS NULL OR X.OT_MINUTE='' THEN 0 ELSE X.OT_MINUTE END) AS SIGNED INTEGER) AS totOtMinute
	        FROM (
	         SELECT SUM(F_WTM_NVL(O.OT_MINUTE,0)) - SUM(F_WTM_NVL(S.SUBS_MINUTE,0)) AS OT_MINUTE
	           FROM WTM_APPL A
	           JOIN WTM_OT_APPL O
	             ON A.APPL_ID = O.APPL_ID
	           LEFT OUTER JOIN WTM_OT_SUBS_APPL S
	             ON A.APPL_ID = S.APPL_ID
	            AND S.SUB_YMD BETWEEN #{symd} AND #{eymd}
	          WHERE A.APPL_STATUS_CD IN ('21','31')
	            AND O.YMD BETWEEN #{symd} AND #{eymd}
	            AND A.APPL_IN_SABUN = #{sabun}
	            AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '') 
	          UNION ALL
	         SELECT F_WTM_NVL(CASE WHEN YMD<F_WTM_DATE_FORMAT(NOW(), 'YMD') THEN F_WTM_NVL(R.APPR_MINUTE,0) ELSE CASE WHEN R.APPR_MINUTE IS NULL THEN R.PLAN_MINUTE ELSE R.APPR_MINUTE END END,0) AS OT_MINUTE
	           FROM WTM_WORK_DAY_RESULT R
	          WHERE R.TENANT_ID = #{tenantId}
	            AND R.ENTER_CD = #{enterCd}
	            AND R.YMD BETWEEN #{symd} AND #{eymd}
	            AND R.TIME_TYPE_CD IN ('OT','FIXOT')
	            AND R.SABUN = #{sabun}
	      ) X

	]]>
    </select>
   
   	 <select id="otApplDetailByApplId" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT 	DATE_FORMAT(O.OT_SDATE, '%Y.%m.%d %H:%i') AS otSdate
			     , DATE_FORMAT(O.OT_EDATE, '%Y.%m.%d %H:%i') AS otEdate
			     , DATE_FORMAT(O.OT_SDATE, '%m.%d %H:%i') AS otStime
			     , DATE_FORMAT(O.OT_EDATE, '%m.%d %H:%i') AS otEtime
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'REASON_CD', O.REASON_CD, A.APPL_YMD) AS reasonNm
			     , O.REASON AS reason
			     , H.EMP_NM AS empNm
			     , group_concat(H.EMP_NM) as applNames
    			 , group_concat(O.SABUN) as applSabuns
			     , CASE WHEN O.SUB_YN = 'Y' THEN '휴일대체' 
			     		WHEN O.SUB_YN ='N' THEN '위로금/시급지급' 
			     		ELSE '-' END AS subYn
			     , CASE WHEN O.SUB_YN = 'Y' THEN 
			     	(select group_concat(CONCAT(DATE_FORMAT(SUBS_SDATE, '%Y.%m.%d %H:%i'), ' ~ ', DATE_FORMAT(SUBS_EDATE, '%H:%i'))) from WTM_OT_SUBS_APPL where APPL_ID =  #{applId}  ) 
			      ELSE '-' END AS subsYmd
			  FROM WTM_OT_APPL O
			  JOIN WTM_APPL A
			    ON A.APPL_ID = O.APPL_ID
			  JOIN WTM_EMP_HIS H
		  		ON A.TENANT_ID = H.TENANT_ID
			   	AND A.ENTER_CD = H.ENTER_CD
			   	AND O.SABUN = H.SABUN
			   	AND EYMD = '29991231'
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
			    ON A.TENANT_ID = R.TENANT_ID
			   AND A.ENTER_CD = R.ENTER_CD
			   AND A.APPL_SABUN = R.SABUN
				AND A.APPL_ID = R.APPL_ID
				AND O.YMD = R.YMD
			 WHERE O.APPL_ID = #{applId}   
			   AND (R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD = 'OT')
			 ORDER BY O.OT_SDATE
	        ]]>
    </select>
    
    <select id="getRestOtMinute" parameterType="map" resultType="map">
		 SELECT E.TENANT_ID AS tenantId
		     , E.ENTER_CD AS enterCd
		     , E.SABUN AS sabun
		     , E.EMP_NM AS empNm
		     , F_WTM_GET_ORG_NM(E.TENANT_ID, E.ENTER_CD, E.ORG_CD, E.SYMD) AS orgNm
			  , F_WTM_GET_CODE_NM(E.TENANT_ID, E.ENTER_CD, 'DUTY_CD', E.DUTY_CD, E.SYMD) AS dutyNm
			  , F_WTM_GET_CODE_NM(E.TENANT_ID, E.ENTER_CD, 'POS_CD', E.POS_CD, E.SYMD) AS posNm
			  , F_WTM_GET_CODE_NM(E.TENANT_ID, E.ENTER_CD, 'CLASS_CD', E.CLASS_CD, E.SYMD) AS classNm
			  , F_WTM_GET_CODE_NM(E.TENANT_ID, E.ENTER_CD, 'JOB_CD', E.JOB_CD, E.SYMD) AS jobNm
		     , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'OT') AS restOtMinute
		     , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'WORK') AS restWorkMinute
             , C.HOLIDAY_YN as holidayYn, P.WORK_TYPE_CD as workTypeCd
		  FROM WTM_EMP_HIS E
          LEFT OUTER JOIN WTM_FLEXIBLE_EMP P 
          ON E.TENANT_ID = P.TENANT_ID 
          AND E.ENTER_CD = P.ENTER_CD 
          AND E.SABUN = P.SABUN 
          AND #{ymd} BETWEEN P.SYMD AND P.EYMD
          LEFT OUTER JOIN WTM_WORK_CALENDAR C 
          ON E.TENANT_ID = C.TENANT_ID 
          AND E.ENTER_CD = C.ENTER_CD 
          AND E.SABUN = C.SABUN AND #{ymd} =  C.YMD
		 WHERE E.TENANT_ID = #{tenantId}
		   AND E.ENTER_CD = #{enterCd}
		   <if test="sabuns!=null">
		   AND E.SABUN IN (NULL, 
	       <foreach collection="sabuns" item="sabun" separator=", ">
			   #{sabun}
		   </foreach>
		   )
		   </if>
		   <if test="sabuns==null">
		   AND E.SABUN = NULL
		   </if>
		   AND #{ymd} BETWEEN E.SYMD AND E.EYMD
  	</select>
  	
  	<select id="subsCreateTarget" parameterType="map" resultType="hashmap">
  		<![CDATA[
		 SELECT distinct O.OT_APPL_ID as otApplId
		  FROM WTM_OT_APPL O
		  JOIN WTM_OT_SUBS_APPL S
		    ON O.OT_APPL_ID = S.OT_APPL_ID
		  JOIN WTM_APPL A
		    ON O.APPL_ID = A.APPL_ID
		  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
		    ON A.APPL_ID = R.APPL_ID
		   AND A.TENANT_ID = R.TENANT_ID
		   AND A.ENTER_CD = R.ENTER_CD
		   AND R.TIME_TYPE_CD = 'SUBS'
		   AND R.YMD = S.SUB_YMD
		  LEFT OUTER JOIN WTM_WORK_DAY_RESULT T
		    ON A.APPL_ID = T.APPL_ID
		   AND A.TENANT_ID = T.TENANT_ID
		   AND A.ENTER_CD = T.ENTER_CD
		   AND T.TIME_TYPE_CD IN ('OT','NIGHT')
		   AND T.YMD = O.YMD
		   AND T.APPR_SDATE IS NOT NULL AND T.APPR_EDATE IS NOT NULL
		 WHERE A.TENANT_ID = ${tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.APPL_STATUS_CD = '99'
		   AND O.SABUN = #{sabun}
		   AND O.HOLIDAY_YN = 'Y'
			AND O.SUB_YN = 'Y'
			AND (O.CANCEL_YN IS NULL OR O.CANCEL_YN <> 'Y')
			AND F_WTM_DATE_FORMAT(O.OT_SDATE,'YMD') BETWEEN #{sYmd} AND #{eYmd}
			AND R.WORK_DAY_RESULT_ID IS NULL
			AND (#{otApplId} IS NULL OR O.OT_APPL_ID = #{otApplId})
		]]>
  	</select>
  	
  	<select id="otApplfindBySubsChgApplId" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT O.OT_APPL_ID AS otApplId
			     , A.APPL_ID AS applId
			     , O.YMD AS ymd
			     , O.HOLIDAY_YN AS holidayYn
			     , O.OT_SDATE AS otSdate
			     , O.OT_EDATE AS otEdate
			     , O.OT_MINUTE AS otMinute
			     , O.RET_OT_MINUTE AS retOtMinute
			     , O.REASON_CD AS reasonCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'REASON_CD', O.REASON_CD, A.APPL_YMD) AS reasonNm
			     , O.REASON AS reason
			     , O.SUB_YN AS subYn
			     , O.OLD_OT_APPL_ID AS oldOtApplId
			     , O.CANCEL_YN AS cancelYn
			     , A.APPL_SABUN AS applSabun
			     , A.TENANT_ID AS tenantId
			     , A.ENTER_CD AS enterCd
			     , O.SABUN AS sabun
			     , A.APPL_SABUN AS applSabun
			     , A.APPL_CD AS applCd
			     , A.APPL_STATUS_CD AS applStatusCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
			     , R.WORK_DAY_RESULT_ID AS workDayResultId
			  FROM WTM_APPL A
			  JOIN WTM_OT_SUBS_APPL S
			    ON A.APPL_ID = S.APPL_ID
			  JOIN WTM_OT_APPL O
			    ON S.OT_APPL_ID = O.OT_APPL_ID
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
			    ON A.TENANT_ID = R.TENANT_ID
			   AND A.ENTER_CD = R.ENTER_CD
			   AND A.APPL_SABUN = R.SABUN
				AND A.APPL_ID = R.APPL_ID
				AND O.YMD = R.YMD
			 WHERE S.APPL_ID = #{applId}   
			   AND A.APPL_SABUN = #{sabun}
			   AND (R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD = 'OT')
			 ORDER BY O.OT_SDATE
	        ]]>
    </select>
    
    <select id="otSubsChgApplfindByApplId" parameterType="Long" resultType="hashmap">
        <![CDATA[
			SELECT S.OT_SUBS_APPL_ID AS otSubsApplId
			     , S.OT_APPL_ID AS otApplId
			     , S.APPL_ID AS applId
			     , S.HOLIDAY_TYPE AS holidayType
			     , S.SUB_YMD AS subYmd
			     , S.SUBS_SDATE AS subsSdate
			     , S.SUBS_EDATE AS subsEdate
			     , S.SUBS_MINUTE AS subsMinute
			     , S.OLD_SUBS_APPL_ID AS oldSubsApplId
			     , MIN(CASE WHEN S.SUBS_SDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE 
	  						OR S.SUBS_EDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE THEN R.PLAN_SDATE ELSE NULL END) AS workSDate
			     , MAX(CASE WHEN S.SUBS_SDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE 
				  			OR S.SUBS_EDATE BETWEEN R.PLAN_SDATE AND R.PLAN_EDATE THEN R.PLAN_EDATE ELSE NULL END) AS workEDate
			  FROM WTM_OT_SUBS_APPL S
			  JOIN WTM_OT_APPL O
			    ON O.OT_APPL_ID = S.OT_APPL_ID
			  JOIN WTM_APPL A
			    ON S.APPL_ID = A.APPL_ID
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT  R
			    ON A.TENANT_ID = R.TENANT_ID
			   AND A.ENTER_CD = R.ENTER_CD
			   AND A.APPL_SABUN = R.SABUN
			   AND S.SUB_YMD = R.YMD
			 WHERE S.APPL_ID = #{applId}
			 GROUP BY S.SUB_YMD, S.OT_SUBS_APPL_ID 
				     , S.OT_APPL_ID 
				     , S.APPL_ID
				     , S.HOLIDAY_TYPE 
				     , S.SUB_YMD
				     , S.SUBS_SDATE 
				     , S.SUBS_EDATE 
				     , S.SUBS_MINUTE 
				     , S.OLD_SUBS_APPL_ID 
			 ORDER BY S.SUB_YMD, S.SUBS_SDATE
	        ]]>
    </select>
    
    
    <!-- 
    	연장/휴일근무 신청내역조회 결재 상태 변경 2020.07.16 유충현
     -->
    <update id="saveApplSts" parameterType="Map">
    	UPDATE WTM_APPL
    	   SET APPL_STATUS_CD = #{applStatusCd}
    	     , UPDATE_DATE = NOW()
			 , UPDATE_ID = #{userId}
    	 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND APPL_ID = #{applId}
    </update>
    
    
    <!-- 
    	연장/휴일근무 신청내역조회 결재 상태 변경 후 결재랑인 상태 변경 2020.07.16 유충현
     -->
    <update id="saveApplLineSts" parameterType="Map">
    	UPDATE WTM_APPL_LINE
    	   SET APPR_STATUS_CD = #{appr_status_cd}
    	     , UPDATE_DATE = NOW()
			 , UPDATE_ID = #{userId}
    	 WHERE APPL_ID = #{applId}
		   AND (APPR_STATUS_CD IS NULL OR APPR_STATUS_CD = '10')
    </update>
    
    <select id="getCheckPlanDate" parameterType="Map" resultType="hashmap">
        <![CDATA[
        SELECT F_WTM_DATE_FORMAT(MIN(PLAN_DATE),'YMDHI') AS 'minPlan', F_WTM_DATE_FORMAT(MAX(PLAN_DATE),'YMDHI') AS 'maxPlan'
		FROM (
			SELECT 
				CASE WHEN MIN(R.PLAN_SDATE) IS NULL THEN STR_TO_DATE(CONCAT(C.YMD, '235900'),'%Y%m%d%H%i%s') 
					ELSE MIN(R.PLAN_SDATE) END AS PLAN_DATE 
			FROM WTM_WORK_CALENDAR C
			LEFT JOIN WTM_WORK_DAY_RESULT R
				ON C.TENANT_ID = R.TENANT_ID
				AND C.ENTER_CD = R.ENTER_CD 
				AND C.SABUN = R.SABUN
				AND C.YMD = R.YMD
			WHERE C.TENANT_ID = #{tenantId}
				AND C.ENTER_CD = #{enterCd}
				AND C.SABUN = #{sabun}
				AND C.YMD = DATE_ADD(STR_TO_DATE(#{ymd}, '%Y%m%d'), INTERVAL 1 DAY) 
				GROUP BY R.YMD
			UNION ALL
			SELECT 
				CASE WHEN MAX(R.PLAN_EDATE) IS NULL THEN STR_TO_DATE(CONCAT(C.YMD, '000000'),'%Y%m%d%H%i%s') 
					ELSE MAX(R.PLAN_EDATE) END AS PLAN_DATE
			FROM WTM_WORK_CALENDAR C
			LEFT JOIN WTM_WORK_DAY_RESULT R
				ON C.TENANT_ID = R.TENANT_ID
				AND C.ENTER_CD = R.ENTER_CD 
				AND C.SABUN = R.SABUN
				AND C.YMD = R.YMD
			WHERE C.TENANT_ID = #{tenantId}
				AND C.ENTER_CD = #{enterCd}
				AND C.SABUN = #{sabun}
				AND C.YMD = DATE_SUB(STR_TO_DATE(#{ymd}, '%Y%m%d'), INTERVAL 1 DAY) 
			GROUP BY R.YMD
			) X
	    ]]>
    </select>
    
    
    <!-- 
    	연장근무 신청시 해당 시간에 계획된 시간이 없는지 확인
     -->
    <select id="getCheckPlanDateCnt" parameterType="Map" resultType="hashmap">
        <![CDATA[
        SELECT COUNT(1) as cnt
		  FROM WTM_WORK_DAY_RESULT
	  	 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND F_WTM_DATE_FORMAT(PLAN_SDATE, 'YMDHI') >= #{sdate}
		   AND F_WTM_DATE_FORMAT(PLAN_EDATE, 'YMDHI') <= #{edate}
	    ]]>
    </select>
</mapper>
