<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmFlexibleEmpMapper">
	<select id="getFlexibleEmpList" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , M.FLEXIBLE_NM AS flexibleNm
			     , F.APPL_ID AS applId 
				  , F.APPL_CD AS applCd
				  , F.APPL_STATUS_CD AS applStatusCd
				  , F_WTM_GET_CODE_NM(E.TENANT_ID, E.ENTER_CD, 'APPL_STATUS_CD', F.APPL_STATUS_CD, E.SYMD) AS applStatusNm 
				  , M.BASE_WORK_YN AS baseWorkYn
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  LEFT OUTER JOIN ( SELECT A.TENANT_ID
			                       , A.ENTER_CD
			                       , A.APPL_ID
			                       , A.APPL_CD
			                       , A.APPL_STATUS_CD
			                       , A.APPL_SABUN
			                       , F.SYMD
			                       , F.EYMD
			                       , F.FLEXIBLE_STD_MGR_ID
									  FROM WTM_APPL A
									  JOIN WTM_FLEXIBLE_APPL F
									    ON A.APPL_ID = F.APPL_ID
									 WHERE A.TENANT_ID = #{tenantId}
									   AND A.ENTER_CD = #{enterCd}
									   AND A.APPL_SABUN = #{sabun} ) F
			    ON E.TENANT_ID = F.TENANT_ID  
				AND E.ENTER_CD = F.ENTER_CD
				AND E.SABUN = F.APPL_SABUN
				AND E.SYMD = F.SYMD
				AND E.EYMD = F.EYMD     
			 WHERE E.TENANT_ID = #{tenantId}
				AND E.ENTER_CD = #{enterCd}
				AND E.SABUN =  #{sabun}
				AND (F_WTM_TO_DATE(#{sYmd}, 'YMD') <= F_WTM_TO_DATE(E.EYMD, 'YMD') AND F_WTM_TO_DATE(E.SYMD, 'YMD') < F_WTM_TO_DATE(#{eYmd}, 'YMD'))
			UNION
			SELECT A.TENANT_ID AS tenantId
			     , A.ENTER_CD AS enterCd
			     , A.APPL_SABUN AS sabun
			     , E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , FA.SYMD AS sYmd
			     , FA.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , M.FLEXIBLE_NM AS flexibleNm
			     , A.APPL_ID AS applId
			     , A.APPL_CD AS applCd
			     , A.APPL_STATUS_CD AS applStatusCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, FA.SYMD) AS applStatusNm
				  , M.BASE_WORK_YN AS baseWorkYn
			 FROM WTM_APPL A
			 JOIN WTM_FLEXIBLE_APPL FA
			   ON A.APPL_ID = FA.APPL_ID
			 JOIN WTM_FLEXIBLE_STD_MGR M
			   ON FA.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			 LEFT OUTER JOIN WTM_FLEXIBLE_EMP E
			   ON A.TENANT_ID = E.TENANT_ID
			  AND A.ENTER_CD = E.ENTER_CD
			  AND A.APPL_SABUN = E.SABUN
			  AND M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
			  AND FA.SYMD = E.SYMD
			  AND FA.EYMD = E.EYMD
			WHERE A.TENANT_ID = #{tenantId}
			  AND A.ENTER_CD = #{enterCd}
			  AND A.APPL_SABUN = #{sabun}
			  AND A.APPL_STATUS_CD NOT IN ('22','32','99')
			  AND (F_WTM_TO_DATE(#{sYmd}, 'YMD') <= F_WTM_TO_DATE(FA.EYMD, 'YMD') AND F_WTM_TO_DATE(FA.SYMD, 'YMD') < F_WTM_TO_DATE(#{eYmd}, 'YMD'))
			ORDER BY sYmd
        ]]>
    </select>

	<select id="getWorkDayResult" parameterType="map" resultType="hashmap" >	
		<![CDATA[
		SELECT *
		  FROM (
		SELECT A.TENANT_ID AS tenantId
		     , A.ENTER_CD AS enterCd
		     , A.APPL_SABUN AS sabun
		     , O.YMD AS ymd
		     , A.APPL_ID AS applId
		     , A.APPL_STATUS_CD AS applStatusCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
		     , A.APPL_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'TIME_TYPE_CD', A.APPL_CD, O.YMD) AS timeTypeNm
		     , NULL AS taaCd
		     , NULL AS taaNm
		     , O.OT_SDATE AS sDate
		     , O.OT_EDATE AS eDate
		     , O.OT_MINUTE AS minute
		  FROM WTM_APPL A
		  JOIN WTM_OT_APPL O
		    ON A.APPL_ID = O.APPL_ID
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND (A.APPL_SABUN = #{sabun} OR O.SABUN = #{sabun})
			AND O.YMD = #{ymd}
			AND A.APPL_STATUS_CD <> '99'
		UNION ALL
		SELECT A.TENANT_ID AS tenantId
		     , A.ENTER_CD AS enterCd
		     , A.APPL_SABUN AS sabun
		     , C.YMD AS ymd
		     , A.APPL_ID AS applId
		     , A.APPL_STATUS_CD AS applStatusCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
		     , A.APPL_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'TIME_TYPE_CD', C.TIME_TYPE_CD, C.YMD) AS timeTypeNm
		     , NULL AS taaCd
		     , NULL AS taaNm
		     , CASE WHEN APPR_SDATE IS NULL THEN PLAN_SDATE ELSE APPR_SDATE END AS sDate
		     , CASE WHEN APPR_EDATE IS NULL THEN PLAN_EDATE ELSE APPR_EDATE END AS eDate
		     , CASE WHEN APPR_MINUTE IS NULL THEN PLAN_MINUTE ELSE APPR_MINUTE END AS minute
		  FROM WTM_APPL A
		  JOIN WTM_OT_CAN_APPL C
		    ON A.APPL_ID = C.APPL_ID
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND (A.APPL_SABUN = #{sabun} OR C.SABUN = #{sabun})
			AND C.YMD = #{ymd}
			AND A.APPL_STATUS_CD <> '99'
		UNION ALL
		SELECT A.TENANT_ID AS tenantId
		     , A.ENTER_CD AS enterCd
		     , A.APPL_SABUN AS sabun
		     , X.SUB_YMD AS ymd
		     , A.APPL_ID AS applId
		     , A.APPL_STATUS_CD AS applStatusCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
		     , A.APPL_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'TIME_TYPE_CD', 'SUBS', O.YMD) AS timeTypeNm
		     , NULL AS taaCd
		     , NULL AS taaNm
		     , X.SUBS_SDATE AS sDate
		     , X.SUBS_EDATE AS eDate
		     , X.SUBS_MINUTE AS minute
		  FROM WTM_APPL A
		  JOIN WTM_OT_SUBS_APPL S
		    ON A.APPL_ID = S.APPL_ID
		  JOIN WTM_OT_APPL O
		    ON S.OT_APPL_ID = O.OT_APPL_ID
		  LEFT OUTER JOIN WTM_OT_SUBS_APPL X
		    ON O.OT_APPL_ID = X.OT_APPL_ID
		   AND S.OLD_SUBS_APPL_ID = X.OT_SUBS_APPL_ID
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.APPL_SABUN = #{sabun}
		   AND A.APPL_CD = 'SUBS_CHG'
			AND X.SUB_YMD = #{ymd}
			AND A.APPL_STATUS_CD <> '99'
		UNION ALL
		SELECT C.TENANT_ID AS tenantId
		     , C.ENTER_CD AS enterCd
		     , C.SABUN AS sabun
		     , C.YMD AS ymd
		     , R.APPL_ID AS applId
		     , NULL AS applStatusCd
		     , NULL AS applStatusNm
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(C.TENANT_ID, C.ENTER_CD, 'TIME_TYPE_CD', R.TIME_TYPE_CD, C.YMD) AS timeTypeNm
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
		     , F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE) AS sDate
		     , F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE) AS eDate
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE<>0 THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END AS minute
		  FROM WTM_WORK_CALENDAR C
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		   LEFT OUTER JOIN WTM_APPL A
		    ON R.APPL_ID = A.APPL_ID
		  LEFT OUTER JOIN WTM_OT_CAN_APPL O
		    ON R.WORK_DAY_RESULT_ID = O.WORK_DAY_RESULT_ID
		  LEFT OUTER JOIN WTM_OT_SUBS_APPL S
		    ON A.APPL_ID = S.APPL_ID
		   AND R.YMD = S.SUB_YMD
		  LEFT OUTER JOIN WTM_OT_SUBS_APPL B
		    ON S.OT_SUBS_APPL_ID = B.OLD_SUBS_APPL_ID
		 WHERE C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.SABUN = #{sabun}
		   AND C.YMD = #{ymd}
		   AND (F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE) IS NULL OR #{ymd} BETWEEN F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE), 'YMD') AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE), 'YMD')) 
		   AND O.OT_CAN_APPL_ID IS NULL
		   AND ((B.OT_SUBS_APPL_ID IS NULL AND S.CANCEL_YN IS NULL) OR (B.OT_SUBS_APPL_ID IS NOT NULL AND S.CANCEL_YN = 'Y'))
		   ) X
		 WHERE X.MINUTE IS NOT NULL OR X.MINUTE<>'' OR X.MINUTE <> 0
		 ORDER BY ymd, sDate
		]]>
    </select>
    
    <!--해당 기간의 근무 정보 -->
  	<select id="getFlexibleRangeInfo" parameterType="map" resultType="map">
  		SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			  , E.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			  , M.FLEXIBLE_NM AS flexibleNm
			  , M.WORK_TYPE_CD AS workTypeCd
			  , M.BASE_WORK_YN AS baseWorkYn
			  , M.UNIT_MINUTE AS unitMinute
			  , E.SABUN AS sabun
			  , CASE WHEN M.WORK_TYPE_CD NOT IN ('SELE_F','SELE_C') THEN T.WEEK_SDATE ELSE E.SYMD END AS sYmd
			  , CASE WHEN M.WORK_TYPE_CD NOT IN ('SELE_F','SELE_C') THEN T.WEEK_EDATE ELSE E.EYMD END AS eYmd
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'WORK') AS totalWorkMinute
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'OT') AS totalOtMinute
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'WORK') AS restWorkMinute
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'OT') AS restOtMinute
			  , T.AVL_MINUTE AS avlMinute
			  , (SELECT A.APPL_ID 
			       FROM WTM_APPL A 
					 JOIN WTM_FLEXIBLE_APPL F 
					   ON A.APPL_ID = F.APPL_ID 
					WHERE A.TENANT_ID = E.TENANT_ID 
					  AND A.ENTER_CD = E.ENTER_CD 
					  AND A.APPL_SABUN = E.SABUN
					  AND A.APPL_STATUS_CD = '99'
					  AND F.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
					  AND F.SYMD = E.SYMD
					  AND F.EYMD = E.EYMD) AS applId
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_FLEXIBLE_STD_MGR M
			 ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
		  LEFT OUTER JOIN WTM_WORK_TERM_TIME T
		    ON E.TENANT_ID = T.TENANT_ID
		   AND E.ENTER_CD = T.ENTER_CD
		   AND E.SABUN = T.SABUN
		   AND E.WORK_TYPE_CD = T.WORK_TYPE_CD
		   AND #{ymd} BETWEEN T.FLEXIBLE_SDATE AND T.FLEXIBLE_EDATE
		   AND #{ymd} BETWEEN T.WEEK_SDATE AND T.WEEK_EDATE
		 WHERE E.TENANT_ID = #{tenantId}
		   AND E.ENTER_CD = #{enterCd}
		   AND E.SABUN = #{sabun}
		   AND #{ymd} BETWEEN E.SYMD AND E.EYMD 
  	</select>
  	
  	 <!--해당 일의 근무 정보 -->
  	<select id="getFlexibleDayInfo" parameterType="map" resultType="map">
          SELECT C.TENANT_ID AS tenantId
                , C.ENTER_CD AS enterCd
                 , C.SABUN AS sabun
                 , C.YMD AS ymd
                 , T.TIME_CD_MGR_ID AS timeCdMgrId
                 , T.BREAK_TYPE_CD AS breakTypeCd
                 , T.TIME_CD AS timeCd
                 , T.TIME_NM AS timeNm
                 , C.HOLIDAY_YN AS holidayYn
                 , F_WTM_GET_TAA_NAMES(C.TENANT_ID, C.ENTER_CD, C.SABUN, C.YMD, 2) AS taaNames
                 , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS', 'EXCEPT') THEN R.PLAN_SDATE ELSE NULL END) AS planSdate
                 , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS', 'EXCEPT') THEN R.PLAN_EDATE ELSE NULL END) AS planEdate
                 , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS', 'EXCEPT') THEN R.PLAN_MINUTE ELSE 0 END) AS planMinute
                 , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA', 'EXCEPT') THEN R.APPR_SDATE ELSE NULL END) AS apprSdate
                 , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA', 'EXCEPT') THEN R.APPR_EDATE ELSE NULL END) AS apprEdate
                 , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA', 'EXCEPT') THEN R.APPR_MINUTE ELSE 0 END) AS apprMinute
              FROM WTM_WORK_CALENDAR C
              JOIN WTM_TIME_CD_MGR T
                ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
              LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
                ON C.TENANT_ID = R.TENANT_ID
               AND C.ENTER_CD = R.ENTER_CD
               AND C.YMD = R.YMD
               AND C.SABUN = R.SABUN
             WHERE C.YMD = #{ymd}
               AND C.SABUN = #{sabun}
               AND C.TENANT_ID = #{tenantId}
               AND C.ENTER_CD = #{enterCd}
            GROUP BY C.TENANT_ID, C.ENTER_CD, C.SABUN, C.YMD, T.TIME_CD_MGR_ID, T.BREAK_TYPE_CD, T.TIME_CD, T.TIME_NM, C.HOLIDAY_YN
  	</select>
    
    <!--해당 일의 근무시간 정보 -->
  	<select id="getFlexibleWorkTimeInfo" parameterType="map" resultType="map">
  		<![CDATA[
	    SELECT C.YMD AS ymd
	         , F_WTM_GET_TAA_NAMES(R.TENANT_ID, R.ENTER_CD, R.SABUN, R.YMD, 2)  AS taaNames
		     , MIN(C.ENTRY_SDATE) as entrySdate
		     , MAX(C.ENTRY_EDATE) as entryEdate
		     , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_SDATE ELSE NULL END) AS planSdate
		     , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_EDATE ELSE NULL END) AS planEdate
		     , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_MINUTE ELSE 0 END) AS planMinute
		     , MIN(R.PLAN_SDATE) AS workSDate
		     , MAX(R.PLAN_EDATE) AS workEDate
		     , SUM(R.PLAN_MINUTE) AS workMinute
		     , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_SDATE ELSE NULL END) AS apprSdate
		     , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_EDATE ELSE NULL END) AS apprEdate
		     , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_MINUTE ELSE NULL END) AS apprMinute
		     , SUM(CASE WHEN R.TIME_TYPE_CD='BASE' THEN CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE <> 0 THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END 
		     		    ELSE 0 END)
		     	+ SUM(CASE WHEN 'Y'='Y' AND 'Y'='Y' AND R.TIME_TYPE_CD='TAA' AND R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE <> '' THEN R.APPR_MINUTE ELSE 0 END)
				  - SUM(CASE WHEN R.TIME_TYPE_CD='BASE' AND X.TAA_CD='BREAK' THEN (CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE!='' THEN F_WTM_NVL(X.APPR_MINUTE,0) ELSE F_WTM_NVL(X.PLAN_MINUTE,0) END) ELSE 0 END) AS apprBaseMinute
		     , SUM(CASE WHEN R.TIME_TYPE_CD='FIXOT' OR R.TIME_TYPE_CD='OT' OR R.TIME_TYPE_CD='NIGHT' THEN CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE <> 0 THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END 
		                ELSE 0 END)
				  - SUM(CASE WHEN (R.TIME_TYPE_CD='FIXOT' AND X.TAA_CD='BREAK_FIXOT') OR (R.TIME_TYPE_CD='OT' AND X.TAA_CD='BREAK_OT') OR (R.TIME_TYPE_CD='NIGHT' AND X.TAA_CD='BREAK_NIGHT') 
				  THEN (CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE!='' THEN F_WTM_NVL(X.APPR_MINUTE,0) ELSE F_WTM_NVL(X.PLAN_MINUTE,0) END) ELSE 0 END) AS apprOtMinute
		     , C.HOLIDAY_YN AS holidayYn
		  FROM WTM_WORK_CALENDAR C
		  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		   AND R.TIME_TYPE_CD <> 'EXCEPT' 
		   LEFT OUTER JOIN (SELECT TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD
		                        , SUM(PLAN_MINUTE) AS PLAN_MINUTE
								, SUM(APPR_MINUTE) AS APPR_MINUTE
		                      FROM WTM_WORK_DAY_RESULT 
									WHERE TENANT_ID = #{tenantId}
									  AND ENTER_CD = #{enterCd}
									  AND SABUN = #{sabun}
									  AND TIME_TYPE_CD = 'EXCEPT'
		                       AND TAA_CD LIKE '%BREAK%'
		                       AND YMD = #{ymd}
							GROUP BY TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD) X
			 ON R.TENANT_ID = X.TENANT_ID
		   AND R.ENTER_CD = X.ENTER_CD
		   AND R.YMD = X.YMD
		   AND R.SABUN = X.SABUN
		 WHERE C.YMD = #{ymd}
		   AND C.SABUN = #{sabun}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.TENANT_ID = #{tenantId}
		   AND R.TIME_TYPE_CD <> 'EXCEPT'
		GROUP BY R.TENANT_ID, R.ENTER_CD, R.SABUN, R.YMD, C.HOLIDAY_YN
		]]>
  	</select>

	<select id="getFlexibleEmp" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
				 , E.TENANT_ID AS tenantId
				 , E.ENTER_CD AS enterCd
			     , E.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			     , M.FLEXIBLE_NM AS flexibleNm
			     , M.USE_SYMD AS useSymd
			     , M.USE_EYMD AS useEymd
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.UNIT_MINUTE AS unitMinute
			     , M.EXHAUSTION_YN AS exhaustionYn
			     , M.HOL_EXCEPT_YN AS holExceptYn
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.CORE_CHK_YN AS coreChkYn
			     , M.BASE_WORK_YN AS baseWorkYn
			     , M.FIXOT_USE_TYPE AS fixotUseType
			     , M.FIXOT_USE_LIMIT AS fixotUseLimit
			     , M.TAA_TIME_YN AS taaTimeYn
			     , M.TAA_WORK_YN AS taaWorkYn
			     , M.UNPLANNED_YN AS unplannedYn
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , E.WORK_MINUTE AS workMinute
			     , E.OT_MINUTE AS otMinute
				 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'WORK') AS restWorkMinute
				 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'OT') AS restOtMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			 WHERE E.TENANT_ID = #{tenantId} 
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND #{ymd} BETWEEN E.SYMD AND E.EYMD
        ]]>
    </select>
	
    <select id="getPrevFlexible" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT A.APPL_SABUN AS sabun
			     , MAX(FA.SYMD) AS sYmd
			     , MAX(FA.EYMD) AS eYmd
			  FROM WTM_APPL A
			  JOIN WTM_FLEXIBLE_APPL FA
			    ON A.APPL_ID = FA.APPL_ID 
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_SABUN = #{empNo}
			GROUP BY A.APPL_SABUN
        ]]>
    </select>
    
    <select id="getWorkTermTime" parameterType="map" resultType="wtmWorkTermTime">
        <![CDATA[
			SELECT T.*
			     , E.FLEXIBLE_NM AS filexibleNm
			  FROM WTM_WORK_TERM_TIME T
			  JOIN WTM_FLEXIBLE_EMP E
			    ON T.TENANT_ID = E.TENANT_ID
			   AND T.ENTER_CD = E.ENTER_CD
			   AND T.SABUN = E.SABUN
			   AND T.FLEXIBLE_SDATE = E.SYMD
			   AND T.FLEXIBLE_EDATE = E.EYMD
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{empNo}
			   AND F_WTM_TO_DATE(#{ymd},'YMD') BETWEEN F_WTM_TO_DATE(E.SYMD,'YMD') AND F_WTM_TO_DATE(E.EYMD,'YMD')
        ]]>
    </select>
    
    <update id="createWorkCalendarOfSeleC" parameterType="map">
    	INSERT INTO WTM_WORK_CALENDAR(TENANT_ID, ENTER_CD, SABUN, YMD, TIME_CD_MGR_ID, WORK_CLOSE_YN, HOLIDAY_YN, UPDATE_ID)
			SELECT E.TENANT_ID, E.ENTER_CD, E.SABUN, D.SUN_YMD, P.TIME_CD_MGR_ID, 'N', T.HOL_YN,  #{userId}
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_DAY_MGR D
			    ON D.SUN_YMD BETWEEN E.SYMD AND E.EYMD
			 JOIN WTM_WORK_PATT_DET P
                ON P.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
               AND F_WTM_WEEKDAY(D.SUN_YMD) = P.SEQ
              JOIN WTM_TIME_CD_MGR T
                ON P.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			   AND NOT EXISTS 
				(
					SELECT * FROM WTM_WORK_CALENDAR C
			    	 WHERE C.YMD = D.SUN_YMD
			     	   AND C.SABUN = E.SABUN
			     	   AND C.ENTER_CD = E.ENTER_CD
			     	   AND C.TENANT_ID = E.TENANT_ID
				)
    </update>
    
    <update id="createWorkCalendarOfElas" parameterType="map">
    	INSERT INTO WTM_WORK_CALENDAR(TENANT_ID, ENTER_CD, SABUN, YMD, TIME_CD_MGR_ID, WORK_CLOSE_YN, HOLIDAY_YN, UPDATE_ID)
		SELECT A.TENANT_ID, A.ENTER_CD, A.APPL_SABUN, D.YMD, D.TIME_CD_MGR_ID, 'N', D.HOLIDAY_YN, #{userId}
		  FROM WTM_FLEXIBLE_APPL_DET D
		  JOIN WTM_FLEXIBLE_APPL F
		    ON D.FLEXIBLE_APPL_ID = F.FLEXIBLE_APPL_ID
		  JOIN WTM_APPL A
		    ON F.APPL_ID = A.APPL_ID
		 WHERE D.FLEXIBLE_APPL_ID = #{flexibleApplId}
    </update>
    
    <update id="createWorkCalendarOfElasApply" parameterType="map">
    	INSERT INTO WTM_WORK_CALENDAR(TENANT_ID, ENTER_CD, SABUN, YMD, TIME_CD_MGR_ID, WORK_CLOSE_YN, HOLIDAY_YN, UPDATE_ID)
		SELECT F.TENANT_ID, F.ENTER_CD, #{sabun}, D.YMD, D.TIME_CD_MGR_ID, 'N', D.HOLIDAY_YN, #{userId}	 
		  FROM WTM_FLEXIBLE_APPLY_DET D
		  JOIN WTM_FLEXIBLE_APPLY F
		    ON D.FLEXIBLE_APPLY_ID = F.FLEXIBLE_APPLY_ID
		 WHERE D.FLEXIBLE_APPLY_ID = #{flexibleApplyId}
    </update>
    <!-- 
    <update id="updateHolidayYnOFWorkCalendar" parameterType="map">
    	UPDATE WTM_WORK_CALENDAR C
    	  JOIN WTM_FLEXIBLE_EMP E
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD 
    	   SET C.HOLIDAY_YN = F_WTM_HOLIDAY_YN(C.YMD, #{1}, #{2}, #{3}, #{4}, #{5}, #{6}, #{7})
    	     , C.UPDATE_ID = #{userId}
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId} 
    </update>
     -->
     
    <update id="updatePlanMinute" parameterType="Long">
    	<![CDATA[
    	UPDATE WTM_WORK_DAY_RESULT X 
    	  JOIN (
			SELECT D.WORK_DAY_RESULT_ID  
				 , F_WTM_CALC_MINUTE( F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI'), '','', '') -
				   SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI'), '' )) AS CM
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT D 
			    ON C.TENANT_ID = D.TENANT_ID
			   AND C.ENTER_CD = D.ENTER_CD
			   AND C.YMD = D.YMD
			   AND C.SABUN = D.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  LEFT OUTER JOIN WTM_TIME_BREAK_MGR B /* 20200414 휴게시간이 없을수도 있음으로 OUTER로 변경 */
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
/* 20200414  휴게시간조건 제외 함수에서 시간처리함			    
        	   AND (B.SHM <= F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI') 
			     OR B.EHM >= F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI'))
*/			     
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			   AND D.TIME_TYPE_CD = 'BASE'
			 GROUP BY D.WORK_DAY_RESULT_ID, D.PLAN_SDATE, D.PLAN_EDATE
			) XX
			ON X.WORK_DAY_RESULT_ID = XX.WORK_DAY_RESULT_ID
		   SET X.PLAN_MINUTE = XX.CM
		]]>
    </update>
    <update id="updateApprDatetimeByYmdAndSabun" parameterType="map">
    <![CDATA[
    	UPDATE WTM_FLEXIBLE_STD_MGR M
		  JOIN WTM_FLEXIBLE_EMP E
		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		   SET R.APPR_SDATE = F_WTM_CALC_APPR_DATE(C.ENTRY_SDATE, R.PLAN_SDATE, M.UNIT_MINUTE, 'S')
			 , R.APPR_EDATE = F_WTM_CALC_APPR_DATE(C.ENTRY_EDATE, R.PLAN_EDATE, M.UNIT_MINUTE, 'E')
			 , R.UPDATE_DATE = now()
			 , R.UPDATE_ID = 'updateApprDatetimeByYmdAndSabun'
		 WHERE C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
		   AND C.ENTRY_EDATE >= R.PLAN_SDATE 
		   AND C.ENTRY_SDATE <= R.PLAN_EDATE  
		   AND C.ENTRY_SDATE IS NOT NULL
		   AND C.ENTRY_EDATE IS NOT NULL
		   AND C.YMD NOT IN (SELECT S.YMD
		                       FROM (SELECT DISTINCT SR.YMD 
									   FROM WTM_WORK_DAY_RESULT SR 
									   WHERE SR.TENANT_ID = #{tenantId}
									   AND SR.ENTER_CD = #{enterCd} 
									   AND SR.SABUN = #{sabun}
									   AND SR.TIME_TYPE_CD = #{timeTypeCd} 
									   AND SR.TAA_CD = #{taaCd}
									   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd}) S
									 ) 
		   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL)
		   AND R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS')	/* 근태시간은 타각제외 */
    ]]>
    </update>
    
    <update id="updateApprMinuteByYmdAndSabun" parameterType="map">
     <![CDATA[
      	UPDATE WTM_WORK_DAY_RESULT X 
    	  JOIN (
			SELECT D.WORK_DAY_RESULT_ID  
				 , F_WTM_CALC_MINUTE( F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','', '')
				   - SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '' )) AS CM
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT D 
			    ON C.TENANT_ID = D.TENANT_ID
			   AND C.ENTER_CD = D.ENTER_CD
			   AND C.YMD = D.YMD
			   AND C.SABUN = D.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  LEFT OUTER JOIN WTM_TIME_BREAK_MGR B	/* 20200414 휴게시간이 없을수도 있음으로 OUTER로 변경 */
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
/* 20200414  휴게시간조건 제외 함수에서 시간처리함
        	   AND (DATE_FORMAT(D.APPR_SDATE, '%H%i') <=  STR_TO_DATE(B.SHM, '%H%i')
			     AND DATE_FORMAT(D.APPR_EDATE, '%H%i') >= STR_TO_DATE(B.EHM, '%H%i'))  */
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND T.BREAK_TYPE_CD = 'MGR'
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND (E.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL)
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND D.APPR_SDATE < D.APPR_EDATE
			 GROUP BY D.WORK_DAY_RESULT_ID, D.APPR_SDATE, D.APPR_EDATE
			) XX
			ON X.WORK_DAY_RESULT_ID = XX.WORK_DAY_RESULT_ID
		   SET X.APPR_MINUTE = XX.CM
	 ]]>
    </update>
    
    <!-- 
				    CASE WHEN XZ.APPR_MINUTE BETWEEN XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE AND XZ.PRE_WORK_MINUTE + IFNULL(XZ.BREAK_MINUTE,0)  THEN XZ.PRE_WORK_MINUTE
							  WHEN XZ.APPR_MINUTE < IFNULL(XZ.BREAK_MINUTE,0) THEN 0
							  ELSE XZ.APPR_MINUTE - IFNULL(XZ.BREAK_MINUTE,0)
	                          END AS CM
     -->
    <update id="updateTimeTypeApprMinuteByYmdAndSabun" parameterType="map">
    	<![CDATA[
			 UPDATE WTM_WORK_DAY_RESULT X 
			   	  JOIN (
					SELECT XZ.WORK_DAY_RESULT_ID,
						   XZ.APPR_MINUTE AS CM
					FROM (
					SELECT D.WORK_DAY_RESULT_ID, F_WTM_CALC_MINUTE(F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI'), F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','','') AS APPR_MINUTE,  MAX(B.WORK_MINUTE) AS PRE_WORK_MINUTE, MAX(B.BREAK_MINUTE) AS PRE_BREAK_MINUTE
						, MIN(BB.WORK_MINUTE) AS WORK_MINUTE, MIN(BB.BREAK_MINUTE) AS BREAK_MINUTE
						  FROM WTM_FLEXIBLE_EMP E
						  JOIN WTM_WORK_CALENDAR C
						    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
						   AND E.SABUN = C.SABUN
					       AND C.YMD BETWEEN E.SYMD AND E.EYMD
						  JOIN WTM_WORK_DAY_RESULT D 
						    ON C.TENANT_ID = D.TENANT_ID
						   AND C.ENTER_CD = D.ENTER_CD
						   AND C.YMD = D.YMD
						   AND C.SABUN = D.SABUN
						  JOIN WTM_TIME_CD_MGR T
						    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
						  LEFT OUTER JOIN WTM_TIME_BREAK_TIME B
						    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			              AND (B.WORK_MINUTE + B.BREAK_MINUTE) < F_WTM_CALC_MINUTE(F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI'), F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','','')
						  LEFT OUTER JOIN WTM_TIME_BREAK_TIME BB
						    ON T.TIME_CD_MGR_ID = BB.TIME_CD_MGR_ID 
			              AND (BB.WORK_MINUTE + BB.BREAK_MINUTE) >= F_WTM_CALC_MINUTE(F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI'), F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','','')
						 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
						   AND T.BREAK_TYPE_CD = 'TIME'
						   AND E.TENANT_ID = #{tenantId}
						   AND E.ENTER_CD = #{enterCd}
			               AND D.APPR_SDATE IS NOT NULL AND D.APPR_EDATE IS NOT NULL
						   AND (E.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL)
						   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
						   AND D.APPR_SDATE < D.APPR_EDATE
						 GROUP BY D.WORK_DAY_RESULT_ID, D.APPR_SDATE,D.APPR_EDATE
					 ) XZ
	 			) XX
	 			ON X.WORK_DAY_RESULT_ID = XX.WORK_DAY_RESULT_ID
 		   		SET X.APPR_MINUTE = XX.CM	
    	]]>
    </update>
    
    <update id="updateTimeFixTypeApprMinuteByYmdAndSabun" parameterType="map">
    	<![CDATA[
			 UPDATE WTM_WORK_DAY_RESULT X 
			   	  JOIN (
					SELECT D.WORK_DAY_RESULT_ID, F_WTM_CALC_MINUTE(F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI'), F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','','') AS APPR_MINUTE,  MAX(B.WORK_MINUTE) AS CM
						  FROM WTM_FLEXIBLE_EMP E
						  JOIN WTM_WORK_CALENDAR C
						    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
						   AND E.SABUN = C.SABUN
					       AND C.YMD BETWEEN E.SYMD AND E.EYMD
						  JOIN WTM_WORK_DAY_RESULT D 
						    ON C.TENANT_ID = D.TENANT_ID
						   AND C.ENTER_CD = D.ENTER_CD
						   AND C.YMD = D.YMD
						   AND C.SABUN = D.SABUN
						  JOIN WTM_TIME_CD_MGR T
						    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
						  LEFT OUTER JOIN WTM_TIME_BREAK_TIME B
						    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			              AND (B.WORK_MINUTE + B.BREAK_MINUTE) <= F_WTM_CALC_MINUTE(F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI'), F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','','')
						 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
						   AND T.BREAK_TYPE_CD = 'TIMEFIX'
						   AND E.TENANT_ID = ${tenantId}
						   AND E.ENTER_CD = #{enterCd}
			               AND D.APPR_SDATE IS NOT NULL AND D.APPR_EDATE IS NOT NULL
						   AND (E.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL)
						   AND C.YMD BETWEEN #{sYmd} AND #{eYmd} 
						   AND D.APPR_SDATE < D.APPR_EDATE
						 GROUP BY D.WORK_DAY_RESULT_ID, D.APPR_SDATE,D.APPR_EDATE
	 				) XX
	 			ON X.WORK_DAY_RESULT_ID = XX.WORK_DAY_RESULT_ID
 		   		SET X.APPR_MINUTE = XX.APPR_MINUTE 	
    	]]>
    </update>
    
    <update id="updateEntrySdateByTenantIdAndEnterCdAndYmdBetweenAndSabun" parameterType="map">
    	<![CDATA[ 
			UPDATE WTM_WORK_CALENDAR A
			 JOIN (
				SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				     , MIN(R.PLAN_SDATE)  PLAN_SDATE
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_WORK_DAY_RESULT R
				    ON C.TENANT_ID = R.TENANT_ID
				   AND C.ENTER_CD = R.ENTER_CD
				   AND C.YMD = R.YMD
				   AND C.SABUN = R.SABUN
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
				   AND M.DAY_OPEN_TYPE != 'N' 
				   AND R.TIME_TYPE_CD NOT IN ('TAA')
				   AND C.ENTRY_SDATE IS NULL
				   AND ((M.DAY_CLOSE_TYPE = 'BASE' AND R.TIME_TYPE_CD = 'BASE')
				         OR (M.DAY_CLOSE_TYPE = 'OT' AND R.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')))
				   AND (C.SABUN = #{sabun} OR  #{sabun} = '' OR  #{sabun} IS NULL) 
				 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				) B
				ON A.TENANT_ID = B.TENANT_ID AND A.ENTER_CD = B.ENTER_CD AND A.YMD = B.YMD AND A.SABUN = B.SABUN 
			   SET A.ENTRY_SDATE = B.PLAN_SDATE 
			     , A.ENTRY_STYPE_CD = 'AUTO'
			     , A.UPDATE_DATE = now()
			     , A.UPDATE_ID = #{userId}
    	]]>
    </update>
    
    <update id="updateEntryEdateByTenantIdAndEnterCdAndYmdBetweenAndSabun" parameterType="map">
    	<![CDATA[ 
			UPDATE WTM_WORK_CALENDAR A
			 JOIN (
				SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				     , MAX(R.PLAN_EDATE)  PLAN_EDATE
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_WORK_DAY_RESULT R
				    ON C.TENANT_ID = R.TENANT_ID
				   AND C.ENTER_CD = R.ENTER_CD
				   AND C.YMD = R.YMD
				   AND C.SABUN = R.SABUN
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
				   AND M.DAY_CLOSE_TYPE != 'N' 
				   AND R.TIME_TYPE_CD NOT IN ('TAA')
				   AND ((M.DAY_CLOSE_TYPE = 'BASE' AND R.TIME_TYPE_CD = 'BASE')
				         OR (M.DAY_CLOSE_TYPE = 'OT' AND R.TIME_TYPE_CD IN ('BASE', 'OT', 'FIXOT', 'NIGHT')))
				   AND C.ENTRY_SDATE IS NOT NULL
				   AND C.ENTRY_EDATE IS NULL
				   AND (C.SABUN = #{sabun} OR  #{sabun} = '' OR  #{sabun} IS NULL) 
				 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				) B
				ON A.TENANT_ID = B.TENANT_ID AND A.ENTER_CD = B.ENTER_CD AND A.YMD = B.YMD AND A.SABUN = B.SABUN 
			   SET A.ENTRY_EDATE = B.PLAN_EDATE 
			     , A.ENTRY_ETYPE_CD = 'AUTO'
			     , A.UPDATE_DATE = now()
			     , A.UPDATE_ID = #{userId}
    	]]>
    </update>
    
    
    <update id="updateTimeTypePlanToEntryTimeByTenantIdAndEnterCdAndYmdBetweenAndSabun" parameterType="map">
    	<![CDATA[ 
			UPDATE WTM_WORK_CALENDAR A
			 JOIN (
				SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
					 , MIN(R.PLAN_SDATE) AS PLAN_SDATE 
				     , MAX(R.PLAN_EDATE) AS PLAN_EDATE
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_WORK_DAY_RESULT R
				    ON C.TENANT_ID = R.TENANT_ID
				   AND C.ENTER_CD = R.ENTER_CD
				   AND C.YMD = R.YMD
				   AND C.SABUN = R.SABUN
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
				   AND R.TIME_TYPE_CD = #{timeTypeCd}
				   AND R.PLAN_SDATE IS NOT NULL
				   AND (C.SABUN = #{sabun} OR  #{sabun} = '' OR  #{sabun} IS NULL) 
				 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN, R.TIME_TYPE_CD 
				) B
				ON A.TENANT_ID = B.TENANT_ID AND A.ENTER_CD = B.ENTER_CD AND A.YMD = B.YMD AND A.SABUN = B.SABUN 
			   SET A.ENTRY_SDATE = B.PLAN_SDATE 
			     , A.ENTRY_STYPE_CD = #{timeTypeCd}
			     , A.ENTRY_EDATE = B.PLAN_EDATE 
			     , A.ENTRY_ETYPE_CD = #{timeTypeCd}
    	]]>
    </update>
    
    <insert id="createDayResultByTimeTypeAndEntryDateIsNull" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD, TAA_CD, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, now(), #{userId}
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd} 
				   AND C.ENTRY_SDATE IS NULL
				   AND C.ENTRY_EDATE IS NULL  
				   AND T.ABSENCE_CHK_YN = 'Y'
				   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
    	]]>
    </insert>
    
    <insert id="createDayResultByTimeTypeAndCheckRequireCoreTimeYn" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD, TAA_CD, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, now(), #{userId}
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd} 
				   AND C.ENTRY_SDATE IS NOT NULL
				   AND C.ENTRY_EDATE IS NOT NULL  
				   AND C.ENTRY_EDATE <= F_WTM_TO_DATE(CONCAT(C.YMD, M.CORE_SHM), 'YMDHI')
				   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
				   AND M.CORE_REQUIRE_YN = 'Y' 
    	]]>
    </insert>
    
    <insert id="createDayResultByTimeTypeAndEntrtEdateIsNull" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD, TAA_CD, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, now(), #{userId}
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}   
				   AND C.ENTRY_SDATE IS NOT NULL  
				   AND C.ENTRY_EDATE IS NULL  
			   	   AND T.LATE_CHK_YN = 'Y'
				   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
    	]]>
    </insert>
    
    <insert id="createDayResultByTimeTypeAndPlanSdateLessThanApprSdate" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD,  TAA_CD, APPR_SDATE, APPR_EDATE, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd} , MIN(R.PLAN_SDATE), MIN(R.APPR_SDATE), now(), #{userId}
			  FROM WTM_FLEXIBLE_STD_MGR M
			  JOIN WTM_FLEXIBLE_EMP E
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE C.TENANT_ID = #{tenantId}
			   AND C.ENTER_CD = #{enterCd}
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND R.TIME_TYPE_CD = 'BASE'
			   AND T.LATE_CHK_YN = 'Y'
			   AND C.ENTRY_SDATE IS NOT NULL
			   AND C.ENTRY_EDATE IS NOT NULL
			   AND C.YMD NOT IN (SELECT DISTINCT SR.YMD 
								   FROM WTM_WORK_DAY_RESULT SR 
								   WHERE SR.TENANT_ID = R.TENANT_ID 
								   AND SR.ENTER_CD = R.ENTER_CD 
								   AND SR.SABUN = R.SABUN 
								   AND SR.TIME_TYPE_CD = #{timeTypeCd}
								   AND SR.TAA_CD = #{taaCd}
								   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd})
			   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
			 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
				 , C.ENTRY_SDATE, C.ENTRY_EDATE
			 HAVING MIN(R.PLAN_SDATE) < MIN(R.APPR_SDATE)
    	]]>
    </insert>
    
    
    <insert id="createDayResultByTimeTypeAndApprEdateLessThanPlanEdate" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD,  TAA_CD, APPR_SDATE, APPR_EDATE, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, MAX(R.APPR_EDATE), MAX(R.PLAN_EDATE), now(), #{userId}
			  FROM WTM_FLEXIBLE_STD_MGR M
			  JOIN WTM_FLEXIBLE_EMP E
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE C.TENANT_ID = #{tenantId}
			   AND C.ENTER_CD = #{enterCd}
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND R.TIME_TYPE_CD = 'BASE'
			   AND T.LEAVE_CHK_YN = 'Y'
			   AND C.ENTRY_SDATE IS NOT NULL
			   AND C.ENTRY_EDATE IS NOT NULL
			   AND C.YMD NOT IN (SELECT DISTINCT SR.YMD 
								   FROM WTM_WORK_DAY_RESULT SR 
								   WHERE SR.TENANT_ID = R.TENANT_ID 
								   AND SR.ENTER_CD = R.ENTER_CD 
								   AND SR.SABUN = R.SABUN 
								   AND SR.TIME_TYPE_CD = #{timeTypeCd}
								   AND SR.TAA_CD = #{taaCd}
								   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd})
			   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
			 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
				 , C.ENTRY_SDATE, C.ENTRY_EDATE
			 HAVING MAX(R.PLAN_EDATE) > MAX(R.APPR_EDATE)
    	]]>
    </insert>
    
    <select id="checkBaseWorktime" parameterType="Long" resultType="map">
    	SELECT ( WORK_MINUTE  >=  SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END)) AS isValid
    		, WORK_MINUTE as totalWorktime
    	  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		  JOIN WTM_PROPERTIE P
		    ON P.TENANT_ID = C.TENANT_ID AND P.ENTER_CD = C.ENTER_CD AND P.INFO_KEY = 'OPTION_MAX_WORKTIME_1WEEK'
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
    </select>
    
    <select id="checkBaseWorktimeMgr" parameterType="map" resultType="map">
    	SELECT ( CASE WHEN PP.INFO_VALUE = 'B' THEN F_WTM_TO_DAYS(A.SDATE, A.EDATE) * 8 ELSE CEIL( F_WTM_TO_DAYS(A.SDATE, A.EDATE) * P.INFO_VALUE / 7) * 60 END  >=  SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END)) AS isValid
    		 , CASE WHEN PP.INFO_VALUE = 'B' THEN F_WTM_TO_DAYS(A.SDATE, A.EDATE) * 8 ELSE CEIL( F_WTM_TO_DAYS(A.SDATE, A.EDATE) * P.INFO_VALUE / 7) * 60 END as totalWorktime
		  FROM (SELECT CASE WHEN T.WORK_TYPE_CD = 'ELAS' THEN FLEXIBLE_SDATE ELSE WEEK_SDATE END AS SDATE
					     , CASE WHEN T.WORK_TYPE_CD = 'ELAS' THEN FLEXIBLE_EDATE ELSE WEEK_EDATE END AS EDATE
					     , C.TENANT_ID
					     , C.ENTER_CD
					     , C.SABUN
					  FROM WTM_WORK_TERM_TIME T
					 INNER JOIN WTM_WORK_CALENDAR C
					    ON T.TENANT_ID = C.TENANT_ID
					   AND T.ENTER_CD = C.ENTER_CD
					   AND T.SABUN = C.SABUN
					   AND C.YMD BETWEEN T.WEEK_SDATE AND T.WEEK_EDATE
					 WHERE C.TENANT_ID = #{tenantId}
					   AND C.ENTER_CD = #{enterCd}
					   AND C.SABUN = #{sabun}
					   AND C.YMD = #{ymd}
					) A
		  INNER JOIN  WTM_WORK_DAY_RESULT R
				    ON A.TENANT_ID = R.TENANT_ID
				   AND A.ENTER_CD = R.ENTER_CD
				   AND R.YMD BETWEEN A.SDATE AND A.EDATE
				   AND A.SABUN = R.SABUN
		  INNER JOIN WTM_PROPERTIE P
				    ON P.TENANT_ID = A.TENANT_ID AND P.ENTER_CD = A.ENTER_CD AND P.INFO_KEY = 'OPTION_MAX_WORKTIME_1WEEK'
		  LEFT OUTER JOIN WTM_PROPERTIE PP
				    ON PP.TENANT_ID = A.TENANT_ID AND PP.ENTER_CD = A.ENTER_CD AND PP.INFO_KEY = 'OPTION_MAX_WORKTIME_1WEEK_CALC_TYPE'
    </select>
    
    <select id="getWorktimePlan" parameterType="map" resultType="map" >
    	<![CDATA[
    	SELECT F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') AS ymd
		     , F_WTM_DATE_FORMAT(O.OT_SDATE, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(O.OT_EDATE, 'H:I') AS ehm
		     , O.OT_MINUTE AS minute
		     , 'OT' AS timeTypeCd
		     , NULL AS taaCd
		     , NULL AS taaNm
			 , O.HOLIDAY_YN AS holidayYn
			 , (SELECT M.TIME_NM FROM WTM_TIME_CD_MGR M JOIN WTM_WORK_CALENDAR C ON M.TIME_CD_MGR_ID = C.TIME_CD_MGR_ID 
			 	WHERE C.TENANT_ID = E.TENANT_ID AND C.ENTER_CD = E.ENTER_CD AND C.SABUN = E.SABUN AND C.YMD = F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD')) AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_OT_APPL O
		    ON F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_APPL A
		    ON O.APPL_ID = A.APPL_ID
			AND E.TENANT_ID = A.TENANT_ID
		   AND E.ENTER_CD = A.ENTER_CD
		   AND E.SABUN = A.APPL_SABUN
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		   AND A.APPL_STATUS_CD <> '99'
		UNION ALL
    	SELECT C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL AND R.APPR_SDATE != '' THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL AND R.APPR_EDATE != '' THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, 'H:I') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END
		     	- CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE!='' THEN F_WTM_NVL(B.APPR_MINUTE,0) ELSE F_WTM_NVL(B.PLAN_MINUTE,0) END AS minute
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
           	 , T.TIME_NM AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		  LEFT OUTER JOIN (SELECT TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD
		                        , SUM(PLAN_MINUTE) AS PLAN_MINUTE
								, SUM(APPR_MINUTE) AS APPR_MINUTE
		                      FROM WTM_WORK_DAY_RESULT 
									WHERE TENANT_ID = #{tenantId}
									  AND ENTER_CD = #{enterCd}
									  AND SABUN = #{sabun}
									  AND TIME_TYPE_CD = 'EXCEPT'
		                       AND TAA_CD IN ('BREAK','BREAK_FIXOT') 
								  GROUP BY TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD) B
		    ON R.TENANT_ID = B.TENANT_ID
		   AND R.ENTER_CD = B.ENTER_CD
		   AND R.YMD = B.YMD
		   AND R.SABUN = B.SABUN
		   AND B.TAA_CD = (CASE WHEN R.TIME_TYPE_CD='BASE' THEN 'BREAK' WHEN R.TIME_TYPE_CD='FIXOT' THEN 'BREAK_FIXOT' END)
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		   AND (R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD <> 'EXCEPT')
		 ORDER BY ymd,shm
		 ]]>
    </select>
    
    <!-- 달력에 표시되는 날짜에 해당하는 plan만 가져옴  -->
    <select id="getWorktimePlanByYmdBetween" parameterType="map" resultType="map" >
    	<![CDATA[
    	SELECT T.*
		     , (SELECT M.TIME_NM FROM WTM_TIME_CD_MGR M JOIN WTM_WORK_CALENDAR C ON M.TIME_CD_MGR_ID = C.TIME_CD_MGR_ID
			  	  WHERE C.TENANT_ID = T.tenantId AND C.ENTER_CD = T.enterCd AND C.SABUN = T.sabun AND C.YMD = T.ymd) AS timeNm
    	FROM (
		    	SELECT  E.TENANT_ID AS tenantId
				     , E.ENTER_CD AS enterCd
				     , E.SABUN AS sabun
		    	     , F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') AS ymd
				     , F_WTM_DATE_FORMAT(O.OT_SDATE, 'H:I') AS shm
				     , F_WTM_DATE_FORMAT(O.OT_EDATE, 'H:I') AS ehm
				     , O.OT_MINUTE AS minute
				     , 'OT' AS timeTypeCd
				     , NULL AS taaCd
				     , NULL AS taaNm
					  , O.HOLIDAY_YN AS holidayYn
				  FROM WTM_FLEXIBLE_EMP E
				  JOIN WTM_OT_APPL O
				    ON F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') BETWEEN E.SYMD AND E.EYMD
				   AND E.SABUN = O.SABUN
				  JOIN WTM_APPL A
				    ON O.APPL_ID = A.APPL_ID
					AND E.TENANT_ID = A.TENANT_ID
				   AND E.ENTER_CD = A.ENTER_CD
				 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
				   AND A.APPL_STATUS_CD <> '99'
				   AND F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') BETWEEN #{sYmd} AND #{eYmd}
				   AND E.TENANT_ID = #{tenantId}
				   AND E.ENTER_CD = #{enterCd}
				   AND E.SABUN = #{sabun}
		) T
		UNION ALL
    	SELECT E.TENANT_ID AS tenantId
		     , E.ENTER_CD AS enterCd
		     , E.SABUN AS sabun
    	     , C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL AND R.APPR_SDATE != '' THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL AND R.APPR_EDATE != '' THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, 'H:I') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END 
		       - CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE!='' THEN F_WTM_NVL(B.APPR_MINUTE,0) ELSE F_WTM_NVL(B.PLAN_MINUTE,0) END AS minute
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
           	 , T.TIME_NM AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		   AND R.TIME_TYPE_CD <> 'EXCEPT' AND R.TIME_TYPE_CD NOT LIKE '%BREAK%'
		  LEFT OUTER JOIN (SELECT TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD
		                        , SUM(PLAN_MINUTE) AS PLAN_MINUTE
										, SUM(APPR_MINUTE) AS APPR_MINUTE
		                      FROM WTM_WORK_DAY_RESULT 
									WHERE TENANT_ID = #{tenantId}
									  AND ENTER_CD = #{enterCd}
									  AND SABUN = #{sabun}
									  AND TIME_TYPE_CD = 'EXCEPT'
		                       AND TAA_CD LIKE '%BREAK%'
								  GROUP BY TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD) B
		    ON R.TENANT_ID = B.TENANT_ID
		   AND R.ENTER_CD = B.ENTER_CD
		   AND R.YMD = B.YMD
		   AND R.SABUN = B.SABUN
		   AND B.TAA_CD = (CASE WHEN R.TIME_TYPE_CD='BASE' THEN 'BREAK' WHEN R.TIME_TYPE_CD='FIXOT' THEN 'BREAK_FIXOT' WHEN R.TIME_TYPE_CD='OT' THEN 'BREAK_OT' WHEN R.TIME_TYPE_CD='NIGHT' THEN 'BREAK_NIGHT' END)
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
		   AND C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.SABUN = #{sabun}
		 ORDER BY ymd
		 ]]>
    </select>
    
    <!--
    	근무제 기간에서 특정일 포함 이전 근무시간 합(분) - 인정 분 이 없을 경우 계획 분으로   
     -->
    <select id="getTotalApprMinute" parameterType="map" resultType="map">
    	<![CDATA[
    	 SELECT SUM( CASE WHEN  R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END) AS totalApprMinute
		   FROM WTM_FLEXIBLE_STD_MGR M
		   JOIN WTM_FLEXIBLE_EMP E
		     ON M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
		   JOIN WTM_WORK_CALENDAR C
		     ON E.TENANT_ID = C.TENANT_ID
		    AND E.ENTER_CD = C.ENTER_CD
		    AND E.SABUN = C.SABUN
		    AND C.YMD BETWEEN E.SYMD AND E.EYMD
		   JOIN  WTM_WORK_DAY_RESULT R
		     ON C.TENANT_ID = R.TENANT_ID
		    AND C.ENTER_CD = R.ENTER_CD
		    AND C.YMD = R.YMD
		    AND C.SABUN = R.SABUN
		  WHERE C.YMD <= #{ymd} 
		    AND #{ymd}  BETWEEN E.SYMD AND E.EYMD
		    AND R.TIME_TYPE_CD = 'BASE'
		    AND E.SABUN = #{sabun}
		    AND E.TENANT_ID = #{tenantId}
		    AND E.ENTER_CD = #{enterCd} 
		  GROUP BY E.TENANT_ID, E.ENTER_CD, E.SABUN
		]]>
    </select>
    <!--
   		근무제 기간에서 특정일 이후부터 근무제 적용 종료기간 까지의 코어시간의 합을 가지고 온다. 
   		사용처 : 연장근무 신청 시 소정근로 선 소진사용여부에 따라 사용할 수 있다. 
     -->
	<select id="getTotalCoretime" parameterType="map" resultType="map">
		<![CDATA[
		SELECT SUM(X.CORE_HM) AS coreHm FROM (
 			SELECT  C.YMD, M.CORE_SHM,  M.CORE_EHM, F_WTM_CALC_MINUTE(M.CORE_SHM,  M.CORE_EHM, '','', '') -
  					SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, M.CORE_SHM,  M.CORE_EHM, '' )) AS CORE_HM
 			  FROM WTM_FLEXIBLE_STD_MGR M
 			  JOIN WTM_FLEXIBLE_EMP E
 			    ON M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
  			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
   			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD 
  			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
  			  JOIN WTM_TIME_BREAK_MGR B
				ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
			 WHERE C.YMD > #{ymd} 
 		  	   AND #{ymd}  BETWEEN E.SYMD AND E.EYMD
 			   AND E.SABUN = #{sabun}
 			   AND E.TENANT_ID = #{tenantId}
 			   AND E.ENTER_CD = #{enterCd} 
   			   AND (B.SHM BETWEEN M.CORE_SHM  AND M.CORE_EHM 
	 				OR B.EHM BETWEEN M.CORE_SHM  AND M.CORE_EHM)
 			 GROUP BY E.TENANT_ID, E.ENTER_CD, E.SABUN, C.YMD
 		) X
 		]]>	
  	</select>
  	<select id="getSumOtMinute" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT F_WTM_TO_NUMBER(SUM(X.otMinute),'Y') AS otMinute FROM (
			SELECT F_WTM_NVL(SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' AND R.APPR_MINUTE > 0 THEN F_WTM_NVL(R.APPR_MINUTE, 0)
							ELSE F_WTM_NVL(R.PLAN_MINUTE, 0) END 
			                ), 0) AS otMinute
			  FROM WTM_WORK_DAY_RESULT R
			 WHERE R.YMD BETWEEN #{symd} AND #{eymd}
			   AND R.TIME_TYPE_CD IN ('OT','FIXOT')
			   AND R.SABUN = #{sabun}
			   AND R.TENANT_ID = #{tenantId}
			   AND R.ENTER_CD = #{enterCd}
			 UNION ALL
			SELECT F_WTM_NVL(SUM(F_WTM_NVL(O.OT_MINUTE, 0)),0)  AS otMinute
			  FROM WTM_APPL A
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.APPL_STATUS_CD IN ('21','31')
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND O.YMD BETWEEN #{symd} AND #{eymd}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '') 
			 ) X
		]]>	
  	</select>
  	
  	
  	<select id="calcMinuteAsBreaktimeOption" parameterType="map" resultType="map">
  		SELECT CASE WHEN P.INFO_VALUE = 'Y' THEN F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','')
		     		ELSE F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') - BREAK_MINUTE END AS calcMinute 
		  FROM ( SELECT E.TENANT_ID
		              , E.ENTER_CD
		              , E.SABUN
		              , CASE WHEN SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) IS NULL THEN 0 ELSE SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) END AS BREAK_MINUTE
					  FROM WTM_FLEXIBLE_EMP E
					  JOIN WTM_WORK_CALENDAR C
					    ON E.TENANT_ID = C.TENANT_ID
					   AND E.ENTER_CD = C.ENTER_CD
					   AND E.SABUN = C.SABUN
					   AND C.YMD BETWEEN E.SYMD AND E.EYMD
					  JOIN WTM_TIME_CD_MGR T
					    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
					  JOIN WTM_TIME_BREAK_MGR B
					    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
					 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
					   AND E.TENANT_ID = #{tenantId}
					   AND E.ENTER_CD = #{enterCd}
					   AND E.SABUN = #{sabun}
					   AND C.YMD = #{ymd}
					    ) S
			LEFT OUTER JOIN WTM_PROPERTIE P
		    ON S.TENANT_ID = P.TENANT_ID
		   AND S.ENTER_CD = P.ENTER_CD
		   AND P.INFO_KEY = 'OPTION_BREAKTIME_INCLUDED_YN_OF_OT_APPL'
  	</select>
  	
  	<select id="calcMinuteExceptBreaktime" parameterType="map" resultType="map">
  		SELECT S.BREAK_MINUTE AS breakMinute
  		     , CASE WHEN BREAK_MINUTE_NO_PAY IS NULL THEN 0 ELSE BREAK_MINUTE_NO_PAY END AS breakMinuteNoPay
  		     , CASE WHEN BREAK_MINUTE_PAID IS NULL THEN 0 ELSE BREAK_MINUTE_PAID END AS breakMinutePaid
		     , F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') - S.BREAK_MINUTE AS calcMinute 
		  FROM ( SELECT CASE WHEN SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) IS NULL THEN 0 ELSE SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) END AS BREAK_MINUTE
				      , SUM(CASE WHEN B.BREAK_TIME_CD = '01' THEN F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '') ELSE 0 END) AS BREAK_MINUTE_NO_PAY 
	  				  , SUM(CASE WHEN B.BREAK_TIME_CD = '02' THEN F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '') ELSE 0 END) AS BREAK_MINUTE_PAID
				  FROM WTM_TIME_CD_MGR T
				  JOIN WTM_TIME_BREAK_MGR B
				    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
				 WHERE T.TIME_CD_MGR_ID = ${timeCdMgrId}
			   	   AND T.BREAK_TYPE_CD = 'MGR'
				   ) S
  	</select>
  	
  	<select id="calcTimeTypeApprMinuteExceptBreaktime" parameterType="map" resultType="map">
  		<![CDATA[
	  		SELECT CASE WHEN XZ.APPR_MINUTE BETWEEN XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE AND XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE + XZ.BREAK_MINUTE  THEN XZ.PRE_BREAK_MINUTE ELSE XZ.PRE_BREAK_MINUTE+XZ.BREAK_MINUTE END AS breakMinute
	  		     , CASE WHEN XZ.APPR_MINUTE BETWEEN XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE AND XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE + XZ.BREAK_MINUTE  THEN XZ.PRE_WORK_MINUTE
							  WHEN XZ.APPR_MINUTE < XZ.BREAK_MINUTE THEN 0
							  ELSE XZ.APPR_MINUTE - XZ.BREAK_MINUTE
	                          END AS calcMinute
			FROM (
			SELECT F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') AS APPR_MINUTE,  MAX(B.WORK_MINUTE) AS PRE_WORK_MINUTE, MAX(B.BREAK_MINUTE) AS PRE_BREAK_MINUTE
				, MIN(BB.WORK_MINUTE) AS WORK_MINUTE, MIN(BB.BREAK_MINUTE) AS BREAK_MINUTE
				  FROM WTM_TIME_CD_MGR T
				  LEFT OUTER JOIN WTM_TIME_BREAK_TIME B
				    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
	              AND (B.WORK_MINUTE + B.BREAK_MINUTE) < F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','')
				  LEFT OUTER JOIN WTM_TIME_BREAK_TIME BB
				    ON T.TIME_CD_MGR_ID = BB.TIME_CD_MGR_ID 
	              AND (BB.WORK_MINUTE + BB.BREAK_MINUTE) >= F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','')
				 WHERE T.TIME_CD_MGR_ID = ${timeCdMgrId}
				   AND T.BREAK_TYPE_CD = 'TIME'
			) XZ
		]]>	
  	</select>
  	
  	<select id="calcTimeTypeFixMinuteExceptBreaktime" parameterType="map" resultType="map">
  		<![CDATA[
	  		SELECT (SELECT B.BREAK_MINUTE 
		           FROM WTM_TIME_BREAK_TIME 
					 WHERE TIME_CD_MGR_ID = T.TIME_CD_MGR_ID 
					   AND T.BREAK_TYPE_CD = 'TIMEFIX' 
						AND WORK_MINUTE = MAX(B.WORK_MINUTE) ) AS breakMinute
	  		    ,  MAX(B.WORK_MINUTE) AS calcMinute
			  FROM WTM_TIME_CD_MGR T
			  LEFT OUTER JOIN WTM_TIME_BREAK_TIME B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
	             AND (B.WORK_MINUTE + B.BREAK_MINUTE) <= F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','')
			 WHERE T.TIME_CD_MGR_ID = ${timeCdMgrId}
			   AND T.BREAK_TYPE_CD = 'TIMEFIX'
		]]>	
  	</select>
  	
  	<select id="checkDuplicateWorktime" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT COUNT(*) AS workCnt FROM (
			SELECT 1 
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun} 
			   AND R.TIME_TYPE_CD <> 'GOBACK'
			   AND C.YMD BETWEEN SUBSTR(#{sdate},1,8) AND SUBSTR(#{edate},1,8)
			   AND (#{sdate} < F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') < #{edate})
			 UNION ALL
			SELECT 2 
			  FROM WTM_APPL A
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND O.SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND (#{sdate} < F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') AND F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') < #{edate})
			 UNION ALL
			SELECT 3 
			  FROM WTM_APPL A
			  JOIN WTM_OT_SUBS_APPL O
			    ON A.APPL_ID = O.APPL_ID
 			  JOIN WTM_OT_APPL B
			    ON O.OT_APPL_ID = B.OT_APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND B.SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND (#{sdate} < F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') AND F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') < #{edate})
			) X		]]>	
  	</select>
  	
  	<select id="checkDuplicateSubsWorktime" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT COUNT(*) AS workCnt FROM (
			SELECT 1 
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun} 
			   AND R.TIME_TYPE_CD != 'BASE'
			   AND ((F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') < #{edate} ) OR ( F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') > #{sdate} AND  F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') <= #{edate} ))
			 UNION ALL
			SELECT 2 
			  FROM WTM_APPL A
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND ((F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') < #{edate}) OR (F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') > #{sdate} AND F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') <= #{edate}))
			 UNION ALL
			SELECT 3 
			  FROM WTM_APPL A
			  JOIN WTM_OT_SUBS_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND ((F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') < #{edate}) OR (F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') > #{sdate} AND F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') <= #{edate}))
			) X
		]]>	
  	</select>
  	
  	<update id="createWorkteamOfWtmFlexibleEmp" parameterType="map">
		INSERT INTO WTM_FLEXIBLE_EMP(TENANT_ID, ENTER_CD, FLEXIBLE_STD_MGR_ID, SABUN, SYMD, EYMD, WORK_TYPE_CD, UPDATE_ID)
			SELECT M.TENANT_ID, M.ENTER_CD, M.FLEXIBLE_STD_MGR_ID, E.SABUN, M.SYMD, M.EYMD, S.WORK_TYPE_CD, #{updateId}
			  FROM WTM_WORKTEAM_MGR M
			  JOIN WTM_WORKTEAM_EMP E
			    ON M.WORKTEAM_MGR_ID = E.WORKTEAM_MGR_ID
			  JOIN WTM_FLEXIBLE_STD_MGR S
			    ON M.FLEXIBLE_STD_MGR_ID = S.FLEXIBLE_STD_MGR_ID
			 WHERE NOT EXISTS
				(
					SELECT * 
					  FROM WTM_FLEXIBLE_EMP F
					  JOIN WTM_FLEXIBLE_STD_MGR SM
					    ON F.FLEXIBLE_STD_MGR_ID = SM.FLEXIBLE_STD_MGR_ID
					 WHERE M.TENANT_ID = F.TENANT_ID
					   AND M.ENTER_CD = F.ENTER_CD
					   AND E.SABUN = F.SABUN
					   AND SM.BASE_WORK_YN = 'N'
					   AND ( M.SYMD BETWEEN F.SYMD AND F.EYMD
						OR M.EYMD BETWEEN F.SYMD AND F.EYMD )
				)
			   AND M.WORKTEAM_MGR_ID = #{workteamMgrId}
			   AND M.TENANT_ID = #{tenantId}
			   AND M.ENTER_CD = #{enterCd} 
			 
  	</update>
  	
  	<update id="updateWorkteamOfWtmFlexibleEmp" parameterType="map" >
  		UPDATE WTM_WORKTEAM_MGR M
  		  JOIN WTM_WORKTEAM_EMP E
		    ON M.WORKTEAM_MGR_ID = E.WORKTEAM_MGR_ID
		  JOIN WTM_FLEXIBLE_STD_MGR S
		    ON M.FLEXIBLE_STD_MGR_ID = S.FLEXIBLE_STD_MGR_ID
		  JOIN  WTM_FLEXIBLE_EMP F
		    ON M.TENANT_ID = F.TENANT_ID
		   AND M.ENTER_CD = F.ENTER_CD
		   AND E.SABUN = F.SABUN
		   AND M.FLEXIBLE_STD_MGR_ID = F.FLEXIBLE_STD_MGR_ID -- 중복된 사람에서 같은 근무제도의 변경일 경우 갱신하자
		   AND ( M.SYMD BETWEEN F.SYMD AND F.EYMD
				OR M.EYMD BETWEEN F.SYMD AND F.EYMD )
		   SET F.SYMD = M.SYMD
		     , F.EYMD = M.EYMD
		 WHERE  M.WORKTEAM_MGR_ID = #{workteamMgrId}
  	</update>
  	
  	<update id="createWtmWorkteamOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORKTEAM_CREATE( #{workteamMgrId}, #{pId} ) }
  	</update>
  	
  	<update id="resetWtmWorkteamOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_FLEXIBLE_EMP_RESET_BY_WORKTEAM( #{workteamMgrId}, #{sabun} , #{pId} ) }
  	</update>
  	
  	<update id="initWtmFlexibleEmpOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_FLEXIBLE_EMP_RESET( #{tenantId}, #{enterCd}, #{symd}, #{eymd}, #{sabun} , #{userId} ) }
  	</update>
  	
  	<update id="resetFixOtWtmWorkDayResultByFlexibleEmpId" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORK_DAY_RESULT_OTFIX_C( #{flexibleEmpId}, #{sYmd}, #{eYmd},#{userId} ) }
  	</update>
  	
  	<update id="calcFlexApplyEntryDatetimeByFlexibleEmpId" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORK_DAY_RESULT_CREATE_F( #{tenantId}, #{enterCd}, #{sabun}, #{sYmd}, #{eYmd},#{userId} ) }
  	</update>
  	
  	
  	<update id="resetNoPlanWtmWorkDayResultByFlexibleEmpIdWithFixOt" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORK_DAY_RESULT_CREATE_N( #{flexibleEmpId}, #{sYmd}, #{eYmd},#{userId} ) }
  	</update>
  	
  	<update id="resetWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORK_DAY_RESULT_RESET(#{tenantId}, #{enterCd}, #{pKey}, #{flexibleEmpId}, #{sYmd}, #{eYmd}, #{holExceptYn}, #{maxPattSeq}, #{pType}, #{userId}) }
  	</update>
  	
  	<update id="createWorkDayResultOfTimeType" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORK_DAY_RESULT_TIME_C(#{tenantId}, #{enterCd}, #{sabun} , #{sYmd}, #{eYmd} , #{taaInfoCd} , #{type} , #{userId}   ) }
  	</update>
  	
  	<!-- 계획을 작성 해야 하는 유연근무제 리스트 -->
  	<select id="getFlexibleEmpListForPlan" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.UNIT_MINUTE AS unitMinute
			     , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'WORK') AS totalWorkMinute
	 			 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'P', 'WORK') AS planWorkMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
    		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  LEFT OUTER JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND E.WORK_TYPE_CD IN ('SELE_F', 'SELE_C')
			   AND (#{sYmd} BETWEEN E.SYMD AND E.EYMD OR #{eYmd} BETWEEN E.SYMD AND E.EYMD)
			   -- AND (#{ymd} BETWEEN E.SYMD AND E.EYMD OR (#{ymd}<E.SYMD AND #{ymd}<E.EYMD))
			GROUP BY E.FLEXIBLE_EMP_ID, E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, E.EYMD
			ORDER BY sYmd
        ]]>
    </select>
    

    <select id="getDayResultByYmd" parameterType="map" resultType="hashmap" >
  	 	<![CDATA[
	    	SELECT C.WORK_DAY_RESULT_ID as workDayResultId
	    			, C.APPL_ID as applId
	    			, C.YMD as ymd
	    			, C.SABUN as sabun
	    			, #{timeCdMgrId} AS timeCdMgrId
	    			, C.TIME_TYPE_CD as timeTypeCd
	    			, C.TAA_CD as taaCd
	    			, F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, C.TAA_CD, C.YMD) AS taaNm
	    			, F_WTM_DATE_FORMAT(C.PLAN_SDATE, 'YMDHI') as planSdate
	    			, F_WTM_DATE_FORMAT(C.PLAN_EDATE, 'YMDHI') as planEdate
	    			, C.PLAN_MINUTE as planMinute
	    			, F_WTM_DATE_FORMAT(C.APPR_SDATE, 'YMDHI') as apprSdate
	    			, F_WTM_DATE_FORMAT(C.APPR_EDATE, 'YMDHI') as apprEdate
	    			, C.APPR_MINUTE as apprMinute
	    			, C.WORK_YN as workYn
			  FROM WTM_WORK_DAY_RESULT C
		    WHERE C.YMD = #{ymd} 
		       AND C.TENANT_ID = #{tenantId} 
			   AND C.ENTER_CD = #{enterCd} 
			   AND C.SABUN = #{sabun} 
		]]>
    </select>
    
    <!--해당 기간의 근무 정보 -->
  	<select id="getFlexibleEmpWebList" parameterType="map" resultType="map">
  	<![CDATA[
  		SELECT F_WTM_GET_ORG_NM(A.TENANT_ID, A.ENTER_CD, C.ORG_CD, C.SYMD) AS orgNm
			  , A.SABUN AS sabun
			  , C.EMP_NM AS empNm 
			  , B.WORK_TYPE_CD AS workTypeCd
			  , B.FLEXIBLE_NM AS flexibleNm
			  , A.SYMD AS symd
			  , A.EYMD AS eymd
			  , A.NOTE AS note
			  , A.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			  , A.FLEXIBLE_EMP_ID AS flexibleEmpId
			  , CASE WHEN B.WORK_TYPE_CD NOT IN ('BASE', 'WORKTEAM') AND A.EYMD >= F_WTM_DATE_FORMAT(NOW(), 'YMD') THEN CONCAT('<a class="basic" onClick="setModify(', FLEXIBLE_EMP_ID, ')">근무변경/취소</a>')
					    ELSE '' END AS modify
			  , CASE WHEN C.STATUS_CD IN ('CA','RA') AND C.SYMD IS NOT NULL AND C.EYMD IS NOT NULL 
			  					AND ((A.SYMD <= C.SYMD AND C.SYMD< A.EYMD) OR (A.SYMD <= C.EYMD AND C.EYMD< A.EYMD)) THEN CONCAT('<a class="basic" onClick="setRetire(', FLEXIBLE_EMP_ID, ')">퇴직처리</a>')
		 			   ELSE '' END AS retire
		  FROM WTM_FLEXIBLE_EMP A
		 INNER JOIN WTM_FLEXIBLE_STD_MGR B
		    ON A.FLEXIBLE_STD_MGR_ID = B.FLEXIBLE_STD_MGR_ID
		   AND A.TENANT_ID = B.TENANT_ID
		   AND A.ENTER_CD = B.ENTER_CD
		 INNER JOIN WTM_EMP_HIS C
		    ON A.TENANT_ID = C.TENANT_ID
		   AND A.ENTER_CD = C.ENTER_CD
		   AND A.SABUN = C.SABUN
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.SYMD <= REPLACE(#{eYmd}, '-', '') 
		   AND A.EYMD >= REPLACE(#{sYmd}, '-', '') 
		   AND IF(#{searchKeyword}='',1=1,(C.SABUN = #{searchKeyword} OR C.EMP_NM LIKE CONCAT(#{searchKeyword}, '%')))
		   AND IF(#{searchWorkTypeCd}='',1=1,(B.WORK_TYPE_CD = #{searchWorkTypeCd}))
		   AND (C.TENANT_ID, C.ENTER_CD, C.SABUN, C.SYMD) IN  ( SELECT TENANT_ID, ENTER_CD, SABUN, MAX(SYMD)
												                 FROM WTM_EMP_HIS
												                WHERE TENANT_ID = A.TENANT_ID
												                  AND ENTER_CD = A.ENTER_CD
												                  AND SABUN = A.SABUN
												                  AND (A.SYMD BETWEEN SYMD AND EYMD OR A.EYMD BETWEEN SYMD AND EYMD)
																	GROUP BY TENANT_ID, ENTER_CD, SABUN )
  		]]>
  		  <if test="orgList!=null">
		   AND C.ORG_CD IN (NULL, 
	       <foreach collection="orgList" item="org" separator=", ">
			   #{org}
		   </foreach>
		   )
		   </if>
  	</select>
  	
    <update id="createWorkTermBySabunAndSymdAndEymd" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_FLEXIBLE_EMP_WORKTERM_C( #{tenantId}, #{enterCd}, #{sabun}, #{symd}, #{eymd}, #{pId} ) }
  	</update>
  	
  	<select id="findWorkDayResultMinMaxByYmdAndTimeTypeCdBySabun" parameterType="map" resultType="hashmap">
  		<![CDATA[
  			SELECT YMD, MIN(PLAN_SDATE) AS PLAN_SDATE, MAX(PLAN_EDATE) AS PLAN_EDATE
			  FROM WTM_WORK_DAY_RESULT
			 WHERE TENANT_ID = #{tenantId}
			   AND ENTER_CD = #{enterCd}
			   AND SABUN = #{sabun}
			   AND YMD = #{ymd}
			   AND TIME_TYPE_CD = #{timeTypeCd}
  		]]>
  	</select>
  	
  	<update id="createFlexibleApplDet" parameterType="map">
	    INSERT INTO WTM_FLEXIBLE_APPL_DET(FLEXIBLE_APPL_ID, YMD, TIME_CD_MGR_ID, , UPDATE_ID)
	    	SELECT F.FLEXIBLE_APPL_ID, D.SUN_YMD, P.TIME_CD_MGR_ID, #{userId}
			  FROM WTM_APPL A
			  JOIN WTM_FLEXIBLE_APPL F
			    ON A.APPL_ID = F.APPL_ID
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON A.APPL_CD = M.WORK_TYPE_CD
			   AND A.TENANT_ID = M.TENANT_ID
			   AND A.ENTER_CD = M.ENTER_CD
			  JOIN WTM_DAY_MGR D
			    ON D.SUN_YMD BETWEEN F.SYMD AND F.EYMD
			  JOIN WTM_WORK_PATT_DET P
			    ON P.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			   AND F_WTM_WEEKDAY(D.SUN_YMD) = P.SEQ
			  JOIN WTM_TIME_CD_MGR T
			    ON P.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  LEFT OUTER JOIN WTM_WORK_CALENDAR C
			    ON C.YMD = D.SUN_YMD
			   AND C.SABUN = A.APPL_SABUN
			   AND A.ENTER_CD = C.TENANT_ID
			   AND A.TENANT_ID = C.TENANT_ID
			 WHERE F.FLEXIBLE_APPL_ID = #{flexibleApplId}
			   AND C.YMD IS NULL
    </update>
    
    <update id="deleteByApplId" parameterType="Long">
		DELETE E 
		FROM WTM_FLEXIBLE_EMP E 
		JOIN ( SELECT A.TENANT_ID
		            , A.ENTER_CD
		            , A.APPL_SABUN
		            , F.*
			     FROM WTM_APPL A 
				 JOIN WTM_FLEXIBLE_APPL F 
				   ON A.APPL_ID = F.APPL_ID 
				WHERE A.APPL_ID = #{applId}) S
		  ON S.TENANT_ID = E.TENANT_ID 
		  AND S.ENTER_CD = E.ENTER_CD 
		  AND S.APPL_SABUN = E.SABUN
		  AND S.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
		  AND S.SYMD = E.SYMD
		  AND S.EYMD = E.EYMD
	</update>
	
	<!-- 계획을 작성 해야 하는 유연근무제 리스트 -->
  	<select id="getFlexibleListForPlan" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , M.FLEXIBLE_NM AS flexibleNm
			     , E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , CASE WHEN C.APPL_CODE_ID IS NULL THEN M.FLEXIBLE_NM ELSE C.APPL_NM END AS workTypeNm
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_CHK_YN AS coreChkYn
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.UNIT_MINUTE AS unitMinute
			     , M.TODAY_PLAN_EDIT_YN AS todayPlanEditYn
			     , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, 'T', 'WORK') AS totalWorkMinute
	 			 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, 'P', 'WORK') AS planWorkMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
    		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
    		  LEFT OUTER JOIN WTM_APPL_CODE C
			    ON C.ENTER_CD = M.ENTER_CD
			   AND C.TENANT_ID = M.TENANT_ID
			   AND M.WORK_TYPE_CD = C.APPL_CD
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
	]]>
			<choose>
			    <when test="flexibleEmpId!=null and flexibleEmpId!=''">
			    	AND E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			 	</when>
			 	<otherwise>
			 		AND E.WORK_TYPE_CD IN ('SELE_F', 'SELE_C') 
			   		AND (#{ymd} BETWEEN E.SYMD AND E.EYMD OR (#{ymd}&lt;E.SYMD AND #{ymd}&lt;E.EYMD))
			 	</otherwise>
			</choose>
			ORDER BY sYmd
    </select>
    
    <select id="getPlanByFlexibleEmpId" parameterType="map" resultType="map" >
    	<![CDATA[
    	SELECT C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, 'H:I') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END 
		       - CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE!='' THEN F_WTM_NVL(B.APPR_MINUTE,0) ELSE F_WTM_NVL(B.PLAN_MINUTE,0) END AS minute
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
           	 , T.TIME_NM AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		  LEFT OUTER JOIN (SELECT TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD
		                        , SUM(PLAN_MINUTE) AS PLAN_MINUTE
								, SUM(APPR_MINUTE) AS APPR_MINUTE
		                      FROM WTM_WORK_DAY_RESULT 
									WHERE TENANT_ID = #{tenantId}
									  AND ENTER_CD = #{enterCd}
									  AND SABUN = #{sabun}
									  AND TIME_TYPE_CD = 'EXCEPT'
		                       AND TAA_CD IN ('BREAK','BREAK_FIXOT') 
								  GROUP BY TENANT_ID, ENTER_CD, SABUN, YMD, TIME_TYPE_CD, TAA_CD) B
		    ON R.TENANT_ID = B.TENANT_ID
		   AND R.ENTER_CD = B.ENTER_CD
		   AND R.YMD = B.YMD
		   AND R.SABUN = B.SABUN
		   AND B.TAA_CD = (CASE WHEN R.TIME_TYPE_CD='BASE' THEN 'BREAK' WHEN R.TIME_TYPE_CD='FIXOT' THEN 'BREAK_FIXOT' END)
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		   AND (R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD <> 'EXCEPT')
		 ORDER BY ymd, shm
		 ]]>
    </select>
    
    <select id="getMaxPlanEdate" parameterType="map" resultType="Date" >
    	<![CDATA[
    		SELECT MAX(PLAN_EDATE) AS maxEdate
		      FROM WTM_WORK_DAY_RESULT
		     WHERE TENANT_ID = #{tenantId}
		       AND ENTER_CD = #{enterCd}
		       AND SABUN = #{sabun}
		       AND YMD = #{ymd}
		       AND TIME_TYPE_CD = #{timeTypeCd}
    	]]>
    </select>
    
    <select id="getIntervalDateTime" parameterType="map" resultType="Date" >
    	<![CDATA[ 
    		SELECT F_WTM_DATE_ADD(F_WTM_TO_DATE(#{yyyyMMddHHmmss},'YMDHIS'), #{intervalMinute} + SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.EDATE, 'HI'), '' ))
				, 'I' ) AS EDATE
				  FROM WTM_WORK_CALENDAR C
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				  JOIN WTM_TIME_BREAK_MGR B
				    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
				  JOIN (SELECT F_WTM_TO_DATE(#{yyyyMMddHHmmss}, 'YMDHIS') AS SDATE, F_WTM_DATE_ADD(F_WTM_TO_DATE(#{yyyyMMddHHmmss}, 'YMDHIS'),  #{intervalMinute} ,'I') AS EDATE ) D
				    ON 1=1
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.SABUN = #{sabun}
				   AND C.YMD = #{ymd}
    	]]>
    </select>
    
    <!-- 계획을 작성 해야 하는 탄근제 -->
  	<select id="getElasForPlan" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT F.FLEXIBLE_APPL_ID AS flexibleApplId
			     , A.APPL_ID AS applId
			     , A.APPL_STATUS_CD AS applStatusCd
			     , M.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			     , M.FLEXIBLE_NM AS flexibleNm
			     , A.TENANT_ID AS tenantId
			     , A.ENTER_CD AS enterCd
			     , A.APPL_SABUN AS sabun
			     , F.SYMD AS sYmd
			     , F.EYMD AS eYmd
			     , F.REASON AS reason
			     , A.APPL_CD AS workTypeCd
			     , C.APPL_NM AS workTypeNm
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.UNIT_MINUTE AS unitMinute
			  FROM WTM_FLEXIBLE_APPL F
			  JOIN WTM_APPL A
			    ON F.APPL_ID = A.APPL_ID
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON F.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_APPL_CODE C
			    ON C.ENTER_CD = M.ENTER_CD
			   AND C.TENANT_ID = M.TENANT_ID
			   AND M.WORK_TYPE_CD = C.APPL_CD
			 WHERE FLEXIBLE_APPL_ID = #{flexibleApplId}
			ORDER BY sYmd
		]]>
    </select>
    
    <select id="getElasPlanByFlexibleApplId" parameterType="map" resultType="map" >
    	<![CDATA[
    		SELECT *
			  FROM (  SELECT YMD AS ymd
							     , F_WTM_DATE_FORMAT(OTB_SDATE, 'H:I') AS shm
							     , F_WTM_DATE_FORMAT(OTB_EDATE, 'H:I') AS ehm
							     , OTB_MINUTE AS minute
								  , 'OTB' AS timeTypeCd
							     , NULL AS taaCd
							     , NULL AS taaNm
							     , HOLIDAY_YN AS holidayYn
							     , D.TIME_CD_MGR_ID AS timeCdMgrId
							     , M.TIME_NM AS timeNm
							  FROM WTM_FLEXIBLE_APPL_DET D
							  JOIN WTM_TIME_CD_MGR M
							    ON D.TIME_CD_MGR_ID = M.TIME_CD_MGR_ID
							 WHERE FLEXIBLE_APPL_ID = #{flexibleApplId}
							   AND OTB_MINUTE IS NOT NULL 
								AND OTB_SDATE < PLAN_SDATE 
							UNION
							SELECT YMD AS ymd
							     , F_WTM_DATE_FORMAT(PLAN_SDATE, 'H:I') AS shm
							     , F_WTM_DATE_FORMAT(PLAN_EDATE, 'H:I') AS ehm
							     , PLAN_MINUTE AS minute
								  , 'BASE' AS timeTypeCd
							     , NULL AS taaCd
							     , NULL AS taaNm
							     , HOLIDAY_YN AS holidayYn
							     , D.TIME_CD_MGR_ID AS timeCdMgrId
							     , M.TIME_NM AS timeNm
							  FROM WTM_FLEXIBLE_APPL_DET D
							  JOIN WTM_TIME_CD_MGR M
							    ON D.TIME_CD_MGR_ID = M.TIME_CD_MGR_ID
							 WHERE FLEXIBLE_APPL_ID = #{flexibleApplId}
							UNION
							SELECT YMD AS ymd
							     , F_WTM_DATE_FORMAT(OTA_SDATE, 'H:I') AS shm
							     , F_WTM_DATE_FORMAT(OTA_EDATE, 'H:I') AS ehm
							     , OTA_MINUTE AS minute
								  , 'OTA' AS timeTypeCd
							     , NULL AS taaCd
							     , NULL AS taaNm
							     , HOLIDAY_YN AS holidayYn
							     , D.TIME_CD_MGR_ID AS timeCdMgrId
							     , M.TIME_NM AS timeNm
							  FROM WTM_FLEXIBLE_APPL_DET D
							  JOIN WTM_TIME_CD_MGR M
							    ON D.TIME_CD_MGR_ID = M.TIME_CD_MGR_ID
							 WHERE FLEXIBLE_APPL_ID = #{flexibleApplId}
							   AND OTA_MINUTE IS NOT NULL 
								AND PLAN_EDATE < OTA_EDATE ) T
			ORDER BY T.ymd, shm
    	]]>
    </select>
    
    <!-- 탄근제 근무 계획 하나의 ROW를 BASE와 OT로 분리 -->
    <select id="getElasWorkDayResult" parameterType="map" resultType="map" >
    	<![CDATA[
    	SELECT YMD AS ymd
		     , F_WTM_DATE_FORMAT(PLAN_SDATE,'YMDHIS') AS planSdate
		     , F_WTM_DATE_FORMAT(PLAN_EDATE,'YMDHIS') AS planEdate
		     , PLAN_MINUTE AS planMinute
			  , TIME_TYPE_CD AS timeTypeCd
		  FROM ( SELECT YMD
					     , 'OT' AS TIME_TYPE_CD
					     , OTB_SDATE AS PLAN_SDATE
					     , OTB_EDATE AS PLAN_EDATE
					     , OTB_MINUTE AS PLAN_MINUTE
					  FROM ${tableName} D
					 WHERE ${key} = ${value}
					   AND HOLIDAY_YN = 'N'
					   AND (D.OTB_MINUTE IS NOT NULL AND D.OTB_MINUTE<>0)
					UNION
					SELECT YMD
					     , 'BASE' AS TIME_TYPE_CD
					     , PLAN_SDATE AS PLAN_SDATE
					     , PLAN_EDATE AS PLAN_EDATE
					     , PLAN_MINUTE AS PLAN_MINUTE
					  FROM ${tableName} D
					 WHERE ${key} = ${value}
					   AND HOLIDAY_YN = 'N'
					UNION
					SELECT YMD
					     , 'OT' AS TIME_TYPE_CD
					     , OTA_SDATE AS PLAN_SDATE
					     , OTA_EDATE AS PLAN_EDATE
					     , OTA_MINUTE AS PLAN_MINUTE
					  FROM ${tableName} D
					 WHERE ${key} = ${value}
					   AND (D.OTA_MINUTE IS NOT NULL AND D.OTA_MINUTE<>0)
					   AND HOLIDAY_YN = 'N'
				   UNION
					SELECT YMD
					     , 'OT' AS TIME_TYPE_CD
					     , CASE WHEN OTB_MINUTE IS NOT NULL AND OTB_MINUTE<>0 THEN OTB_SDATE ELSE PLAN_SDATE END AS PLAN_SDATE
					     , CASE WHEN OTA_MINUTE IS NOT NULL AND OTA_MINUTE<>0 THEN OTA_EDATE ELSE PLAN_EDATE END AS PLAN_EDATE
					     , CASE WHEN OTB_MINUTE IS NOT NULL AND OTB_MINUTE<>0 THEN OTB_MINUTE ELSE 0 END
						    + CASE WHEN PLAN_MINUTE IS NOT NULL AND PLAN_MINUTE<>0 THEN PLAN_MINUTE ELSE 0 END 
							 + CASE WHEN OTA_MINUTE IS NOT NULL AND OTA_MINUTE<>0 THEN OTA_MINUTE ELSE 0 END AS PLAN_MINUTE
					  FROM ${tableName} D
					 WHERE ${key} = ${value}
					   AND HOLIDAY_YN = 'Y'
				 ) S
		ORDER BY YMD, PLAN_SDATE
		 ]]>
    </select>
    
    <select id="getElasAvgHour" parameterType="map" resultType="map" >
    	<![CDATA[
    		SELECT ROUND(SUM(CASE WHEN HOLIDAY_YN = 'N' AND PLAN_MINUTE IS NULL THEN 0 ELSE PLAN_MINUTE END) / COUNT(YMD) * 7,2) AS avgHour
			  FROM WTM_FLEXIBLE_APPL_DET
			 WHERE FLEXIBLE_APPL_ID = #{flexibleApplId}
			GROUP BY FLEXIBLE_APPL_ID
    	]]>
    </select>
    
	<select id="getElasWeekHour" parameterType="map" resultType="map" >
    	<![CDATA[
    		SELECT START_YMD AS startYmd
    		     , SUM(CASE WHEN HOLIDAY_YN = 'N' AND PLAN_MINUTE IS NOT NULL AND PLAN_MINUTE<>0 THEN PLAN_MINUTE ELSE 0 END) AS workMinute
			     , SUM(CASE WHEN HOLIDAY_YN = 'Y' AND PLAN_MINUTE IS NOT NULL AND PLAN_MINUTE<>0 THEN PLAN_MINUTE ELSE 0 END)
				     + SUM(CASE WHEN OTB_MINUTE IS NOT NULL AND OTB_MINUTE<>0 THEN OTB_MINUTE ELSE 0 END)
				     + SUM(CASE WHEN OTA_MINUTE IS NOT NULL AND OTA_MINUTE<>0 THEN OTA_MINUTE ELSE 0 END) AS otMinute
			  FROM ( SELECT YMD
						     , HOLIDAY_YN
							  , DATE_SUB(YMD, INTERVAL (CASE WHEN DAYOFWEEK(YMD)<startWeekDay THEN maxWeekDay-DAYOFWEEK(YMD) ELSE DAYOFWEEK(YMD)-startWeekDay END) DAY) AS START_YMD
							  , PLAN_MINUTE
							  , OTB_MINUTE
							  , OTA_MINUTE
						  FROM ${tableName} D
						  JOIN ( SELECT F_WTM_WEEKDAY(MIN(YMD)) AS startWeekDay , MAX(F_WTM_WEEKDAY(YMD)) AS maxWeekDay 
						           FROM ${tableName}
						          WHERE ${key} = ${value} ) T  
						    ON 1=1
						 WHERE ${key} = ${value} ) S
			GROUP BY START_YMD
    	]]>
    </select>
    
    <select id="getElasOtHm" parameterType="map" resultType="map" >
    	<![CDATA[
			SELECT YMD as ymd
			     , TIME_CD_MGR_ID as timeCdMgrId
			     , F_WTM_DATE_FORMAT(CASE WHEN #{otType} = 'OTB' THEN F_WTM_DATE_ADD(F_WTM_TO_DATE(#{sDate},'YMDHI'), -#{minute},'I') ELSE F_WTM_TO_DATE(#{eDate},'YMDHI') END, 'YMDHIS') AS sDate
				 , F_WTM_DATE_FORMAT(CASE WHEN #{otType} = 'OTB' THEN F_WTM_TO_DATE(#{sDate},'YMDHI') ELSE F_WTM_DATE_ADD(F_WTM_TO_DATE(#{eDate},'YMDHI'), #{minute}, 'I') END, 'YMDHIS') AS eDate
			  FROM ${tableName} D
			 WHERE ${key} = ${value}
			   AND D.YMD = #{ymd}
    	]]>
    </select>

    <select id="getChangeChk" statementType="CALLABLE" parameterType="map" >
  		{ call P_WTM_FLEXIBLE_MODIFY_CHK( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
			  , #{flexibleEmpId, jdbcType=BIGINT, javaType=java.lang.Integer, mode=IN}
			  , #{changeType, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
			  , #{sYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
			  , #{eYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
			  , #{userId, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
			  , #{hisId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}		
			  , #{retId,jdbcType=BIGINT, javaType=java.lang.Long, mode=OUT}
		) }
  	</select>
  	
  	<update id="deleteByflexibleEmpId" parameterType="map">
		DELETE E 
		FROM WTM_FLEXIBLE_EMP E 
	    WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
	</update>
	
	<update id="updateByflexibleEmpId" parameterType="map">
		UPDATE WTM_FLEXIBLE_EMP SET
			SYMD = #{symd}
			, EYMD = #{eymd}
	    WHERE FLEXIBLE_EMP_ID = #{flexibleEmpId}
	</update>
	
	<update id="setChangeErrMsg" parameterType="map">
		UPDATE WTM_FLEXIBLE_CHG_HIS SET
			ERR_MSG = #{retMsg}
	    WHERE FLEXIBLE_CHG_HIS_ID = #{retId}
	</update>
	
	<update id="setChangeEndMsg" parameterType="map">
		UPDATE WTM_FLEXIBLE_CHG_HIS SET
			END_MSG = #{retMsg}
	    WHERE FLEXIBLE_CHG_HIS_ID = #{hisId}
	</update>
	
	<select id="getTemporaryWorkResult" parameterType="map" resultType="hashmap">
    	<![CDATA[
			SELECT *
			  FROM WTM_FLEXIBLE_STD_MGR M
			  JOIN WTM_FLEXIBLE_EMP E
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE C.TENANT_ID = #{tenantId}
			   AND C.ENTER_CD = #{enterCd}
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND R.TIME_TYPE_CD = 'BASE'
			   AND T.LATE_CHK_YN = 'Y'
			   AND C.ENTRY_SDATE IS NOT NULL
			   AND C.ENTRY_EDATE IS NOT NULL
			   AND C.YMD NOT IN (SELECT DISTINCT SR.YMD 
								   FROM WTM_WORK_DAY_RESULT SR 
								   WHERE SR.TENANT_ID = R.TENANT_ID 
								   AND SR.ENTER_CD = R.ENTER_CD 
								   AND SR.SABUN = R.SABUN 
								   AND SR.TIME_TYPE_CD = #{timeTypeCd}
								   AND SR.TAA_CD = #{taaCd}
								   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd})
			   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
			 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
				 , C.ENTRY_SDATE, C.ENTRY_EDATE
			 HAVING MIN(R.PLAN_SDATE) < MIN(R.APPR_SDATE)
    	]]>
    </select>
    
	<!--해당 기간의 근무 정보 -->
  	<select id="getFlexibleRangeInfoMobile" parameterType="map" resultType="map">
		 SELECT 
		 	  X.WORK_TYPE_CD AS workTypeCd 
		 	, X.TODAY_PLAN_EDIT_YN AS todayPlanEditYn
			, X.WORK_SHM AS workShm
			, X.WORK_EHM AS workEhm
			, X.CORE_SHM AS coreShm
			, X.CORE_EHM AS coreEhm
			, CASE WHEN #{ymd} > F_WTM_DATE_FORMAT(now(), 'YMD') THEN 'Y'
				   WHEN #{ymd} = F_WTM_DATE_FORMAT(now(), 'YMD') AND X.TODAY_PLAN_EDIT_YN = 'Y' THEN 'Y'
			ELSE 'N' END as editYn
		 	, CASE WHEN WORK_TYPE_CD IN ('SELE_C', 'SELE_F') THEN '선근제'
			       WHEN WORK_TYPE_CD = 'EALS' THEN '탄근제'
			       WHEN WORK_TYPE_CD = 'DIFF' THEN '시차근무'
			       WHEN WORK_TYPE_CD = 'WORKTEAM' THEN '근무조'
			       ELSE '기본근무' END AS param1
			, CONCAT(LEFT(sYmd, 4), '.', SUBSTRING(sYmd, 5, 2), '.', SUBSTRING(sYmd, 7, 2)) as param21
			, CONCAT(LEFT(eYmd, 4), '.', SUBSTRING(eYmd, 5, 2), '.', SUBSTRING(eYmd, 7, 2)) as param31
			, CONCAT(SUBSTRING(sYmd, 5, 2), '.', SUBSTRING(sYmd, 7, 2)) as param2
			, CONCAT(SUBSTRING(eYmd, 5, 2), '.', SUBSTRING(eYmd, 7, 2)) as param3
			, TIME_FORMAT(SEC_TO_TIME(totalWorkMinute*60), '%H:%i') as param4
			, TIME_FORMAT(SEC_TO_TIME(restWorkMinute*60), '%H:%i') as param5
			, TIME_FORMAT(SEC_TO_TIME(restOtMinute*60), '%H:%i') as param6
			, TIME_FORMAT(SEC_TO_TIME(usedWorkMinute*60), '%H:%i') as param10   
			FROM (SELECT
					M.WORK_SHM, M.WORK_EHM, M.CORE_SHM, M.CORE_EHM, M.TODAY_PLAN_EDIT_YN
			      , M.FLEXIBLE_NM AS flexibleNm
				  , CASE WHEN M.WORK_TYPE_CD NOT IN ('SELE_F','SELE_C') THEN T.WEEK_SDATE ELSE E.SYMD END AS sYmd
				  , CASE WHEN M.WORK_TYPE_CD NOT IN ('SELE_F','SELE_C') THEN T.WEEK_EDATE ELSE E.EYMD END AS eYmd
				  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'WORK') AS totalWorkMinute
				  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'WORK') AS restWorkMinute
				  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'U', 'WORK') AS usedWorkMinute
				  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'OT') AS restOtMinute
				  , E.WORK_TYPE_CD
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
				 ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  LEFT OUTER JOIN WTM_WORK_TERM_TIME T
			    ON E.TENANT_ID = T.TENANT_ID
			   AND E.ENTER_CD = T.ENTER_CD
			   AND E.SABUN = T.SABUN
			   AND #{ymd} BETWEEN T.FLEXIBLE_SDATE AND T.FLEXIBLE_EDATE
			   AND #{ymd} BETWEEN T.WEEK_SDATE AND T.WEEK_EDATE
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND #{ymd} BETWEEN E.SYMD AND E.EYMD ) X
  	</select>
  	
  	<select id="getWorkTermMinute" parameterType="map" resultType="map">
		 SELECT F_WTM_GET_WORK_MINUTE(${tenantId}, #{enterCd}, #{sabun}, #{ymd}, 'T', 'WORK') AS totalWorkMinute
	 		  ,	F_WTM_GET_WORK_MINUTE(${tenantId}, #{enterCd}, #{sabun}, #{ymd}, 'P', 'WORK') AS planWorkMinute
	 	   FROM DUAL
  	</select>
  	
  	<select id="calcMinute" parameterType="map" resultType="map">
  		SELECT F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') AS calcMinute, 0 as breakMinute
  	</select>
  	
  	<select id="calcTimeBreakMinute" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT CAST((APPR_MINUTE  - 
	    CASE WHEN XZ.APPR_MINUTE BETWEEN XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE AND XZ.PRE_WORK_MINUTE + IFNULL(XZ.BREAK_MINUTE,0)  THEN XZ.PRE_WORK_MINUTE
				  WHEN (XZ.APPR_MINUTE ) < IFNULL(XZ.BREAK_MINUTE,0) THEN 0
				  ELSE (XZ.APPR_MINUTE ) - IFNULL(XZ.BREAK_MINUTE,0)
                    END) AS signed integer) AS breakMinute
			FROM ( 
         SELECT ZZ.APPR_MINUTE
			, CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.PRE_WORK_MINUTE, ZZ.WORK_MINUTE) ELSE ZZ.PRE_WORK_MINUTE END AS PRE_WORK_MINUTE
            , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.PRE_BREAK_MINUTE, ZZ.BREAK_MINUTE) ELSE ZZ.PRE_BREAK_MINUTE END AS PRE_BREAK_MINUTE
            , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.WORK_MINUTE, ZZ.PRE_WORK_MINUTE) ELSE ZZ.WORK_MINUTE END AS WORK_MINUTE
            , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.BREAK_MINUTE, ZZ.PRE_BREAK_MINUTE) ELSE ZZ.BREAK_MINUTE END AS BREAK_MINUTE
            FROM (
			SELECT XX.APPR_MINUTE
			     , MAX(B.WORK_MINUTE) AS PRE_WORK_MINUTE, MAX(B.BREAK_MINUTE) AS PRE_BREAK_MINUTE
				  , MIN(BB.WORK_MINUTE) AS WORK_MINUTE, MIN(BB.BREAK_MINUTE) AS BREAK_MINUTE
              , COUNT(BBB.TIME_CD_MGR_ID) AS CNT 
			FROM (
			SELECT T.TIME_CD_MGR_ID
				,SUM(F_WTM_CALC_MINUTE(D.SHM, D.EHM, '','','') )AS APPR_MINUTE
				  FROM WTM_FLEXIBLE_EMP E
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
			       AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN (SELECT #{shm} AS SHM
				             , #{ehm} AS EHM
				         FROM DUAL) D 
				    ON 1=1
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
				   AND T.BREAK_TYPE_CD = #{breakTypeCd}
				   AND E.TENANT_ID = #{tenantId}
				   AND E.ENTER_CD = #{enterCd}
			       AND D.SHM IS NOT NULL AND D.EHM IS NOT NULL
				   AND E.SABUN = #{sabun}
				   AND C.YMD = #{ymd}
				   GROUP BY T.TIME_CD_MGR_ID
				   ) XX
				  LEFT OUTER JOIN WTM_TIME_BREAK_TIME B
				    ON XX.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			        AND (B.WORK_MINUTE + B.BREAK_MINUTE) < XX.APPR_MINUTE
				  LEFT OUTER JOIN WTM_TIME_BREAK_TIME BB
				    ON XX.TIME_CD_MGR_ID = BB.TIME_CD_MGR_ID 
			        AND (BB.WORK_MINUTE + BB.BREAK_MINUTE) >= XX.APPR_MINUTE
              	  LEFT OUTER JOIN WTM_TIME_BREAK_TIME BBB
                	ON XX.TIME_CD_MGR_ID = BBB.TIME_CD_MGR_ID 
			    ) ZZ
			 ) XZ
		]]>
  	</select>
  	
  	<select id="calcTimeBreakMinuteForElas" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT CAST((APPR_MINUTE  - 
	    CASE WHEN XZ.APPR_MINUTE BETWEEN XZ.PRE_WORK_MINUTE + XZ.PRE_BREAK_MINUTE AND XZ.PRE_WORK_MINUTE + IFNULL(XZ.BREAK_MINUTE,0)  THEN XZ.PRE_WORK_MINUTE
				  WHEN (XZ.APPR_MINUTE ) < IFNULL(XZ.BREAK_MINUTE,0) THEN 0
				  ELSE (XZ.APPR_MINUTE ) - IFNULL(XZ.BREAK_MINUTE,0)
                    END) AS signed integer) AS breakMinute
			FROM (
			SELECT ZZ.APPR_MINUTE
			     , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.PRE_WORK_MINUTE, ZZ.WORK_MINUTE) ELSE ZZ.PRE_WORK_MINUTE END AS PRE_WORK_MINUTE
            , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.PRE_BREAK_MINUTE, ZZ.BREAK_MINUTE) ELSE ZZ.PRE_BREAK_MINUTE END AS PRE_BREAK_MINUTE
            , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.WORK_MINUTE, ZZ.PRE_WORK_MINUTE) ELSE ZZ.WORK_MINUTE END AS WORK_MINUTE
            , CASE WHEN ZZ.CNT = 1 THEN F_WTM_NVL(ZZ.BREAK_MINUTE, ZZ.PRE_BREAK_MINUTE) ELSE ZZ.BREAK_MINUTE END AS BREAK_MINUTE
         FROM (
			SELECT XX.APPR_MINUTE
			     , MAX(B.WORK_MINUTE) AS PRE_WORK_MINUTE, MAX(B.BREAK_MINUTE) AS PRE_BREAK_MINUTE
				  , MIN(BB.WORK_MINUTE) AS WORK_MINUTE, MIN(BB.BREAK_MINUTE) AS BREAK_MINUTE
              , COUNT(BBB.TIME_CD_MGR_ID) AS CNT 
			FROM (
			SELECT T.TIME_CD_MGR_ID ,
						      SUM(F_WTM_CALC_MINUTE(D.SHM, D.EHM, '','','') )AS APPR_MINUTE 
						 FROM ${tableName} A
						 JOIN (SELECT #{shm} AS SHM , #{ehm} AS EHM FROM DUAL) D 
						   ON 1=1 
						 JOIN WTM_TIME_CD_MGR T 
						   ON A.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID 
						WHERE T.BREAK_TYPE_CD = #{breakTypeCd} 
						  AND ${key} = ${value}
						  AND D.SHM IS NOT NULL 
						  AND D.EHM IS NOT NULL 
						  AND A.YMD = #{ymd}
						  GROUP BY T.TIME_CD_MGR_ID
				   ) XX
				  LEFT OUTER JOIN WTM_TIME_BREAK_TIME B
				    ON XX.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			        AND (B.WORK_MINUTE + B.BREAK_MINUTE) < XX.APPR_MINUTE
				  LEFT OUTER JOIN WTM_TIME_BREAK_TIME BB
				    ON XX.TIME_CD_MGR_ID = BB.TIME_CD_MGR_ID 
			        AND (BB.WORK_MINUTE + BB.BREAK_MINUTE) >= XX.APPR_MINUTE
			     LEFT OUTER JOIN WTM_TIME_BREAK_TIME BBB
                	ON XX.TIME_CD_MGR_ID = BBB.TIME_CD_MGR_ID 
            ) ZZ
			 ) XZ
		]]>
  	</select>
  	
   	<update id="deleteResult" parameterType="hashmap">
		DELETE FROM WTM_WORK_DAY_RESULT 
		WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND YMD = #{stdYmd}
		   AND TIME_TYPE_CD IN ('BASE', 'FIXOT', 'EXCEPT')
	</update>
	
	<update id="updateResultAppr" parameterType="hashmap">
		UPDATE WTM_WORK_DAY_RESULT 
		SET APPR_SDATE = NULL, APPR_EDATE = NULL, APPR_MINUTE = NULL
		WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND YMD = #{stdYmd}
		   AND TIME_TYPE_CD != ('GOBACK')
	</update>
	
	<select id="getResultBySabunAndYmdAndTimeTypeCds" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT F_WTM_GET_EMP_DAY_OPTION(C.TENANT_ID, C.ENTER_CD, C.SABUN, C.YMD, 'UNPLANNED_YN') as unplannedYn, 
				   C.HOLIDAY_YN as holidayYn, 
				   C.YMD as ymd,
				   F_WTM_DATE_FORMAT(C.ENTRY_SDATE,'YMDHIS') AS entrySdate,
				   F_WTM_DATE_FORMAT(C.ENTRY_EDATE,'YMDHIS') AS entryEdate,
				   R.TIME_TYPE_CD AS timeTypeCd,
				   R.TAA_CD AS taaCd,
				   F_WTM_DATE_FORMAT(R.PLAN_SDATE,'YMDHIS') AS planSdate,
				   F_WTM_DATE_FORMAT(R.PLAN_EDATE,'YMDHIS') AS planEdate,
				   R.PLAN_MINUTE AS planMinute,
				   F_WTM_DATE_FORMAT(R.APPR_SDATE,'YMDHIS') AS apprSdate,
				   F_WTM_DATE_FORMAT(R.APPR_EDATE,'YMDHIS') AS apprEdate,
				   R.APPR_MINUTE AS apprMinute
			  FROM WTM_WORK_CALENDAR C
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R 
			    ON R.TENANT_ID = C.TENANT_ID 
			   AND R.ENTER_CD = C.ENTER_CD 
			   AND R.SABUN = C.SABUN 
			   AND R.YMD = C.YMD 
		]]>	
			   <if test="timeTypeCds!=null">
			   AND R.TIME_TYPE_CD IN (NULL,
			   <foreach collection="timeTypeCds" item="timeTypeCd" separator=", ">
				   #{timeTypeCd}
			   </foreach>
				)
			   </if>
		<![CDATA[
			 WHERE C.TENANT_ID = #{tenantId}
				AND C.ENTER_CD = #{enterCd}
				AND C.SABUN = #{sabun}
				AND C.YMD = #{ymd}
        ]]>	
    </select>
  	
  	<select id="sumResultMinuteByTimeTypeCd" parameterType="map" resultType="hashmap">
		 SELECT SUM(CASE WHEN PLAN_MINUTE IS NULL OR PLAN_MINUTE='' THEN 0 ELSE PLAN_MINUTE END) AS planMinute
		      , SUM(CASE WHEN APPR_MINUTE IS NULL OR APPR_MINUTE='' THEN 0 ELSE APPR_MINUTE END) AS apprMinute
		  FROM WTM_WORK_DAY_RESULT R
		 WHERE R.TENANT_ID = #{tenantId}
		   AND R.ENTER_CD = #{enterCd}
		   AND R.SABUN = #{sabun}
		   AND R.YMD BETWEEN #{sYmd} AND #{eYmd}
		   <if test="timeTypeCds!=null">
		   AND R.TIME_TYPE_CD IN (NULL,
		   <foreach collection="timeTypeCds" item="timeTypeCd" separator=", ">
			   #{timeTypeCd}
		   </foreach>
		   )
		   </if>
  	</select>
  	

  	<update id="deleteWorkDayResultByYmdGreaterThan" parameterType="map">
  		<![CDATA[
  		 DELETE FROM WTM_WORK_DAY_RESULT
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND YMD > #{ymd}
		]]>
  	</update>
  	

  	<update id="deleteWorkCalendarByYmdGreaterThan" parameterType="map">
  		<![CDATA[
  		 DELETE FROM WTM_WORK_CALENDAR
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND YMD > #{ymd}
		]]>
  	</update>
  	
  	<update id="deleteFlexEmpByYmdGreaterThan" parameterType="map">
  		<![CDATA[
  		 DELETE FROM WTM_FLEXIBLE_EMP
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND SYMD > #{ymd}
		]]>
  	</update>
  	
  	<update id="deleteWorkTermByYmdGreaterThan" parameterType="map">
  		<![CDATA[
  		 DELETE FROM WTM_WORK_TERM_TIME
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SABUN = #{sabun}
		   AND FLEXIBLE_SDATE > #{ymd}
		]]>
  	</update>
  	
  	<select id="addMinuteWithBreakMGR" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_DATE_ADD_FOR_BREAK_MGR( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ymd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sDate, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{addMinute, jdbcType=INTEGER, javaType=java.lang.Integer, mode=IN}
  			  , #{retDate,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	
    <select id="weekWorkTimeByEmp" parameterType="map" resultType="hashmap">
    	<![CDATA[
    		SELECT X.TENANT_ID as tenantId, X.ENTER_CD as enterCd, X.SABUN as sabun, X.WORK_TYPE_CD as workTypeCd, X.SYMD as symd, X.EYMD as eymd
    				, X.WEEK_SDATE as weekSdate
    				, X.WEEK_EDATE as weekEdate
							, X.CC AS workDays
                            , CAST(P.INFO_VALUE * 60 AS UNSIGNED) AS weekWorkMinute
							, CAST(SUM(CASE WHEN (X.TIME_TYPE_CD IN ('BASE', 'REGA')) OR (X.TIME_TYPE_CD IN ('TAA') AND X.TAA_TIME_YN = 'Y') THEN F_WTM_NVL(X.APPR_MINUTE,F_WTM_NVL(X.PLAN_MINUTE,0)) ELSE 0 END) AS UNSIGNED) AS workMinute
							, CAST(SUM(CASE WHEN X.TIME_TYPE_CD IN ('OT', 'FIXOT', 'NIGHT') THEN F_WTM_NVL(X.APPR_MINUTE,F_WTM_NVL(X.PLAN_MINUTE,0)) ELSE 0 END) AS UNSIGNED) AS otMinute   
                            , CAST(SUM(CASE WHEN X.TIME_TYPE_CD IN ('EXCEPT') AND X.TAA_CD IN (D.M, D.R) THEN F_WTM_NVL(X.APPR_MINUTE,F_WTM_NVL(X.PLAN_MINUTE,0))  ELSE 0 END) AS UNSIGNED) AS exMinute  
                            , CAST(SUM(CASE WHEN X.TIME_TYPE_CD IN ('EXCEPT') AND X.TAA_CD IN (D.F, D.O) THEN F_WTM_NVL(X.APPR_MINUTE,F_WTM_NVL(X.PLAN_MINUTE,0)) ELSE 0 END) AS UNSIGNED) AS otExMinute 
				FROM (
				SELECT CASE WHEN E.SYMD BETWEEN W.WEEK_SDATE AND W.WEEK_EDATE THEN E.SYMD
										  WHEN W.WEEK_SDATE BETWEEN E.SYMD AND E.EYMD THEN W.WEEK_SDATE
				                          ELSE '' END AS WEEK_SDATE
							, CASE WHEN E.EYMD BETWEEN W.WEEK_SDATE AND W.WEEK_EDATE THEN E.EYMD
										  WHEN W.WEEK_EDATE BETWEEN E.SYMD AND E.EYMD THEN W.WEEK_EDATE
				                          ELSE '' END AS WEEK_EDATE
							, E.TENANT_ID, E.ENTER_CD, E.SABUN, E.WORK_TYPE_CD, E.SYMD, E.EYMD, E.FLEXIBLE_STD_MGR_ID
				            , C.HOLIDAY_YN, C.TIME_CD_MGR_ID, C.YMD
				            , R.TAA_CD, R.TIME_TYPE_CD, R.PLAN_MINUTE, R.APPR_MINUTE, M.TAA_TIME_YN
                            , (SELECT COUNT(DISTINCT YMD) FROM WTM_WORK_DAY_RESULT WHERE TENANT_ID = E.TENANT_ID AND ENTER_CD = E.ENTER_CD AND SABUN = E.SABUN AND YMD BETWEEN W.WEEK_SDATE and W.WEEK_EDATE ) AS CC 
				FROM WTM_FLEXIBLE_EMP E
				JOIN WTM_WORK_CALENDAR C
				ON E.ENTER_CD = C.ENTER_CD
				AND E.TENANT_ID = C.TENANT_ID
				AND E.SABUN = C.SABUN
				AND C.YMD BETWEEN E.SYMD AND E.EYMD 
				JOIN WTM_FLEXIBLE_STD_MGR M
				ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
				ON C.ENTER_CD = R.ENTER_CD
				AND C.TENANT_ID = R.TENANT_ID
				AND C.SABUN = R.SABUN
				AND C.YMD = R.YMD
				JOIN (
				SELECT P.TENANT_ID, P.ENTER_CD, SUN_YMD AS WEEK_SDATE
				, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(SUN_YMD, 6, 'D'), 'YMD') AS WEEK_EDATE   
				 FROM WTM_DAY_MGR D
				 JOIN WTM_PROPERTIE P
				 ON 1=1
				 AND P.TENANT_ID = #{tenantId} AND P.ENTER_CD = #{enterCd} AND P.INFO_KEY = 'OPTION_FIRSTDAY_OF_WEEK'
				 WHERE D.DAY_NM = P.INFO_VALUE
				 ) W
				 ON E.TENANT_ID = W.TENANT_ID
				 AND E.ENTER_CD = W.ENTER_CD 
	     		 AND  #{ymd} <= W.WEEK_EDATE AND #{ymd} >= W.WEEK_SDATE
				 AND C.YMD BETWEEN W.WEEK_SDATE AND W.WEEK_EDATE 
				WHERE E.SABUN = #{sabun}
				  AND E.TENANT_ID = #{tenantId}
				  AND E.ENTER_CD = #{enterCd} 
                  AND C.YMD NOT IN ( SELECT YMD FROM WTM_WORK_DAY_RESULT RR 
                  								WHERE RR.WORK_DAY_RESULT_ID = R.WORK_DAY_RESULT_ID 
                  								AND RR.TIME_TYPE_CD = 'LLA' 
                  								AND RR.TAA_CD IN ( SELECT TAA_CD
																	 FROM WTM_TAA_CODE
																	WHERE TENANT_ID = RR.TENANT_ID
																	AND ENTER_CD = RR.ENTER_CD
																	 AND TAA_INFO_CD = 'ABSENCE')
                                    )
				) X
                LEFT OUTER JOIN (
					SELECT MAX(CASE WHEN  TAA_INFO_CD = 'BREAK' THEN TAA_CD ELSE '' END) AS M
					 , MAX(CASE WHEN  TAA_INFO_CD = 'BREAK_FIXOT' THEN TAA_CD ELSE '' END) AS F
					 , MAX(CASE WHEN  TAA_INFO_CD = 'BREAK_OT' THEN TAA_CD ELSE '' END) AS O
					 , MAX(CASE WHEN  TAA_INFO_CD = 'BREAK_REGA' THEN TAA_CD ELSE '' END) AS R 
					FROM WTM_TAA_CODE
				 WHERE TAA_INFO_CD LIKE 'BREAK%'
					   AND TENANT_ID = #{tenantId}
					   AND ENTER_CD = #{enterCd}
                 ) D ON 1=1
                 LEFT OUTER JOIN WTM_PROPERTIE P ON X.TENANT_ID = P.TENANT_ID AND X.ENTER_CD = P.ENTER_CD AND P.INFO_KEY = 'OPTION_MAX_WORKTIME_1WEEK'
				GROUP BY X.TENANT_ID, X.ENTER_CD, X.SABUN, X.WORK_TYPE_CD, X.SYMD, X.EYMD, X.WEEK_SDATE,  X.WEEK_EDATE, X.TAA_TIME_YN 
    	]]>
    </select>
    
</mapper>
