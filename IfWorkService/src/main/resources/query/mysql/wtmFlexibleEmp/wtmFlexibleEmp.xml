<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmFlexibleEmpMapper">
	<select id="getFlexibleEmpList" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , E.FLEXIBLE_NM AS flexibleNm
			     , NULL AS applId 
				 , NULL AS applCd
				 , NULL AS applStatusCd
				 , NULL AS applStatusNm
				 , M.BASE_WORK_YN AS baseWorkYn
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			 WHERE E.TENANT_ID = #{tenantId}
				AND E.ENTER_CD = #{enterCd}
				AND E.SABUN = #{sabun}
				AND M.BASE_WORK_YN = 'Y'
				AND (F_WTM_TO_DATE(#{sYmd}, 'YMD') <= F_WTM_TO_DATE(E.EYMD, 'YMD') AND F_WTM_TO_DATE(E.SYMD, 'YMD') < F_WTM_TO_DATE(#{eYmd}, 'YMD'))
			UNION
			SELECT A.TENANT_ID AS tenantId
			     , A.ENTER_CD AS enterCd
			     , A.APPL_SABUN AS sabun
			     , E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , FA.SYMD AS sYmd
			     , FA.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , E.FLEXIBLE_NM AS flexibleNm
			     , A.APPL_ID AS applId
			     , A.APPL_CD AS applCd
			     , A.APPL_STATUS_CD AS applStatusCd
			     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
				 , 'N' AS baseWorkYn
			 FROM WTM_APPL A
			 JOIN WTM_FLEXIBLE_APPL FA
			   ON A.APPL_ID = FA.APPL_ID
			 LEFT OUTER JOIN WTM_FLEXIBLE_EMP E
			   ON A.TENANT_ID = E.TENANT_ID
			  AND A.ENTER_CD = E.ENTER_CD
			  AND A.APPL_SABUN = E.SABUN
			  AND A.APPL_CD = E.WORK_TYPE_CD
			  AND FA.SYMD = E.SYMD
			  AND FA.EYMD = E.EYMD
			WHERE A.TENANT_ID = #{tenantId}
			  AND A.ENTER_CD = #{enterCd}
			  AND A.APPL_SABUN = #{sabun}
			  AND (F_WTM_TO_DATE(#{sYmd}, 'YMD') <= F_WTM_TO_DATE(FA.EYMD, 'YMD') AND F_WTM_TO_DATE(FA.SYMD, 'YMD') < F_WTM_TO_DATE(#{eYmd}, 'YMD'))
			ORDER BY sYmd
        ]]>
    </select>

	<select id="getWorkDayResult" parameterType="map" resultType="hashmap" >	
		<![CDATA[
		SELECT A.TENANT_ID AS tenantId
		     , A.ENTER_CD AS enterCd
		     , A.APPL_SABUN AS sabun
		     , O.YMD AS ymd
		     , A.APPL_ID AS applId
		     , A.APPL_STATUS_CD AS applStatusCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'APPL_STATUS_CD', A.APPL_STATUS_CD, A.APPL_YMD) AS applStatusNm
		     , A.APPL_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(A.TENANT_ID, A.ENTER_CD, 'TIME_TYPE_CD', A.APPL_CD, O.YMD) AS timeTypeNm
		     , NULL AS taaCd
		     , NULL AS taaNm
		     , O.OT_SDATE AS sDate
		     , O.OT_EDATE AS eDate
		     , O.OT_MINUTE AS minute
		  FROM WTM_APPL A
		  JOIN WTM_OT_APPL O
		    ON A.APPL_ID = O.APPL_ID
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.APPL_SABUN = #{sabun}
			AND O.YMD = #{ymd}
			AND A.APPL_STATUS_CD <> '99'
		UNION ALL
		SELECT C.TENANT_ID AS tenantId
		     , C.ENTER_CD AS enterCd
		     , C.SABUN AS sabun
		     , C.YMD AS ymd
		     , R.APPL_ID AS applId
		     , NULL AS applStatusCd
		     , NULL AS applStatusNm
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , F_WTM_GET_CODE_NM(C.TENANT_ID, C.ENTER_CD, 'TIME_TYPE_CD', R.TIME_TYPE_CD, C.YMD) AS timeTypeNm
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
		     , F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE) AS sDate
		     , F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE) AS eDate
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE<>0 THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END AS minute
		  FROM WTM_WORK_CALENDAR C
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		 WHERE C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.SABUN = #{sabun}
		   AND C.YMD = #{ymd}
		   AND #{ymd} BETWEEN F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE), 'YMD') AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE), 'YMD') 
		ORDER BY ymd, sDate
		]]>
    </select>
    
    <!--해당 기간의 근무 정보 -->
  	<select id="getFlexibleRangeInfo" parameterType="map" resultType="map">
  		SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			  , E.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			  , M.FLEXIBLE_NM AS flexibleNm
			  , M.WORK_TYPE_CD AS workTypeCd
			  , M.BASE_WORK_YN AS baseWorkYn
			  , M.UNIT_MINUTE AS unitMinute
			  , E.SABUN AS sabun
			  , CASE WHEN M.WORK_TYPE_CD NOT IN ('SELE_F','SELE_C') THEN T.WEEK_SDATE ELSE E.SYMD END AS sYmd
			  , CASE WHEN M.WORK_TYPE_CD NOT IN ('SELE_F','SELE_C') THEN T.WEEK_EDATE ELSE E.EYMD END AS eYmd
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'WORK') AS totalWorkMinute
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'OT') AS totalOtMinute
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'WORK') AS restWorkMinute
			  , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'OT') AS restOtMinute
			  , T.AVL_MINUTE AS avlMinute
			  , (SELECT A.APPL_ID 
			       FROM WTM_APPL A 
					 JOIN WTM_FLEXIBLE_APPL F 
					   ON A.APPL_ID = F.APPL_ID 
					WHERE A.TENANT_ID = E.TENANT_ID 
					  AND A.ENTER_CD = E.ENTER_CD 
					  AND A.APPL_SABUN = E.SABUN
					  AND F.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
					  AND F.SYMD = E.SYMD
					  AND F.EYMD = E.EYMD) AS applId
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_FLEXIBLE_STD_MGR M
			 ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
		  LEFT OUTER JOIN WTM_WORK_TERM_TIME T
		    ON E.TENANT_ID = T.TENANT_ID
		   AND E.ENTER_CD = T.ENTER_CD
		   AND E.SABUN = T.SABUN
		   AND #{ymd} BETWEEN T.FLEXIBLE_SDATE AND T.FLEXIBLE_EDATE
		   AND #{ymd} BETWEEN T.WEEK_SDATE AND T.WEEK_EDATE
		 WHERE E.TENANT_ID = #{tenantId}
		   AND E.ENTER_CD = #{enterCd}
		   AND E.SABUN = #{sabun}
		   AND #{ymd} BETWEEN E.SYMD AND E.EYMD 
  	</select>
  	
  	 <!--해당 일의 근무 정보 -->
  	<select id="getFlexibleDayInfo" parameterType="map" resultType="map">
  		SELECT T.*
	         , F_WTM_GET_TAA_NAMES(T.tenantId, T.enterCd, T.sabun, T.ymd, 2) AS taaNames
	         , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'TAA', '') AS taaHour
	         , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'BASE', 'BASE') AS workHour
	         , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'OT', 'ALL') AS otHour
			 , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'OT', 'OT') AS otBasicHour
			 , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'OT', 'NIGHT') AS otNightHour
			 , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'BREAK', 'BASE') AS breakHour
			 , F_WTM_WORK_DAY_HOUR(T.tenantId, T.enterCd, T.sabun, T.ymd, 'BREAK', 'PAID') AS paidhour
		  FROM (
		          SELECT C.TENANT_ID AS tenantId
		                , C.ENTER_CD AS enterCd
		                 , C.SABUN AS sabun
		                 , C.YMD AS ymd
		                 , T.TIME_CD AS timeCd
		                 , T.TIME_NM AS timeNm
		                 , C.HOLIDAY_YN AS holidayYn
		                 , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_SDATE ELSE NULL END) AS planSdate
		                 , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_EDATE ELSE NULL END) AS planEdate
		                 , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_MINUTE ELSE 0 END) AS planMinute
		                 , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_SDATE ELSE NULL END) AS apprSdate
		                 , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_EDATE ELSE NULL END) AS apprEdate
		                 , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_MINUTE ELSE 0 END) AS apprMinute
		              FROM WTM_WORK_CALENDAR C
		              JOIN WTM_TIME_CD_MGR T
		                ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		              LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
		                ON C.TENANT_ID = R.TENANT_ID
		               AND C.ENTER_CD = R.ENTER_CD
		               AND C.YMD = R.YMD
		               AND C.SABUN = R.SABUN
		             WHERE C.YMD = #{ymd}
		               AND C.SABUN = #{sabun}
		               AND C.TENANT_ID = #{tenantId}
		               AND C.ENTER_CD = #{enterCd}
		            GROUP BY C.TENANT_ID, C.ENTER_CD, C.SABUN, C.YMD, T.TIME_CD, T.TIME_NM, C.HOLIDAY_YN ) T
  	</select>
    
    <!--해당 일의 근무시간 정보 -->
  	<select id="getFlexibleWorkTimeInfo" parameterType="map" resultType="map">
  		<![CDATA[
	    SELECT C.YMD AS ymd
	         , F_WTM_GET_TAA_NAMES(R.TENANT_ID, R.ENTER_CD, R.SABUN, R.YMD, 2)  AS taaNames
		     , MIN(C.ENTRY_SDATE) as entrySdate
		     , MAX(C.ENTRY_EDATE) as entryEdate
		     , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_SDATE ELSE NULL END) AS planSdate
		     , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_EDATE ELSE NULL END) AS planEdate
		     , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('TAA', 'SUBS') THEN R.PLAN_MINUTE ELSE 0 END) AS planMinute
		     , MIN(R.PLAN_SDATE) AS workSDate
		     , MAX(R.PLAN_EDATE) AS workEDate
		     , SUM(R.PLAN_MINUTE) AS workMinute
		     , MIN(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_SDATE ELSE NULL END) AS apprSdate
		     , MAX(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_EDATE ELSE NULL END) AS apprEdate
		     , SUM(CASE WHEN R.TIME_TYPE_CD IS NULL OR R.TIME_TYPE_CD NOT IN ('LLA') THEN R.APPR_MINUTE ELSE NULL END) AS apprMinute
		     , SUM(CASE WHEN R.TIME_TYPE_CD='BASE' THEN CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE <> 0 THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END 
		     		    ELSE 0 END)
		     	+ SUM(CASE WHEN #{taaTimeYn}='Y' AND #{taaWorkYn}='Y' AND R.TIME_TYPE_CD='TAA' AND APPR_MINUTE IS NOT NULL THEN APPR_MINUTE ELSE 0 END) AS apprBaseMinute
		     , SUM(CASE WHEN R.TIME_TYPE_CD='OT' OR R.TIME_TYPE_CD='NIGHT' THEN CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE <> 0 THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END 
		                ELSE 0 END) AS apprOtMinute
		     , C.HOLIDAY_YN AS holidayYn
		  FROM WTM_WORK_CALENDAR C
		  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		 WHERE C.YMD = #{ymd}
		   AND C.SABUN = #{sabun}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.TENANT_ID = #{tenantId}
		GROUP BY R.TENANT_ID, R.ENTER_CD, R.SABUN, R.YMD, C.HOLIDAY_YN
		]]>
  	</select>

	<select id="getFlexibleEmp" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
				 , E.TENANT_ID AS tenantId
				 , E.ENTER_CD AS enterCd
			     , E.FLEXIBLE_STD_MGR_ID AS flexibleStdMgrId
			     , M.FLEXIBLE_NM AS flexibleNm
			     , M.USE_SYMD AS useSymd
			     , M.USE_EYMD AS useEymd
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.UNIT_MINUTE AS unitMinute
			     , M.EXHAUSTION_YN AS exhaustionYn
			     , M.HOL_EXCEPT_YN AS holExceptYn
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.CORE_CHK_YN AS coreChkYn
			     , M.BASE_WORK_YN AS baseWorkYn
			     , M.FIXOT_USE_TYPE AS fixotUseType
			     , M.FIXOT_USE_LIMIT AS fixotUseLimit
			     , M.TAA_TIME_YN AS taaTimeYn
			     , M.TAA_WORK_YN AS taaWorkYn
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , E.WORK_MINUTE AS workMinute
			     , E.OT_MINUTE AS otMinute
				 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'WORK') AS restWorkMinute
				 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'R', 'OT') AS restOtMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND F_WTM_DATE_FORMAT(F_WTM_TO_DATE(#{ymd}, 'YMD'), 'YMD') BETWEEN E.SYMD AND E.EYMD
        ]]>
    </select>
	
    <select id="getPrevFlexible" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT A.APPL_SABUN AS sabun
			     , MAX(FA.SYMD) AS sYmd
			     , MAX(FA.EYMD) AS eYmd
			  FROM WTM_APPL A
			  JOIN WTM_FLEXIBLE_APPL FA
			    ON A.APPL_ID = FA.APPL_ID 
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_SABUN = #{empNo}
			GROUP BY A.APPL_SABUN
        ]]>
    </select>
    
    <select id="getWorkTermTime" parameterType="map" resultType="wtmWorkTermTime">
        <![CDATA[
			SELECT T.*
			     , E.FLEXIBLE_NM AS filexibleNm
			  FROM WTM_WORK_TERM_TIME T
			  JOIN WTM_FLEXIBLE_EMP E
			    ON T.TENANT_ID = E.TENANT_ID
			   AND T.ENTER_CD = E.ENTER_CD
			   AND T.SABUN = E.SABUN
			   AND T.FLEXIBLE_SDATE = E.SYMD
			   AND T.FLEXIBLE_EDATE = E.EYMD
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{empNo}
			   AND F_WTM_TO_DATE(#{ymd},'YMD') BETWEEN F_WTM_TO_DATE(E.SYMD,'YMD') AND F_WTM_TO_DATE(E.EYMD,'YMD')
        ]]>
    </select>
    
    <update id="createWorkCalendarOfSeleC" parameterType="map">
    	INSERT INTO WTM_WORK_CALENDAR(TENANT_ID, ENTER_CD, SABUN, YMD, TIME_CD_MGR_ID, WORK_CLOSE_YN, HOLIDAY_YN, UPDATE_ID)
			SELECT E.TENANT_ID, E.ENTER_CD, E.SABUN, D.SUN_YMD, P.TIME_CD_MGR_ID, 'N', T.HOL_YN,  #{userId}
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_DAY_MGR D
			    ON D.SUN_YMD BETWEEN E.SYMD AND E.EYMD
			 JOIN WTM_WORK_PATT_DET P
                ON P.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
               AND F_WTM_WEEKDAY(D.SUN_YMD) = P.SEQ
              JOIN WTM_TIME_CD_MGR T
                ON P.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			   AND NOT EXISTS 
				(
					SELECT * FROM WTM_WORK_CALENDAR C
			    	 WHERE C.YMD = D.SUN_YMD
			     	   AND C.SABUN = E.SABUN
			     	   AND C.ENTER_CD = E.ENTER_CD
			     	   AND C.TENANT_ID = E.TENANT_ID
				)
    </update>
    <!-- 
    <update id="updateHolidayYnOFWorkCalendar" parameterType="map">
    	UPDATE WTM_WORK_CALENDAR C
    	  JOIN WTM_FLEXIBLE_EMP E
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD 
    	   SET C.HOLIDAY_YN = F_WTM_HOLIDAY_YN(C.YMD, #{1}, #{2}, #{3}, #{4}, #{5}, #{6}, #{7})
    	     , C.UPDATE_ID = #{userId}
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId} 
    </update>
     -->
     
    <update id="updatePlanMinute" parameterType="Long">
    	UPDATE WTM_WORK_DAY_RESULT X 
    	  JOIN (
			SELECT D.WORK_DAY_RESULT_ID  
				 , F_WTM_CALC_MINUTE( F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI'), '','', '') -
				   SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI'), '' )) AS CM
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT D 
			    ON C.TENANT_ID = D.TENANT_ID
			   AND C.ENTER_CD = D.ENTER_CD
			   AND C.YMD = D.YMD
			   AND C.SABUN = D.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  JOIN WTM_TIME_BREAK_MGR B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			   AND D.TIME_TYPE_CD = 'BASE'
			   AND (B.SHM BETWEEN F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI') AND F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI') 
			     OR B.EHM BETWEEN F_WTM_DATE_FORMAT(D.PLAN_SDATE, 'HI') AND F_WTM_DATE_FORMAT(D.PLAN_EDATE, 'HI'))
			 GROUP BY D.WORK_DAY_RESULT_ID
			) XX
			ON X.WORK_DAY_RESULT_ID = XX.WORK_DAY_RESULT_ID
		   SET X.PLAN_MINUTE = XX.CM
    </update>
    <update id="updateApprDatetimeByYmdAndSabun" parameterType="map">
    	UPDATE WTM_FLEXIBLE_STD_MGR M
		  JOIN WTM_FLEXIBLE_EMP E
		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		   SET R.APPR_SDATE = F_WTM_CALC_APPR_DATE(C.ENTRY_SDATE, R.PLAN_SDATE, M.UNIT_MINUTE, 'S')
			 , R.APPR_EDATE = F_WTM_CALC_APPR_DATE(C.ENTRY_EDATE, R.PLAN_EDATE, M.UNIT_MINUTE, 'E')
		 WHERE C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
		   AND C.ENTRY_SDATE IS NOT NULL
		   AND C.ENTRY_EDATE IS NOT NULL
		   AND C.YMD NOT IN (SELECT DISTINCT SR.YMD 
							   FROM WTM_WORK_DAY_RESULT SR 
							   WHERE SR.TENANT_ID = R.TENANT_ID 
							   AND SR.ENTER_CD = R.ENTER_CD 
							   AND SR.SABUN = R.SABUN 
							   AND SR.TIME_TYPE_CD = #{timeTypeCd}
							   AND SR.TAA_CD = #{taaCd}
							   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd})
		   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL)
    </update>
    <update id="updateApprMinuteByYmdAndSabun" parameterType="map">
    	UPDATE WTM_WORK_DAY_RESULT X 
    	  JOIN (
			SELECT D.WORK_DAY_RESULT_ID  
				 , F_WTM_CALC_MINUTE( F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '','', '') -
				   SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'), '' )) AS CM
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT D 
			    ON C.TENANT_ID = D.TENANT_ID
			   AND C.ENTER_CD = D.ENTER_CD
			   AND C.YMD = D.YMD
			   AND C.SABUN = D.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  JOIN WTM_TIME_BREAK_MGR B
			    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID 
			 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND (E.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL)
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND (B.SHM BETWEEN F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI') AND F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI') 
			     OR B.EHM BETWEEN F_WTM_DATE_FORMAT(D.APPR_SDATE, 'HI') AND F_WTM_DATE_FORMAT(D.APPR_EDATE, 'HI'))
			 GROUP BY D.WORK_DAY_RESULT_ID
			) XX
			ON X.WORK_DAY_RESULT_ID = XX.WORK_DAY_RESULT_ID
		   SET X.APPR_MINUTE = XX.CM
    </update>
    
    <update id="updateEntrySdateByTenantIdAndEnterCdAndYmdBetweenAndSabun" parameterType="map">
    	<![CDATA[ 
			UPDATE WTM_WORK_CALENDAR A
			 JOIN (
				SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				     , MIN(CASE WHEN M.DAY_OPEN_TYPE = 'BASE' AND R.TIME_TYPE_CD NOT IN ('OT') THEN R.PLAN_SDATE
				     	    ELSE R.PLAN_SDATE END)  PLAN_SDATE
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_WORK_DAY_RESULT R
				    ON C.TENANT_ID = R.TENANT_ID
				   AND C.ENTER_CD = R.ENTER_CD
				   AND C.YMD = R.YMD
				   AND C.SABUN = R.SABUN
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
				   AND M.DAY_OPEN_TYPE != 'N' 
				   AND R.TIME_TYPE_CD NOT IN ('TAA')
				   AND C.ENTRY_SDATE IS NULL
				   AND (C.SABUN = #{sabun} OR  #{sabun} = '' OR  #{sabun} IS NULL) 
				 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				) B
				ON A.TENANT_ID = B.TENANT_ID AND A.ENTER_CD = B.ENTER_CD AND A.YMD = B.YMD AND A.SABUN = B.SABUN 
			   SET A.ENTRY_SDATE = B.PLAN_SDATE 
			     , A.ENTRY_STYPE_CD = 'AUTO'
    	]]>
    </update>
    
    <update id="updateEntryEdateByTenantIdAndEnterCdAndYmdBetweenAndSabun" parameterType="map">
    	<![CDATA[ 
			UPDATE WTM_WORK_CALENDAR A
			 JOIN (
				SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				     , MAX(CASE WHEN M.DAY_CLOSE_TYPE = 'BASE' AND R.TIME_TYPE_CD NOT IN ('OT') THEN R.PLAN_EDATE
				     	    ELSE R.PLAN_EDATE END)  PLAN_EDATE
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_WORK_DAY_RESULT R
				    ON C.TENANT_ID = R.TENANT_ID
				   AND C.ENTER_CD = R.ENTER_CD
				   AND C.YMD = R.YMD
				   AND C.SABUN = R.SABUN
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
				   AND M.DAY_CLOSE_TYPE != 'N' 
				   AND R.TIME_TYPE_CD NOT IN ('TAA')
				   AND C.ENTRY_EDATE IS NULL
				   AND (C.SABUN = #{sabun} OR  #{sabun} = '' OR  #{sabun} IS NULL) 
				 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN 
				) B
				ON A.TENANT_ID = B.TENANT_ID AND A.ENTER_CD = B.ENTER_CD AND A.YMD = B.YMD AND A.SABUN = B.SABUN 
			   SET A.ENTRY_EDATE = B.PLAN_EDATE 
			     , A.ENTRY_ETYPE_CD = 'AUTO'
    	]]>
    </update>
    
    
    <update id="updateTimeTypePlanToEntryTimeByTenantIdAndEnterCdAndYmdBetweenAndSabun" parameterType="map">
    	<![CDATA[ 
			UPDATE WTM_WORK_CALENDAR A
			 JOIN (
				SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
					 , MIN(R.PLAN_SDATE) AS PLAN_SDATE 
				     , MAX(R.PLAN_EDATE) AS PLAN_EDATE
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_WORK_DAY_RESULT R
				    ON C.TENANT_ID = R.TENANT_ID
				   AND C.ENTER_CD = R.ENTER_CD
				   AND C.YMD = R.YMD
				   AND C.SABUN = R.SABUN
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
				   AND R.TIME_TYPE_CD = #{timeTypeCd}
				   AND (C.SABUN = #{sabun} OR  #{sabun} = '' OR  #{sabun} IS NULL) 
				 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN, R.TIME_TYPE_CD 
				) B
				ON A.TENANT_ID = B.TENANT_ID AND A.ENTER_CD = B.ENTER_CD AND A.YMD = B.YMD AND A.SABUN = B.SABUN 
			   SET A.ENTRY_SDATE = B.PLAN_SDATE 
			     , A.ENTRY_STYPE_CD = #{timeTypeCd}
			     , A.ENTRY_EDATE = B.PLAN_EDATE 
			     , A.ENTRY_ETYPE_CD = #{timeTypeCd}
    	]]>
    </update>
    
    <insert id="createDayResultByTimeTypeAndEntryDateIsNull" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD, TAA_CD, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, now(), #{userId}
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd} 
				   AND C.ENTRY_SDATE IS NULL
				   AND C.ENTRY_EDATE IS NULL  
				   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
    	]]>
    </insert>
    
    <insert id="createDayResultByTimeTypeAndCheckRequireCoreTimeYn" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD, TAA_CD, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, now(), #{userId}
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd} 
				   AND C.ENTRY_SDATE IS NOT NULL
				   AND C.ENTRY_EDATE IS NOT NULL  
				   AND C.ENTRY_EDATE <= F_WTM_TO_DATE(CONCAT(C.YMD, M.CORE_SHM), 'YMDHI')
				   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
				   AND M.CORE_REQUIRE_YN = 'Y' 
    	]]>
    </insert>
    
    <insert id="createDayResultByTimeTypeAndEntrtEdateIsNull" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD, TAA_CD, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, now(), #{userId}
				  FROM WTM_FLEXIBLE_STD_MGR M
				  JOIN WTM_FLEXIBLE_EMP E
				    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}   
				   AND C.ENTRY_SDATE IS NOT NULL  
				   AND C.ENTRY_EDATE IS NULL  
			   	   AND T.LATE_CHK_YN = 'Y'
				   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
    	]]>
    </insert>
    
    <insert id="createDayResultByTimeTypeAndPlanSdateLessThanApprSdate" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD,  TAA_CD, APPR_SDATE, APPR_EDATE, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd} , MIN(R.PLAN_SDATE), MIN(R.APPR_SDATE), now(), #{userId}
			  FROM WTM_FLEXIBLE_STD_MGR M
			  JOIN WTM_FLEXIBLE_EMP E
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE C.TENANT_ID = #{tenantId}
			   AND C.ENTER_CD = #{enterCd}
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND R.TIME_TYPE_CD = 'BASE'
			   AND T.LATE_CHK_YN = 'Y'
			   AND C.ENTRY_SDATE IS NOT NULL
			   AND C.ENTRY_EDATE IS NOT NULL
			   AND C.YMD NOT IN (SELECT DISTINCT SR.YMD 
								   FROM WTM_WORK_DAY_RESULT SR 
								   WHERE SR.TENANT_ID = R.TENANT_ID 
								   AND SR.ENTER_CD = R.ENTER_CD 
								   AND SR.SABUN = R.SABUN 
								   AND SR.TIME_TYPE_CD = #{timeTypeCd}
								   AND SR.TAA_CD = #{taaCd}
								   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd})
			   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
			 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
				 , C.ENTRY_SDATE, C.ENTRY_EDATE
			 HAVING MIN(R.PLAN_SDATE) < MIN(R.APPR_SDATE)
    	]]>
    </insert>
    
    
    <insert id="createDayResultByTimeTypeAndApprEdateLessThanPlanEdate" parameterType="map">
    	<![CDATA[
    		INSERT INTO WTM_WORK_DAY_RESULT(TENANT_ID, ENTER_CD, YMD, SABUN, APPL_ID, TIME_TYPE_CD,  TAA_CD, APPR_SDATE, APPR_EDATE, UPDATE_DATE, UPDATE_ID)
			SELECT C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, NULL, #{timeTypeCd}, #{taaCd}, MAX(R.APPR_EDATE), MAX(R.PLAN_EDATE), now(), #{userId}
			  FROM WTM_FLEXIBLE_STD_MGR M
			  JOIN WTM_FLEXIBLE_EMP E
			    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			 WHERE C.TENANT_ID = #{tenantId}
			   AND C.ENTER_CD = #{enterCd}
			   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
			   AND R.TIME_TYPE_CD = 'BASE'
			   AND T.LEAVE_CHK_YN = 'Y'
			   AND C.ENTRY_SDATE IS NOT NULL
			   AND C.ENTRY_EDATE IS NOT NULL
			   AND C.YMD NOT IN (SELECT DISTINCT SR.YMD 
								   FROM WTM_WORK_DAY_RESULT SR 
								   WHERE SR.TENANT_ID = R.TENANT_ID 
								   AND SR.ENTER_CD = R.ENTER_CD 
								   AND SR.SABUN = R.SABUN 
								   AND SR.TIME_TYPE_CD = #{timeTypeCd}
								   AND SR.TAA_CD = #{taaCd}
								   AND SR.YMD BETWEEN #{sYmd} AND #{eYmd})
			   AND (C.SABUN = #{sabun} OR #{sabun} = '' OR #{sabun} IS NULL) 
			 GROUP BY C.TENANT_ID, C.ENTER_CD, C.YMD, C.SABUN, T.LATE_CHK_YN, T.LEAVE_CHK_YN
				 , C.ENTRY_SDATE, C.ENTRY_EDATE
			 HAVING MAX(R.PLAN_EDATE) > MAX(R.APPR_EDATE)
    	]]>
    </insert>
    
    <select id="checkBaseWorktime" parameterType="Long" resultType="map">
    	SELECT ( CEIL( F_WTM_TO_DAYS(E.SYMD, E.EYMD) * P.INFO_VALUE / 7) * 60  >=  SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END)) AS isValid
    		, CEIL( F_WTM_TO_DAYS(E.SYMD, E.EYMD) * P.INFO_VALUE / 7) * 60 as totalWorktime
    	  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		  JOIN WTM_PROPERTIE P
		    ON P.TENANT_ID = C.TENANT_ID AND P.ENTER_CD = C.ENTER_CD AND P.INFO_KEY = 'OPTION_MAX_WORKTIME_1WEEK'
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
    </select>
    
    <select id="getWorktimePlan" parameterType="Long" resultType="map" >
    	<![CDATA[
    	SELECT F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') AS ymd
		     , F_WTM_DATE_FORMAT(O.OT_SDATE, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(O.OT_EDATE, 'H:I') AS ehm
		     , O.OT_MINUTE AS minute
		     , 'OT' AS timeTypeCd
		     , NULL AS taaCd
		     , NULL AS taaNm
			 , O.HOLIDAY_YN AS holidayYn
			 , (SELECT M.TIME_NM FROM WTM_TIME_CD_MGR M JOIN WTM_WORK_CALENDAR C ON M.TIME_CD_MGR_ID = C.TIME_CD_MGR_ID 
			 	WHERE C.TENANT_ID = E.TENANT_ID AND C.ENTER_CD = E.ENTER_CD AND C.SABUN = E.SABUN AND C.YMD = F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD')) AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_OT_APPL O
		    ON F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_APPL A
		    ON O.APPL_ID = A.APPL_ID
			AND E.TENANT_ID = A.TENANT_ID
		   AND E.ENTER_CD = A.ENTER_CD
		   AND E.SABUN = A.APPL_SABUN
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		   AND A.APPL_STATUS_CD <> '99'
		UNION ALL
    	SELECT C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL AND R.APPR_SDATE != '' THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL AND R.APPR_EDATE != '' THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, 'H:I') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END AS minute
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
           	 , T.TIME_NM AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		 ORDER BY ymd
		 ]]>
    </select>
    
    <!-- 달력에 표시되는 날짜에 해당하는 plan만 가져옴  -->
    <select id="getWorktimePlanByYmdBetween" parameterType="map" resultType="map" >
    	<![CDATA[
    	SELECT T.*
		     , (SELECT M.TIME_NM FROM WTM_TIME_CD_MGR M JOIN WTM_WORK_CALENDAR C ON M.TIME_CD_MGR_ID = C.TIME_CD_MGR_ID
			  	  WHERE C.TENANT_ID = T.tenantId AND C.ENTER_CD = T.enterCd AND C.SABUN = T.sabun AND C.YMD = T.ymd) AS timeNm
    	FROM (
		    	SELECT  E.TENANT_ID AS tenantId
				     , E.ENTER_CD AS enterCd
				     , E.SABUN AS sabun
		    	     , F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') AS ymd
				     , F_WTM_DATE_FORMAT(O.OT_SDATE, 'H:I') AS shm
				     , F_WTM_DATE_FORMAT(O.OT_EDATE, 'H:I') AS ehm
				     , O.OT_MINUTE AS minute
				     , 'OT' AS timeTypeCd
				     , NULL AS taaCd
				     , NULL AS taaNm
					  , O.HOLIDAY_YN AS holidayYn
				  FROM WTM_FLEXIBLE_EMP E
				  JOIN WTM_OT_APPL O
				    ON F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_APPL A
				    ON O.APPL_ID = A.APPL_ID
					AND E.TENANT_ID = A.TENANT_ID
				   AND E.ENTER_CD = A.ENTER_CD
				   AND E.SABUN = A.APPL_SABUN
				 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
				   AND A.APPL_STATUS_CD <> '99'
				   AND F_WTM_DATE_FORMAT(O.OT_SDATE, 'YMD') BETWEEN #{sYmd} AND #{eYmd}
				   AND E.TENANT_ID = #{tenantId}
				   AND E.ENTER_CD = #{enterCd}
				   AND E.SABUN = #{sabun}
		) T
		UNION ALL
    	SELECT E.TENANT_ID AS tenantId
		     , E.ENTER_CD AS enterCd
		     , E.SABUN AS sabun
    	     , C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL AND R.APPR_SDATE != '' THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL AND R.APPR_EDATE != '' THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, 'H:I') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END AS minute
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
           	 , T.TIME_NM AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		   AND C.YMD BETWEEN #{sYmd} AND #{eYmd}
		   AND C.TENANT_ID = #{tenantId}
		   AND C.ENTER_CD = #{enterCd}
		   AND C.SABUN = #{sabun}
		 ORDER BY ymd
		 ]]>
    </select>
    
    <!--
    	근무제 기간에서 특정일 포함 이전 근무시간 합(분) - 인정 분 이 없을 경우 계획 분으로   
     -->
    <select id="getTotalApprMinute" parameterType="map" resultType="map">
    	<![CDATA[
    	 SELECT SUM( CASE WHEN  R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END) AS totalApprMinute
		   FROM WTM_FLEXIBLE_STD_MGR M
		   JOIN WTM_FLEXIBLE_EMP E
		     ON M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
		   JOIN WTM_WORK_CALENDAR C
		     ON E.TENANT_ID = C.TENANT_ID
		    AND E.ENTER_CD = C.ENTER_CD
		    AND E.SABUN = C.SABUN
		    AND C.YMD BETWEEN E.SYMD AND E.EYMD
		   JOIN  WTM_WORK_DAY_RESULT R
		     ON C.TENANT_ID = R.TENANT_ID
		    AND C.ENTER_CD = R.ENTER_CD
		    AND C.YMD = R.YMD
		    AND C.SABUN = R.SABUN
		  WHERE C.YMD <= #{ymd} 
		    AND #{ymd}  BETWEEN E.SYMD AND E.EYMD
		    AND R.TIME_TYPE_CD = 'BASE'
		    AND E.SABUN = #{sabun}
		    AND E.TENANT_ID = #{tenantId}
		    AND E.ENTER_CD = #{enterCd} 
		  GROUP BY E.TENANT_ID, E.ENTER_CD, E.SABUN
		]]>
    </select>
    <!--
   		근무제 기간에서 특정일 이후부터 근무제 적용 종료기간 까지의 코어시간의 합을 가지고 온다. 
   		사용처 : 연장근무 신청 시 소정근로 선 소진사용여부에 따라 사용할 수 있다. 
     -->
	<select id="getTotalCoretime" parameterType="map" resultType="map">
		<![CDATA[
		SELECT SUM(X.CORE_HM) AS coreHm FROM (
 			SELECT  C.YMD, M.CORE_SHM,  M.CORE_EHM, F_WTM_CALC_MINUTE(M.CORE_SHM,  M.CORE_EHM, '','', '') -
  					SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, M.CORE_SHM,  M.CORE_EHM, '' )) AS CORE_HM
 			  FROM WTM_FLEXIBLE_STD_MGR M
 			  JOIN WTM_FLEXIBLE_EMP E
 			    ON M.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
  			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID AND E.ENTER_CD = C.ENTER_CD
   			   AND E.SABUN = C.SABUN
		       AND C.YMD BETWEEN E.SYMD AND E.EYMD 
  			  JOIN WTM_TIME_CD_MGR T
			    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
  			  JOIN WTM_TIME_BREAK_MGR B
				ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
			 WHERE C.YMD > #{ymd} 
 		  	   AND #{ymd}  BETWEEN E.SYMD AND E.EYMD
 			   AND E.SABUN = #{sabun}
 			   AND E.TENANT_ID = #{tenantId}
 			   AND E.ENTER_CD = #{enterCd} 
   			   AND (B.SHM BETWEEN M.CORE_SHM  AND M.CORE_EHM 
	 				OR B.EHM BETWEEN M.CORE_SHM  AND M.CORE_EHM)
 			 GROUP BY E.TENANT_ID, E.ENTER_CD, E.SABUN, C.YMD
 		) X
 		]]>	
  	</select>
  	<select id="getSumOtMinute" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT SUM(X.otMinute) AS otMinute FROM (
			SELECT F_WTM_NVL(SUM(CASE WHEN R.APPR_MINUTE IS NOT NULL AND R.APPR_MINUTE != '' AND R.APPR_MINUTE > 0 THEN F_WTM_NVL(R.APPR_MINUTE, 0)
							ELSE F_WTM_NVL(R.PLAN_MINUTE, 0) END 
			                ), 0) AS otMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE #{ymd} BETWEEN E.SYMD AND E.EYMD
			   AND R.TIME_TYPE_CD = 'OT'
			   AND E.SABUN = #{sabun}
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			 UNION ALL
			SELECT F_WTM_NVL(SUM(F_WTM_NVL(O.OT_MINUTE, 0)),0)  AS otMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_APPL A
			    ON E.TENANT_ID = A.TENANT_ID
			   AND E.ENTER_CD = A.ENTER_CD
			   AND E.SABUN = A.APPL_IN_SABUN
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.APPL_STATUS_CD IN ('21','31')
			   AND E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND #{ymd} BETWEEN E.SYMD AND E.EYMD
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '') 
			 ) X
		]]>	
  	</select>
  	
  	
  	<select id="calcMinuteAsBreaktimeOption" parameterType="map" resultType="map">
  		SELECT CASE WHEN P.INFO_VALUE = 'Y' THEN F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','')
		     		ELSE F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') - BREAK_MINUTE END AS calcMinute 
		  FROM ( SELECT E.TENANT_ID
		              , E.ENTER_CD
		              , E.SABUN
		              , CASE WHEN SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) IS NULL THEN 0 ELSE SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) END AS BREAK_MINUTE
					  FROM WTM_FLEXIBLE_EMP E
					  JOIN WTM_WORK_CALENDAR C
					    ON E.TENANT_ID = C.TENANT_ID
					   AND E.ENTER_CD = C.ENTER_CD
					   AND E.SABUN = C.SABUN
					   AND C.YMD BETWEEN E.SYMD AND E.EYMD
					  JOIN WTM_TIME_CD_MGR T
					    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
					  JOIN WTM_TIME_BREAK_MGR B
					    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
					 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
					   AND E.TENANT_ID = #{tenantId}
					   AND E.ENTER_CD = #{enterCd}
					   AND E.SABUN = #{sabun}
					   AND C.YMD = #{ymd}
					    ) S
			LEFT OUTER JOIN WTM_PROPERTIE P
		    ON S.TENANT_ID = P.TENANT_ID
		   AND S.ENTER_CD = P.ENTER_CD
		   AND P.INFO_KEY = 'OPTION_BREAKTIME_INCLUDED_YN_OF_OT_APPL'
  	</select>
  	
  	<select id="calcMinuteExceptBreaktime" parameterType="map" resultType="map">
  		SELECT S.BREAK_MINUTE AS breakMinute
		     , F_WTM_CALC_MINUTE(#{shm},#{ehm}, '','','') - S.BREAK_MINUTE AS calcMinute 
		  FROM ( SELECT CASE WHEN SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) IS NULL THEN 0 ELSE SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM,#{shm},#{ehm}, '')) END AS BREAK_MINUTE
				  FROM WTM_FLEXIBLE_EMP E
				  JOIN WTM_WORK_CALENDAR C
				    ON E.TENANT_ID = C.TENANT_ID
				   AND E.ENTER_CD = C.ENTER_CD
				   AND E.SABUN = C.SABUN
				   AND C.YMD BETWEEN E.SYMD AND E.EYMD
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				  JOIN WTM_TIME_BREAK_MGR B
				    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
				 WHERE C.YMD BETWEEN E.SYMD AND E.EYMD
				   AND E.TENANT_ID = #{tenantId}
				   AND E.ENTER_CD = #{enterCd}
				   AND E.SABUN = #{sabun}
				   AND C.YMD = #{ymd}
				   ) S
  	</select>
  	
  	<select id="checkDuplicateWorktime" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT COUNT(*) AS workCnt FROM (
			SELECT 1 
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun} 
			   AND C.YMD BETWEEN SUBSTR(#{sdate},1,6) AND SUBSTR(#{edate},1,6)
			   AND ((F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') < #{edate} ) OR ( F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') > #{sdate} AND  F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') <= #{edate} ))
			 UNION ALL
			SELECT 2 
			  FROM WTM_APPL A
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND ((F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') < #{edate}) OR (F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') > #{sdate} AND F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') <= #{edate}))
			 UNION ALL
			SELECT 3 
			  FROM WTM_APPL A
			  JOIN WTM_OT_SUBS_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND ((F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') < #{edate}) OR (F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') > #{sdate} AND F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') <= #{edate}))
			) X
		]]>	
  	</select>
  	
  	<select id="checkDuplicateSubsWorktime" parameterType="map" resultType="map">
  		<![CDATA[
  		SELECT COUNT(*) AS workCnt FROM (
			SELECT 1 
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun} 
			   AND R.TIME_TYPE_CD != 'BASE'
			   AND ((F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_SDATE, R.PLAN_SDATE),'YMDHI') < #{edate} ) OR ( F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') > #{sdate} AND  F_WTM_DATE_FORMAT(F_WTM_NVL(R.APPR_EDATE, R.PLAN_EDATE),'YMDHI') <= #{edate} ))
			 UNION ALL
			SELECT 2 
			  FROM WTM_APPL A
			  JOIN WTM_OT_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND ((F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(O.OT_SDATE,'YMDHI') < #{edate}) OR (F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') > #{sdate} AND F_WTM_DATE_FORMAT(O.OT_EDATE,'YMDHI') <= #{edate}))
			 UNION ALL
			SELECT 3 
			  FROM WTM_APPL A
			  JOIN WTM_OT_SUBS_APPL O
			    ON A.APPL_ID = O.APPL_ID
			 WHERE A.TENANT_ID = #{tenantId}
			   AND A.ENTER_CD = #{enterCd}
			   AND A.APPL_IN_SABUN = #{sabun}
			   AND (A.APPL_ID <> #{applId} OR #{applId} IS NULL OR #{applId} = '')
			   AND A.APPL_STATUS_CD IN ('21','31')
			   AND ((F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') >= #{sdate} AND F_WTM_DATE_FORMAT(O.SUBS_SDATE,'YMDHI') < #{edate}) OR (F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') > #{sdate} AND F_WTM_DATE_FORMAT(O.SUBS_EDATE,'YMDHI') <= #{edate}))
			) X
		]]>	
  	</select>
  	
  	<update id="createWorkteamOfWtmFlexibleEmp" parameterType="map">
		INSERT INTO WTM_FLEXIBLE_EMP(TENANT_ID, ENTER_CD, FLEXIBLE_STD_MGR_ID, SABUN, SYMD, EYMD, WORK_TYPE_CD, UPDATE_ID)
			SELECT M.TENANT_ID, M.ENTER_CD, M.FLEXIBLE_STD_MGR_ID, E.SABUN, M.SYMD, M.EYMD, S.WORK_TYPE_CD, #{updateId}
			  FROM WTM_WORKTEAM_MGR M
			  JOIN WTM_WORKTEAM_EMP E
			    ON M.WORKTEAM_MGR_ID = E.WORKTEAM_MGR_ID
			  JOIN WTM_FLEXIBLE_STD_MGR S
			    ON M.FLEXIBLE_STD_MGR_ID = S.FLEXIBLE_STD_MGR_ID
			 WHERE NOT EXISTS
				(
					SELECT * 
					  FROM WTM_FLEXIBLE_EMP F
					  JOIN WTM_FLEXIBLE_STD_MGR SM
					    ON F.FLEXIBLE_STD_MGR_ID = SM.FLEXIBLE_STD_MGR_ID
					 WHERE M.TENANT_ID = F.TENANT_ID
					   AND M.ENTER_CD = F.ENTER_CD
					   AND E.SABUN = F.SABUN
					   AND SM.BASE_WORK_YN = 'N'
					   AND ( M.SYMD BETWEEN F.SYMD AND F.EYMD
						OR M.EYMD BETWEEN F.SYMD AND F.EYMD )
				)
			   AND M.WORKTEAM_MGR_ID = #{workteamMgrId}
			   AND M.TENANT_ID = #{tenantId}
			   AND M.ENTER_CD = #{enterCd} 
			 
  	</update>
  	
  	<update id="updateWorkteamOfWtmFlexibleEmp" parameterType="map" >
  		UPDATE WTM_WORKTcheckBaseWorktimeE
		    ON M.WORKTEAM_MGR_ID = E.WORKTEAM_MGR_ID
		  JOIN WTM_FLEXIBLE_STD_MGR S
		    ON M.FLEXIBLE_STD_MGR_ID = S.FLEXIBLE_STD_MGR_ID
		  JOIN  WTM_FLEXIBLE_EMP F
		    ON M.TENANT_ID = F.TENANT_ID
		   AND M.ENTER_CD = F.ENTER_CD
		   AND E.SABUN = F.SABUN
		   AND M.FLEXIBLE_STD_MGR_ID = F.FLEXIBLE_STD_MGR_ID -- 중복된 사람에서 같은 근무제도의 변경일 경우 갱신하자
		   AND ( M.SYMD BETWEEN F.SYMD AND F.EYMD
				OR M.EYMD BETWEEN F.SYMD AND F.EYMD )
		   SET F.SYMD = M.SYMD
		     , F.EYMD = M.EYMD
		 WHERE  M.WORKTEAM_MGR_ID = #{workteamMgrId}
  	</update>
  	
  	<update id="createWtmWorkteamOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_WORKTEAM_CREATE( #{workteamMgrId}, #{pId} ) }
  	</update>
  	
  	<update id="resetWtmWorkteamOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_FLEXIBLE_EMP_RESET_BY_WORKTEAM( #{workteamMgrId}, #{sabun} , #{pId} ) }
  	</update>
  	
  	<update id="initWtmFlexibleEmpOfWtmWorkDayResult" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_FLEXIBLE_EMP_RESET( #{tenantId}, #{enterCd}, #{symd}, #{eymd}, #{sabun} , #{userId} ) }
  	</update>
  	
  	<!-- 계획을 작성 해야 하는 유연근무제 리스트 -->
  	<select id="getFlexibleEmpListForPlan" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.UNIT_MINUTE AS unitMinute
			     , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'T', 'WORK') AS totalWorkMinute
	 			 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, #{ymd}, 'P', 'WORK') AS planWorkMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
    		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			  LEFT OUTER JOIN WTM_WORK_CALENDAR C
			    ON E.TENANT_ID = C.TENANT_ID
			   AND E.ENTER_CD = C.ENTER_CD
			   AND E.SABUN = C.SABUN
			   AND C.YMD BETWEEN E.SYMD AND E.EYMD
			  LEFT OUTER JOIN WTM_WORK_DAY_RESULT R
			    ON C.TENANT_ID = R.TENANT_ID
			   AND C.ENTER_CD = R.ENTER_CD
			   AND C.YMD = R.YMD
			   AND C.SABUN = R.SABUN
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
			   AND E.WORK_TYPE_CD IN ('SELE_F', 'SELE_C')
			   AND (#{sYmd} BETWEEN E.SYMD AND E.EYMD OR #{eYmd} BETWEEN E.SYMD AND E.EYMD)
			   -- AND (#{ymd} BETWEEN E.SYMD AND E.EYMD OR (#{ymd}<E.SYMD AND #{ymd}<E.EYMD))
			GROUP BY E.FLEXIBLE_EMP_ID, E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, E.EYMD
			ORDER BY sYmd
        ]]>
    </select>
    

    <select id="getWorkDayResultByCalendarId" parameterType="map" resultType="hashmap" >
  	 	<![CDATA[
	    	SELECT C.WORK_DAY_RESULT_ID as workDayResultId
	    			, C.APPL_ID as applId
	    			, C.YMD as ymd
	    			, C.SABUN as sabun
	    			, C.TIME_TYPE_CD as timeTypeCd
	    			, C.TAA_CD as taaCd
	    			, F_WTM_DATE_FORMAT(C.PLAN_SDATE, 'YMDHI') as planSdate
	    			, F_WTM_DATE_FORMAT(C.PLAN_EDATE, 'YMDHI') as planEdate
	    			, C.PLAN_MINUTE as planMinute
	    			, F_WTM_DATE_FORMAT(C.APPR_SDATE, 'YMDHI') as apprSdate
	    			, F_WTM_DATE_FORMAT(C.APPR_EDATE, 'YMDHI') as apprEdate
	    			, C.APPR_MINUTE as apprMinute
	    			, C.WORK_YN as workYn
			  FROM WTM_WORK_DAY_RESULT C
		    WHERE C.YMD = #{ymd} 
		       AND C.TENANT_ID = #{tenantId} 
			   AND C.ENTER_CD = #{enterCd} 
			   AND C.SABUN = #{sabun} 
		]]>
    </select>
    
    <!--해당 기간의 근무 정보 -->
  	<select id="getFlexibleEmpWebList" parameterType="map" resultType="map">
  	<![CDATA[
  		SELECT F_WTM_GET_ORG_NM(A.TENANT_ID, A.ENTER_CD, C.ORG_CD, C.SYMD) AS orgNm
			  , A.SABUN AS sabun
			  , C.EMP_NM AS empNm 
			  , B.WORK_TYPE_CD AS workTypeCd
			  , B.FLEXIBLE_NM AS flexibleNm
			  , A.SYMD AS symd
			  , A.EYMD AS eymd
			  , A.NOTE AS note
			  , CASE WHEN B.WORK_TYPE_CD NOT IN ('BASE', 'WORKTEAM') AND A.EYMD >= F_WTM_DATE_FORMAT(NOW(), 'YMD') THEN CONCAT('<a class="basic" onClick="setModify(', FLEXIBLE_EMP_ID, ')">근무변경/취소</a>')
					    ELSE '' END AS modify
		  FROM WTM_FLEXIBLE_EMP A
		 INNER JOIN WTM_FLEXIBLE_STD_MGR B
		    ON A.FLEXIBLE_STD_MGR_ID = B.FLEXIBLE_STD_MGR_ID
		   AND A.TENANT_ID = B.TENANT_ID
		   AND A.ENTER_CD = B.ENTER_CD
		 INNER JOIN WTM_EMP_HIS C
		    ON A.TENANT_ID = C.TENANT_ID
		   AND A.ENTER_CD = C.ENTER_CD
		   AND A.SABUN = C.SABUN
		   AND A.SYMD BETWEEN C.SYMD AND C.EYMD
		 WHERE A.TENANT_ID = #{tenantId}
		   AND A.ENTER_CD = #{enterCd}
		   AND A.SYMD <= REPLACE(#{eYmd}, '-', '') 
		   AND A.EYMD >= REPLACE(#{sYmd}, '-', '') 
		   AND IF(#{searchKeyword}='',1=1,(C.SABUN = #{searchKeyword} OR C.EMP_NM LIKE CONCAT(#{searchKeyword}, '%')))
		   AND IF(#{searchWorkTypeCd}='',1=1,(B.WORK_TYPE_CD = #{searchWorkTypeCd}))
  		]]>
  	</select>
  	
    <update id="createWorkTermBySabunAndSymdAndEymd" statementType="CALLABLE"  parameterType="map"  >
  		{ call P_WTM_FLEXIBLE_EMP_WORKTERM_C( #{tenantId}, #{enterCd}, #{sabun}, #{symd}, #{eymd}, #{pId} ) }
  	</update>
  	
  	<select id="findWorkDayResultMinMaxByYmdAndTimeTypeCdBySabun" parameterType="map" resultType="hashmap">
  		<![CDATA[
  			SELECT YMD, MIN(PLAN_SDATE) AS PLAN_SDATE, MAX(PLAN_EDATE) AS PLAN_EDATE
			  FROM WTM_WORK_DAY_RESULT
			 WHERE TENANT_ID = #{tenantId}
			   AND ENTER_CD = #{enterCd}
			   AND SABUN = #{sabun}
			   AND YMD = #{ymd}
			   AND TIME_TYPE_CD = #{timeTypeCd}
  		]]>
  	</select>
  	
  	<update id="createFlexibleApplDet" parameterType="map">
	    INSERT INTO WTM_FLEXIBLE_APPL_DET(FLEXIBLE_APPL_ID, YMD, TIME_CD_MGR_ID, , UPDATE_ID)
	    	SELECT F.FLEXIBLE_APPL_ID, D.SUN_YMD, P.TIME_CD_MGR_ID, #{userId}
			  FROM WTM_APPL A
			  JOIN WTM_FLEXIBLE_APPL F
			    ON A.APPL_ID = F.APPL_ID
			  JOIN WTM_FLEXIBLE_STD_MGR M
			    ON A.APPL_CD = M.WORK_TYPE_CD
			   AND A.TENANT_ID = M.TENANT_ID
			   AND A.ENTER_CD = M.ENTER_CD
			  JOIN WTM_DAY_MGR D
			    ON D.SUN_YMD BETWEEN F.SYMD AND F.EYMD
			  JOIN WTM_WORK_PATT_DET P
			    ON P.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
			   AND F_WTM_WEEKDAY(D.SUN_YMD) = P.SEQ
			  JOIN WTM_TIME_CD_MGR T
			    ON P.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
			  LEFT OUTER JOIN WTM_WORK_CALENDAR C
			    ON C.YMD = D.SUN_YMD
			   AND C.SABUN = A.APPL_SABUN
			   AND A.ENTER_CD = C.TENANT_ID
			   AND A.TENANT_ID = C.TENANT_ID
			 WHERE F.FLEXIBLE_APPL_ID = #{flexibleApplId}
			   AND C.YMD IS NULL
    </update>
    
    <update id="deleteByApplId" parameterType="Long">
		DELETE E 
		FROM WTM_FLEXIBLE_EMP E 
		JOIN ( SELECT A.TENANT_ID
		            , A.ENTER_CD
		            , A.APPL_SABUN
		            , F.*
			     FROM WTM_APPL A 
				 JOIN WTM_FLEXIBLE_APPL F 
				   ON A.APPL_ID = F.APPL_ID 
				WHERE A.APPL_ID = #{applId}) S
		  ON S.TENANT_ID = E.TENANT_ID 
		  AND S.ENTER_CD = E.ENTER_CD 
		  AND S.APPL_SABUN = E.SABUN
		  AND S.FLEXIBLE_STD_MGR_ID = E.FLEXIBLE_STD_MGR_ID
		  AND S.SYMD = E.SYMD
		  AND S.EYMD = E.EYMD
	</update>
	
	<!-- 계획을 작성 해야 하는 유연근무제 리스트 -->
  	<select id="getFlexibleListForPlan" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT E.FLEXIBLE_EMP_ID AS flexibleEmpId
			     , M.FLEXIBLE_NM AS flexibleNm
			     , E.TENANT_ID AS tenantId
			     , E.ENTER_CD AS enterCd
			     , E.SABUN AS sabun
			     , E.SYMD AS sYmd
			     , E.EYMD AS eYmd
			     , E.WORK_TYPE_CD AS workTypeCd
			     , C.APPL_NM AS workTypeNm
			     , M.WORK_SHM AS workShm
			     , M.WORK_EHM AS workEhm
			     , M.CORE_SHM AS coreShm
			     , M.CORE_EHM AS coreEhm
			     , M.WORK_DAYS_OPT AS workDaysOpt
			     , M.USED_TERM_OPT AS usedTermOpt
			     , M.APPL_TERM_OPT AS applTermOpt
			     , M.UNIT_MINUTE AS unitMinute
			     , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, 'T', 'WORK') AS totalWorkMinute
	 			 , F_WTM_GET_WORK_MINUTE(E.TENANT_ID, E.ENTER_CD, E.SABUN, E.SYMD, 'P', 'WORK') AS planWorkMinute
			  FROM WTM_FLEXIBLE_EMP E
			  JOIN WTM_FLEXIBLE_STD_MGR M
    		    ON E.FLEXIBLE_STD_MGR_ID = M.FLEXIBLE_STD_MGR_ID
    		  JOIN WTM_APPL_CODE C
			    ON C.ENTER_CD = M.ENTER_CD
			   AND C.TENANT_ID = M.TENANT_ID
			   AND M.WORK_TYPE_CD = C.APPL_CD
			 WHERE E.TENANT_ID = #{tenantId}
			   AND E.ENTER_CD = #{enterCd}
			   AND E.SABUN = #{sabun}
	]]>
			<choose>
			    <when test="flexibleEmpId!=null and flexibleEmpId!=''">
			    	AND E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
			 	</when>
			 	<otherwise>
			 		AND E.WORK_TYPE_CD IN ('SELE_F', 'SELE_C') 
			   		AND (#{ymd} BETWEEN E.SYMD AND E.EYMD OR (#{ymd}&lt;E.SYMD AND #{ymd}&lt;E.EYMD))
			 	</otherwise>
			</choose>
			ORDER BY sYmd
    </select>
    
    <select id="getPlanByFlexibleEmpId" parameterType="map" resultType="map" >
    	<![CDATA[
    	SELECT C.YMD AS ymd
    	     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_SDATE IS NOT NULL THEN R.APPR_SDATE ELSE R.PLAN_SDATE END, 'H:I') AS shm
		     , F_WTM_DATE_FORMAT(CASE WHEN R.APPR_EDATE IS NOT NULL THEN R.APPR_EDATE ELSE R.PLAN_EDATE END, 'H:I') AS ehm
		     , CASE WHEN R.APPR_MINUTE IS NOT NULL THEN R.APPR_MINUTE ELSE R.PLAN_MINUTE END AS minute
		     , R.TIME_TYPE_CD AS timeTypeCd
		     , R.TAA_CD AS taaCd
		     , F_WTM_GET_TAA_CODE_NM(C.TENANT_ID, C.ENTER_CD, R.TAA_CD, C.YMD) AS taaNm
           	 , C.HOLIDAY_YN AS holidayYn
           	 , T.TIME_NM AS timeNm
		  FROM WTM_FLEXIBLE_EMP E
		  JOIN WTM_WORK_CALENDAR C
		    ON E.TENANT_ID = C.TENANT_ID
		   AND E.ENTER_CD = C.ENTER_CD
		   AND E.SABUN = C.SABUN
		   AND C.YMD BETWEEN E.SYMD AND E.EYMD
		  JOIN WTM_TIME_CD_MGR T
		    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
		  LEFT OUTER JOIN  WTM_WORK_DAY_RESULT R
		    ON C.TENANT_ID = R.TENANT_ID
		   AND C.ENTER_CD = R.ENTER_CD
		   AND C.YMD = R.YMD
		   AND C.SABUN = R.SABUN
		 WHERE E.FLEXIBLE_EMP_ID = #{flexibleEmpId}
		 ORDER BY ymd
		 ]]>
    </select>
    
    <select id="getMaxPlanEdate" parameterType="map" resultType="Date" >
    	<![CDATA[
    		SELECT MAX(PLAN_EDATE) AS maxEdate
		      FROM WTM_WORK_DAY_RESULT
		     WHERE TENANT_ID = #{tenantId}
		       AND ENTER_CD = #{enterCd}
		       AND SABUN = #{sabun}
		       AND YMD = #{ymd}
		       AND TIME_TYPE_CD = #{timeTypeCd}
    	]]>
    </select>
    
    <select id="getIntervalDateTime" parameterType="map" resultType="Date" >
    	<![CDATA[
    		SELECT DATE_ADD(#{yyyyMMddHHmmss}, INTERVAL #{intervalMinute} + SUM(F_WTM_CALC_MINUTE(B.SHM, B.EHM, F_WTM_DATE_FORMAT(D.SDATE, 'HI') ,  F_WTM_DATE_FORMAT(D.EDATE, 'HI'), '' ))
				MINUTE ) AS EDATE
				  FROM WTM_WORK_CALENDAR C
				  JOIN WTM_TIME_CD_MGR T
				    ON C.TIME_CD_MGR_ID = T.TIME_CD_MGR_ID
				  JOIN WTM_TIME_BREAK_MGR B
				    ON T.TIME_CD_MGR_ID = B.TIME_CD_MGR_ID
				  JOIN (SELECT STR_TO_DATE(#{yyyyMMddHHmmss}, 'YMDHIS') AS SDATE, DATE_ADD(#{yyyyMMddHHmmss}, INTERVAL #{intervalMinute} MINUTE) AS EDATE ) D
				    ON 1=1
				 WHERE C.TENANT_ID = #{tenantId}
				   AND C.ENTER_CD = #{enterCd}
				   AND C.SABUN = #{sabun}
				   AND C.YMD = #{ymd}
    	]]>
    </select>
    
</mapper>
