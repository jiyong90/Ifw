<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.isu.ifw.mapper.WtmInterfaceMapper">

	<select id="getIfLastDate" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT F_WTM_DATE_FORMAT(MAX(UPDATE_DATE), 'YMDHIS') AS LAST_DATE
			  FROM WTM_IF_HIS
			 WHERE TENANT_ID = #{tenantId}
			   AND IF_ITEM = #{ifType}
			   AND IF_STATUS = 'OK'
        ]]>
    </select>
    <select id="getIfNowDate" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT F_WTM_DATE_FORMAT(SYSDATE, 'YMDHIS') AS IF_DATE
			  FROM DUAL
        ]]>
    </select>
    
    <select id="getIfUrl" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT INFO_DATA
			  FROM comm_management_infomation
			 WHERE tenant_id = #{tenantId}
			   AND info_key = 'HR.IT_URL'
        ]]>
    </select>
    
	<insert id="insertIfHis" parameterType="hashmap">
		INSERT INTO WTM_IF_HIS
		(
			  TENANT_ID
			, IF_STATUS
			, IF_ITEM 
			, IF_SEARCH_DATE 
			, IF_MSG 
			, UPDATE_DATE
		) VALUES (
			  #{tenantId, jdbcType=NUMERIC}
			, #{ifStatus, jdbcType=VARCHAR}
			, #{ifItem, jdbcType=VARCHAR}
			, F_WTM_TO_DATE(#{ifEndDate}, 'YMDHIS')
			, #{ifMsg, jdbcType=VARCHAR}
			, F_WTM_TO_DATE(#{updateDate}, 'YMDHIS')
		)
	</insert>
	
	<select id="getWtmCodeId" parameterType="map" resultType="hashmap">
        <![CDATA[
			SELECT CODE_ID
			  FROM WTM_CODE
			 WHERE TENANT_ID = #{tenantId}
			   AND ENTER_CD = #{enterCd}
			   AND GRP_CODE_CD = #{grpCodeCd}
			   AND CODE_CD = #{codeCd}
			   AND CODE_NM = #{codeNm}
			   AND SYMD = #{symd}
        ]]>
    </select>
    
    <insert id="insertWtmCode" parameterType="hashmap">
    	<foreach collection="list" item="item" separator="; ">
			INSERT INTO WTM_CODE
			(
				  TENANT_ID
				, ENTER_CD 
				, GRP_CODE_CD 
				, CODE_CD 
				, CODE_NM 
				, SYMD 
				, EYMD 
				, NOTE
				, UPDATE_DATE
				, UPDATE_ID
			) VALUES 
			(     #{item.tenantId, jdbcType=NUMERIC}
	        	, #{item.enterCd, jdbcType=VARCHAR}
	        	, #{item.grpCodeCd, jdbcType=VARCHAR}
	        	, #{item.codeCd, jdbcType=VARCHAR}
	        	, #{item.codeNm, jdbcType=VARCHAR}
	        	, #{item.symd, jdbcType=VARCHAR}
	        	, #{item.eymd, jdbcType=VARCHAR}
	        	, #{item.note, jdbcType=VARCHAR}
	        	, SYSDATE
	        	, '0'
	        )
			</foreach>
	</insert>
	
	<update id="updateWtmCode" parameterType="hashmap">
		UPDATE WTM_CODE SET
		    NOTE = CASE
		    <foreach collection="list" item="item" separator="">
		        when CODE_ID = #{item.codeId} then #{item.note}
		    </foreach>
    		END
		  , UPDATE_DATE = SYSDATE
		  , UPDATE_ID = '0'
		WHERE CODE_ID IN
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			#{item.codeId}
		</foreach>
	</update>
	
	<update id="updateWtmCodeHisEymd" parameterType="hashmap">
		<![CDATA[
			UPDATE WTM_CODE
			   SET EYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(F_WTM_TO_DATE(#{symd}, 'YMD'), -1, 'D'), 'YMD'), '29991231')
			  , UPDATE_DATE = SYSDATE
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND GRP_CODE_CD = #{grpCodeCd}
			  AND CODE_CD = #{codeCd}
			  AND #{symd} > SYMD
		]]>
	</update>
	
	<update id="updateWtmCodeHisSymd" parameterType="hashmap" >
        <![CDATA[
			UPDATE WTM_CODE
			   SET SYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(F_WTM_TO_DATE(#{eymd}, 'YMD'), -1, 'D'), 'YMD'), '29991231')
			  , UPDATE_DATE = SYSDATE
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND GRP_CODE_CD = #{grpCodeCd}
			  AND CODE_CD = #{codeCd}
			  AND #{symd} < SYMD
        ]]>
    </update>
    
    <update id="insertWtmHoliday" parameterType="map" >
        MERGE INTO WTM_HOLIDAY_MGR M
        USING (
        	SELECT T.TENANT_ID
        	     , T.ENTER_CD
        	     , T.BISINESS_PLACE_CD
        	     , T.HOLIDAY_YMD
	        	 , T.HOLIDAY_NM
	        	 , T.SUN_YN
	        	 , T.FESTIVE_YN
	        	 , T.PAY_YN
	        	 , SYSDATE AS UPDATE_DATE
	        	 , '0' AS UPDATE_ID
        	  FROM (
        	  		SELECT NULL AS TENANT_ID
						 , NULL AS ENTER_CD
						 , NULL AS BISINESS_PLACE_CD
						 , NULL AS HOLIDAY_YMD
						 , NULL AS HOLIDAY_NM
						 , NULL AS SUN_YN
						 , NULL AS FESTIVE_YN
						 , NULL AS PAY_YN
				  	  FROM DUAL  
        	  		<foreach collection="list" item="item">   
       				 <![CDATA[ 
        	  		UNION ALL
		        	SELECT TRIM(#{item.tenantId}) AS TENANT_ID
			        	, TRIM(#{item.enterCd}) AS ENTER_CD
			        	, TRIM(#{item.locationCd}) AS BISINESS_PLACE_CD
			        	, TRIM(#{item.holidayYmd}) AS HOLIDAY_YMD
			        	, TRIM(#{item.holidayNm}) AS HOLIDAY_NM
			        	, TRIM(#{item.sunYn}) AS SUN_YN
			        	, TRIM(#{item.FESTIVE_YN, jdbcType=VARCHAR}) AS FESTIVE_YN
			        	, TRIM(#{item.payYn}) AS PAY_YN
			          FROM DUAL
        				]]>
        	  		</foreach>
        	  ) T
        	  WHERE T.TENANT_ID IS NOT NULL
        	    AND T.ENTER_CD IS NOT NULL
        	    AND T.BISINESS_PLACE_CD IS NOT NULL
        	    AND T.HOLIDAY_YMD IS NOT NULL
        ) S
        ON (M.TENANT_ID = S.TENANT_ID 
	        AND M.ENTER_CD = S.ENTER_CD
	        AND M.BISINESS_PLACE_CD = S.BISINESS_PLACE_CD
	        AND M.HOLIDAY_YMD = S.HOLIDAY_YMD)
        WHEN MATCHED THEN
        	UPDATE SET M.HOLIDAY_NM = S.HOLIDAY_NM
	             , SUN_YN = S.SUN_YN
	             , FESTIVE_YN = S.FESTIVE_YN
	             , PAY_YN = S.PAY_YN
	             , UPDATE_DATE = S.UPDATE_DATE
	             , UPDATE_ID = S.UPDATE_ID
        WHEN NOT MATCHED THEN
        	INSERT (
	        	  TENANT_ID
	        	, ENTER_CD
	        	, BISINESS_PLACE_CD
	        	, HOLIDAY_YMD
	        	, HOLIDAY_NM
	        	, SUN_YN
	        	, FESTIVE_YN
	        	, PAY_YN
	        	, UPDATE_DATE
	        	, UPDATE_ID
	        ) 
	        VALUES (
	        	  S.TENANT_ID
	        	, S.ENTER_CD
	        	, S.BISINESS_PLACE_CD
	        	, S.HOLIDAY_YMD
	        	, S.HOLIDAY_NM
	        	, S.SUN_YN
	        	, S.FESTIVE_YN
	        	, S.PAY_YN
	        	, S.UPDATE_DATE
	        	, S.UPDATE_ID
	        ) 
    </update>
    
    <select id="getWtmTaaCodeId" parameterType="map" resultType="hashmap">
		SELECT TAA_CODE_ID
		  FROM WTM_TAA_CODE
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND TAA_CD = #{taaCd}
    </select>
    
    <insert id="insertTaaCode" parameterType="hashmap">
    	<foreach collection="list" item="item" separator="; ">
		INSERT INTO WTM_TAA_CODE
		(
			  TENANT_ID
			, ENTER_CD 
			, TAA_CD 
			, TAA_NM 
			, TAA_TYPE_CD 
			, HOL_INCL_YN 
			, REQUEST_TYPE_CD 
			, WORK_YN
			, UPDATE_DATE
			, UPDATE_ID
		) VALUES 
			(
			  #{item.tenantId}
			, #{item.enterCd}
			, #{item.taaCd}
			, #{item.taaNm}
			, #{item.taaTypeCd}
			, #{item.holInclYn}
			, #{item.requestTypeCd}
			, #{item.workYn}
			, SYSDATE
			, '0'
			)
		</foreach>
	</insert>
	
	<update id="updateTaaCode" parameterType="hashmap">
		UPDATE WTM_TAA_CODE SET
		    TAA_NM = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.taaNm}
		    </foreach> END
		  , TAA_TYPE_CD = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.taaTypeCd}
		    </foreach> END
		  , HOL_INCL_YN = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.holInclYn}
		    </foreach> END
		  , REQUEST_TYPE_CD = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.requestTypeCd}
		    </foreach> END
		  , WORK_YN = CASE 
		    <foreach collection="list" item="item" separator="">
		        when TAA_CODE_ID = #{item.taaCodeId} then #{item.workYn}
		    </foreach> END
		  , UPDATE_DATE = SYSDATE
		  , UPDATE_ID = '0'
		WHERE TAA_CODE_ID IN 
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			#{item.taaCodeId}
		</foreach>
	</update>
	
	<update id="insertWtmOrgCode" parameterType="java.util.HashMap" >
    	MERGE INTO WTM_ORG_CODE C
        USING (
        	SELECT T.TENANT_ID
	        	 , T.ENTER_CD
	        	 , T.ORG_CD
	        	 , T.SYMD
	        	 , T.ORG_NM
	        	 , T.EYMD
	        	 , T.ORG_TYPE
	        	 , T.NOTE
	        	 , SYSDATE AS UPDATE_DATE
	        	 , '0' AS UPDATE_ID
        	  FROM (
        	  		SELECT NULL AS TENANT_ID
						 , NULL AS ENTER_CD
						 , NULL AS ORG_CD
						 , NULL AS SYMD
						 , NULL AS ORG_NM
						 , NULL AS EYMD
						 , NULL AS ORG_TYPE
						 , NULL AS NOTE
				  	  FROM DUAL 
        	  		<foreach collection="list" item="item">    
        	  		UNION ALL
		        	SELECT TRIM(#{item.tenantId}) AS TENANT_ID
			        	, TRIM(#{item.enterCd}) AS ENTER_CD
			        	, TRIM(#{item.orgCd}) AS ORG_CD
			        	, TRIM(#{item.symd}) AS SYMD
			        	, TRIM(#{item.orgNm}) AS ORG_NM
			        	, TRIM(#{item.eymd}) AS EYMD
			        	, TRIM(#{item.orgType}) AS ORG_TYPE
			        	, TRIM(#{item.note}) AS NOTE
			          FROM DUAL
        	  		</foreach>
        	  ) T
        	  WHERE T.TENANT_ID IS NOT NULL
        	    AND T.ENTER_CD IS NOT NULL
        	    AND T.ORG_CD IS NOT NULL
        	    AND T.SYMD IS NOT NULL
        ) S
        ON (C.TENANT_ID = S.TENANT_ID 
	        AND C.ENTER_CD = S.ENTER_CD
	        AND C.ORG_CD = S.ORG_CD
	        AND C.SYMD = S.SYMD)
        WHEN MATCHED THEN
        	UPDATE SET ORG_NM = S.ORG_NM
	             , ORG_TYPE = S.ORG_TYPE
	             , EYMD = S.EYMD
	             , NOTE = S.NOTE
	             , UPDATE_DATE = S.UPDATE_DATE
	             , UPDATE_ID = S.UPDATE_ID
        WHEN NOT MATCHED THEN
        	INSERT (
	        	  TENANT_ID
	        	, ENTER_CD
	        	, ORG_CD
	        	, SYMD
	        	, ORG_NM
	        	, EYMD
	        	, ORG_TYPE
	        	, NOTE
	        	, UPDATE_DATE
	        	, UPDATE_ID
	        ) 
	        VALUES (
	        	  S.TENANT_ID
	        	, S.ENTER_CD
	        	, S.ORG_CD
	        	, S.SYMD
	        	, S.ORG_NM
	        	, S.EYMD
	        	, S.ORG_TYPE
	        	, S.NOTE
	        	, S.UPDATE_DATE
	        	, S.UPDATE_ID
	        ) 
    </update>
    
    <update id="updateWtmOrgCodeHisEymd" parameterType="hashmap">
		<![CDATA[
			UPDATE WTM_ORG_CODE
			   SET EYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(DATE_ADD(F_WTM_TO_DATE(#{symd}, 'YMD'), INTERVAL -1 DAY), 'YMD'), '29991231')
			  , UPDATE_DATE = SYSDATE
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND ORG_CD = #{orgCd}
			  AND #{symd} > SYMD
		]]>
	</update>
	
	<update id="updateWtmOrgCodeHisSymd" parameterType="hashmap" >
        <![CDATA[
			UPDATE WTM_ORG_CODE
			   SET SYMD =F_WTM_NVL(F_WTM_DATE_FORMAT(DATE_ADD(F_WTM_TO_DATE(#{eymd}, 'YMD'), INTERVAL -1 DAY), 'YMD'), '29991231')
			  , UPDATE_DATE = SYSDATE
			  , UPDATE_ID = '0'
			WHERE 1=1
			  AND TENANT_ID = #{tenantId}
			  AND ENTER_CD = #{enterCd}
			  AND ORG_CD = #{orgCd}
			  AND #{symd} < SYMD
        ]]>
    </update>
    
    <select id="getWtmOgrChartId" parameterType="map" resultType="hashmap">
		SELECT ORG_CHART_ID
		  FROM WTM_ORG_CHART
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND SYMD = #{symd}
    </select>
    
    <insert id="insertWtmOrgChart" parameterType="java.util.HashMap" >
        INSERT INTO WTM_ORG_CHART (
        	  TENANT_ID
        	, ENTER_CD
        	, ORG_CHART_NM
        	, SYMD
        	, EYMD
        	, NOTE
        	, UPDATE_DATE
        	, UPDATE_ID
        ) VALUES 
		(     #{tenantId}
        	, #{enterCd}
        	, #{orgChartNm}
        	, #{symd}
        	, #{eymd}
        	, #{note}
        	, SYSDATE
        	, '0'
        )
    </insert>
    
    <update id="updateWtmOrgChart" parameterType="hashmap">
		UPDATE WTM_ORG_CHART SET
		    ORG_CHART_NM = #{orgChartNm}
		  , EYMD = #{eymd}
		  , NOTE = #{note}
		  , UPDATE_DATE = SYSDATE
		  , UPDATE_ID = '0'
		WHERE ORG_CHART_ID = #{orgChartId}
	</update>
	
    <update id="insertWtmOrgChartDet" parameterType="java.util.HashMap" >
    	MERGE INTO WTM_ORG_CHART_DET D
        USING (
        	SELECT T.ORG_CHART_ID
	        	 , T.ORG_CD
	        	 , T.PRIOR_ORG_CD
	        	 , T.SEQ
	        	 , T.ORG_LEVEL
	        	 , T.ORDER_SEQ
	        	 , SYSDATE AS UPDATE_DATE
	        	 , '0' AS UPDATE_ID
        	  FROM (
        	  		SELECT NULL AS ORG_CHART_ID
						 , NULL AS ORG_CD
						 , NULL AS PRIOR_ORG_CD
						 , NULL AS SEQ
						 , NULL AS ORG_LEVEL
						 , NULL AS ORDER_SEQ
				  	  FROM DUAL 
        	  		<foreach collection="list" item="item">    
        	  		UNION ALL
		        	SELECT TRIM(#{item.orgChartId}) AS ORG_CHART_ID
			        	, TRIM(#{item.orgCd}) AS ORG_CD
			        	, TRIM(#{item.priorOrgCd}) AS PRIOR_ORG_CD
			        	, TRIM(#{item.seq}) AS SEQ
			        	, TRIM(#{item.orgLevel}) AS ORG_LEVEL
			        	, TRIM(#{item.orderSeq}) AS ORDER_SEQ
			          FROM DUAL
        	  		</foreach>
        	  ) T
        	  WHERE T.ORG_CHART_ID IS NOT NULL
        	    AND T.ORG_CD IS NOT NULL
        ) S
        ON (D.ORG_CHART_ID = S.ORG_CHART_ID 
	        AND D.ORG_CD = S.ORG_CD)
        WHEN MATCHED THEN
        	UPDATE SET PRIOR_ORG_CD = S.PRIOR_ORG_CD
	             , SEQ = S.SEQ
	             , ORG_LEVEL = S.ORG_LEVEL
	             , ORDER_SEQ = S.ORDER_SEQ
	             , UPDATE_DATE = S.UPDATE_DATE
	             , UPDATE_ID = S.UPDATE_ID
        WHEN NOT MATCHED THEN
        	INSERT (
	        	  ORG_CHART_ID
	        	, ORG_CD
	        	, PRIOR_ORG_CD
	        	, SEQ
	        	, ORG_LEVEL
	        	, ORDER_SEQ
	        	, UPDATE_DATE
	        	, UPDATE_ID
	        ) 
	        VALUES (
	        	  S.ORG_CHART_ID
	        	, S.ORG_CD
	        	, S.PRIOR_ORG_CD
	        	, S.SEQ
	        	, S.ORG_LEVEL
	        	, S.ORDER_SEQ
	        	, S.UPDATE_DATE
	        	, S.UPDATE_ID
	        ) 
    </update>
	
	<insert id="insertEmpHisTemp" parameterType="hashmap">
		<foreach collection="list" item="item" separator="; ">
		INSERT INTO WTM_IF_EMP_TEMP
		(
			  TENANT_ID
			, ENTER_CD
			, SABUN
			, EMP_NM
			, EMP_ENG_NM
			, SYMD
			, EYMD
			, STATUS_CD
			, ORG_CD
			, BUSINESS_PLACE_CD
			, DUTY_CD
			, POS_CD
			, CLASS_CD
			, JOB_GROUP_CD
			, JOB_CD
			, PAY_TYPE_CD
			, ORG_PATH
			, LEADER_YN
			, NOTE
		) VALUES 
			(
			  #{item.tenantId}
			, #{item.enterCd}
			, #{item.sabun}
			, #{item.empNm}
			, #{item.empEngNm}
			, #{item.symd}
			, #{item.eymd}
			, #{item.statusCd}
			, #{item.orgCd}
			, #{item.businessPlaceCd}
			, #{item.dutyCd}
			, #{item.posCd}
			, #{item.classCd}
			, #{item.jobGroupCd}
			, #{item.jobCd}
			, #{item.payTypeCd}
			, #{item.orgPath}
			, #{item.leaderYn}
			, #{item.note}
			)
		</foreach>
	</insert>
	
	<select id="setEmpHis" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_IF_EMP_HIS( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{nowDataTime, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}) }
  	</select>
  	
  	<select id="getEmpBaseList" parameterType="map" resultType="hashmap">
		SELECT A.TENANT_ID AS tenantId, A.ENTER_CD AS enterCd, A.SABUN AS sabun, GREATEST(A.SYMD, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(sysdate, -1, 'M'), 'YMD'))  as symd, LEAST(A.EYMD, F_WTM_DATE_FORMAT(F_WTM_DATE_ADD(sysdate, 1, 'M'), 'YMD')) as eymd, '0' as userId
		  FROM WTM_EMP_HIS A
		 INNER JOIN WTM_IF_EMP_MSG B
			 ON A.TENANT_ID = B.TENANT_ID
			AND A.ENTER_CD = B.ENTER_CD
			AND A.SABUN = B.SABUN
			AND A.SYMD = B.CHG_YMD
		 WHERE B.TENANT_ID = #{tenantId}
		   AND DATE_FORMAT(B.UPDATE_DATE, 'YMDHIS') BETWEEN #{ifEndDate} AND #{updateDate}
		   AND B.CHG_TYPE_CD = 'BUSINESS_PLACE_CD'
		   AND B.NEW_VALUE IS NOT NULL
		 ORDER BY ENTER_CD, SABUN
    </select>
    
    <insert id="insertWtmEmpAddr" parameterType="java.util.HashMap" >
        MERGE INTO WTM_EMP_ADDR D
	USING (
			SELECT T.TENANT_ID
					, T.ENTER_CD
					, T.SABUN
					, T.EMAIL
					, T.HAND_PHONE
					, T.NOTE
	        	 , SYSDATE AS UPDATE_DATE
	        	 , '0' AS UPDATE_ID
			  FROM (
				SELECT NULL AS TENANT_ID
					, NULL AS ENTER_CD
					, NULL AS SABUN
					, NULL AS EMAIL
					, NULL AS HAND_PHONE
					, NULL AS NOTE
					FROM DUAL
				<foreach collection="list" item="item">    
        	  		UNION ALL
					SELECT TRIM(#{item.tenantId}) AS TENANT_ID
			        	, TRIM(#{item.enterCd}) AS ENTER_CD
			        	, TRIM(#{item.sabun}) AS SABUN
			        	, TRIM(#{item.email}) AS EMAIL
			        	, TRIM(#{item.handPhone}) AS HAND_PHONE
						, TRIM(#{item.note}) AS NOTE
			          FROM DUAL
        	  		</foreach>
					) T
				WHERE T.TENANT_ID IS NOT NULL
				AND T.ENTER_CD IS NOT NULL
				AND T.SABUN IS NOT NULL
			) S
		 ON (D.TENANT_ID = S.TENANT_ID
			AND D.ENTER_CD = S.ENTER_CD
			AND D.SABUN = S.SABUN)
        WHEN MATCHED THEN
        	UPDATE SET EMAIL = S.EMAIL
	             , HAND_PHONE = S.HAND_PHONE
	             , NOTE = S.NOTE
	             , UPDATE_DATE = S.UPDATE_DATE
	             , UPDATE_ID = S.UPDATE_ID
        WHEN NOT MATCHED THEN
        	INSERT (
	        	  TENANT_ID
	        	, ENTER_CD
	        	, SABUN
	        	, EMAIL
	        	, HAND_PHONE
	        	, NOTE
	        	, UPDATE_DATE
	        	, UPDATE_ID
	        ) 
	        VALUES (
	        	  S.TENANT_ID
	        	, S.ENTER_CD
	        	, S.SABUN
	        	, S.EMAIL
	        	, S.HAND_PHONE
	        	, S.NOTE
	        	, S.UPDATE_DATE
	        	, S.UPDATE_ID
	        ) 
    </insert>
    
    <select id="setTaaApplIf" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_IF_TAA_APPL( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{taaCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ifApplNo, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{status, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaApplId,jdbcType=BIGINT, javaType=java.lang.Long, mode=OUT}
  			  , #{applId,jdbcType=BIGINT, javaType=java.lang.Long, mode=OUT}
  			  , #{oldStatus,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	<select id="setTaaApplDayIf" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_IF_TAA_APPL_DAY( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{taaCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ymd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eHm, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{taaApplId,jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{applId,jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{status,jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{oldStatus,jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{timeTypeCd,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaSetYn,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaSdate,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{taaEdate,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	<select id="getWtmTaaApplId" parameterType="map" resultType="hashmap">
		SELECT TAA_APPL_ID
		  FROM WTM_TAA_APPL
		 WHERE TENANT_ID = #{tenantId}
		   AND ENTER_CD = #{enterCd}
		   AND IF_APPL_NO = #{ifApplNo}
	</select>
	
	<select id="setWorkTimeCloseIf" statementType="CALLABLE" parameterType="java.util.HashMap" >
  		{ call P_WTM_CLOSE_WORKTIME( 
  				#{tenantId, jdbcType=BIGINT, javaType=java.lang.Long, mode=IN}
  			  , #{enterCd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{ym, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{eYmd, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{sabun, jdbcType=VARCHAR, javaType=java.lang.String, mode=IN}
  			  , #{retCode,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  , #{retMsg,jdbcType=VARCHAR, javaType=java.lang.String, mode=OUT}
  			  ) }
  	</select>
  	
  	<select id="getExceptRuleId" parameterType="map" resultType="hashmap">
        <![CDATA[
        	SELECT info_data
			  FROM comm_management_infomation
			 WHERE tenant_id = #{tenantId}
			   AND info_key = 'HR.IT_URL'
        ]]>
    </select>
    
    <select id="getExpTableList" parameterType="map" resultType="hashmap">
		SELECT TABLE_NAME
		FROM INFORMATION_SCHEMA.TABLES
		WHERE TABLE_SCHEMA = #{tableSchema} 
		  AND TABLE_ROWS > 0
		    AND TABLE_NAME LIKE 'WTM%'
  AND TABLE_NAME = 'WTM_WORK_PATT_DET'
  		ORDER BY TABLE_NAME
    </select>
    
    <select id="getExpColList" parameterType="map" resultType="hashmap">
		SELECT COLUMN_NAME AS COL_NM, DATA_TYPE, ORDINAL_POSITION AS COL_NO
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_SCHEMA= #{tableSchema} 
		  AND TABLE_NAME = #{tableName} 
		ORDER BY ORDINAL_POSITION
    </select>
    <select id="getExpDataList" parameterType="map" resultType="hashmap">
		SELECT *
		FROM ${tableName}
    </select>
</mapper>
